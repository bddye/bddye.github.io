<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2025.5.1miniLCTF</title>
    <link href="/2025/06/01/2025-5-1miniLCTF/"/>
    <url>/2025/06/01/2025-5-1miniLCTF/</url>
    
    <content type="html"><![CDATA[<h1 id="2025-5-1miniLCTF"><a href="#2025-5-1miniLCTF" class="headerlink" title="2025.5.1miniLCTF"></a>2025.5.1miniLCTF</h1><p>是 <strong>2025.5.1miniLCTF</strong> 哒！</p><p>勉勉强强做了3道题，稍微记录一下</p><h2 id="rsasign"><a href="#rsasign" class="headerlink" title="rsasign"></a>rsasign</h2><p>听说你很会RSA？ （flag以miniL开头）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> bytes_to_long, getPrime, inverse<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">genKeys</span>(<span class="hljs-params">nbits</span>):<br>    e = <span class="hljs-number">0x10001</span><br>    p = getPrime(nbits // <span class="hljs-number">2</span>)<br>    q = getPrime(nbits // <span class="hljs-number">2</span>)<br>    n = p * q<br>    phi = n - (p + q) + <span class="hljs-number">1</span><br>    d = inverse(e, phi)<br>    pubkey = (n, e)<br>    prikey = (d, p, q)<br>    <br>    <span class="hljs-keyword">return</span> pubkey, prikey<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">msg, pubkey</span>):<br>    m = bytes_to_long(msg)<br>    n, e = pubkey<br>    c = <span class="hljs-built_in">pow</span>(m, e, n)<br>    <span class="hljs-keyword">return</span> c<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_gift</span>(<span class="hljs-params">prikey</span>):<br>    a = bytes_to_long(<span class="hljs-string">b&#x27;miniL&#x27;</span>)<br>    b = bytes_to_long(<span class="hljs-string">b&#x27;mini7&#x27;</span>)<br>    p, q = prikey[<span class="hljs-number">1</span>:]<br>    phi = (p - <span class="hljs-number">1</span>)*(q - <span class="hljs-number">1</span>)<br>    giftp = p + a<br>    giftq = q + b<br>    gift = <span class="hljs-built_in">pow</span>((giftp + giftq + a*b), <span class="hljs-number">2</span>, phi)<br>    <span class="hljs-keyword">return</span> gift &gt;&gt; <span class="hljs-number">740</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    nbits = <span class="hljs-number">1024</span><br>    pubkey, prikey = genKeys(nbits)<br>    c = encrypt(flag, pubkey)<br>    gift = get_gift(prikey)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;output.txt&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(<span class="hljs-string">&#x27;pubkey = &#x27;</span> + <span class="hljs-built_in">str</span>(pubkey) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>        f.write(<span class="hljs-string">&#x27;c = &#x27;</span> + <span class="hljs-built_in">str</span>(c) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>        f.write(<span class="hljs-string">&#x27;gift = &#x27;</span> + <span class="hljs-built_in">str</span>(gift) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br></code></pre></td></tr></table></figure><p>题目给出了$gift&#x3D;(p+q+a+b+a * b)^2 \ (mod\ phi)$抹去了低740位后的结果，实际测试可以得出，在抹去了低740位后，gift和$(p^2+q^2)%phi&gt;&gt;740$的结果是一样的。<br>而$n&#x3D;p * q$，phi和n在题目中抹去了低740位的情况下可以认为是一样的，同时测试得出$(p^2+q^2)&#x2F;&#x2F;phi&#x3D;2$，也就是说$gift&lt;&lt;740+2 * n$是$p^2+q^2$的近似值，那么我们可以解出$p+q$的近似值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br>pq=<span class="hljs-built_in">int</span>(gmpy2.iroot((gift&lt;&lt;<span class="hljs-number">740</span>)+<span class="hljs-number">4</span>*n,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><p>然后我们可以用这个近似值以及$n&#x3D;p*q$来解出p和q的近似值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sage">pq=20722134693508777238800877111571850901132625448654013903223307395782671739442468572117525995252542531260267404142594227817402250654503919887124996488743970<br><br>n=103894244981844985537754880154957043605938484102562158690722531081787219519424572416881754672377601851964416424759136080204870893054485062449999897173374210892603308440838199225926262799093152616430249061743215665167990978654674200171059005559869946978592535720766431524243942662028069102576083861914106412399<br><br>R.&lt;x&gt;=PolynomialRing(RealField(1000))<br>f=x*(pq-x)-n<br>root=f.roots()<br>print(int(root[0][0]),int(root[1][0]))<br></code></pre></td></tr></table></figure><p>然后二元copper即可求出p，q<br>ps:这里之前做的时候表达式写错了，然后好久求不出来…<br>二元copper:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs sage">import itertools<br><br>def small_roots(f, bounds, m=1, d=None):<br>    if not d:<br>        d = f.degree()<br><br>    if isinstance(f, Polynomial):<br>        x, = polygens(f.base_ring(), f.variable_name(), 1)<br>        f = f(x)<br><br>    R = f.base_ring()<br>    N = R.cardinality()<br>    <br>    f /= f.coefficients().pop(0)<br>    f = f.change_ring(ZZ)<br><br>    G = Sequence([], f.parent())<br>    for i in range(m+1):<br>        base = N^(m-i) * f^i<br>        for shifts in itertools.product(range(d), repeat=f.nvariables()):<br>            g = base * prod(map(power, f.variables(), shifts))<br>            G.append(g)<br><br>    B, monomials = G.coefficient_matrix()<br>    monomials = vector(monomials)<br><br>    factors = [monomial(*bounds) for monomial in monomials]<br>    for i, factor in enumerate(factors):<br>        B.rescale_col(i, factor)<br><br>    B = B.dense_matrix().LLL()<br><br>    B = B.change_ring(QQ)<br>    for i, factor in enumerate(factors):<br>        B.rescale_col(i, 1/factor)<br><br>    H = Sequence([], f.parent().change_ring(QQ))<br>    for h in filter(None, B*monomials):<br>        H.append(h)<br>        I = H.ideal()<br>        if I.dimension() == -1:<br>            H.pop()<br>        elif I.dimension() == 0:<br>            roots = []<br>            for root in I.variety(ring=ZZ):<br>                root = tuple(R(root[var]) for var in f.variables())<br>                roots.append(root)<br>            return roots<br><br>    return []<br></code></pre></td></tr></table></figure><p>解p,q:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sage">n=103894244981844985537754880154957043605938484102562158690722531081787219519424572416881754672377601851964416424759136080204870893054485062449999897173374210892603308440838199225926262799093152616430249061743215665167990978654674200171059005559869946978592535720766431524243942662028069102576083861914106412399<br><br>p1=8501639590121977595053523738818375259679414794730106020578368658056270529108719142843616239876180609592408042971719162819965092838486348749800524648844783<br>q1=12220495103386799643747353372753475641453210653923907882644938737726401210333749429273909755376361921667859361170875064997437157816017571137324471839899186<br><br>P.&lt;x,y&gt; = PolynomialRing(Zmod(n))<br>f=(p1-x)*(q1+y)-n<br>bounds = (2^230,2^230)<br>res = small_roots(f,bounds,m = 4 ,d = 7)<br>print(res)<br></code></pre></td></tr></table></figure><p>然后正常解个RSA即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs flag">miniL&#123;D0_Y@U_Li)e_T&amp;@_RRRSA??&#125;<br></code></pre></td></tr></table></figure><h2 id="babaisiginsigin"><a href="#babaisiginsigin" class="headerlink" title="babaisiginsigin"></a>babaisiginsigin</h2><p>Cryptoers(?) sign in here \(≥v≤)&#x2F;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calculate_level1</span>(<span class="hljs-params">m, x, y</span>):<br>    <span class="hljs-keyword">return</span> (m | x) + (m | y)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calculate_level2</span>(<span class="hljs-params">m, x, y</span>):<br>    <span class="hljs-keyword">return</span> (m | x) + (m ^ y)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">level</span>(<span class="hljs-params">conn, calculate, x, y, guess, description, test_times</span>):<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(test_times):<br>        conn.sendall(<span class="hljs-string">b&quot;Enter your number: &quot;</span>)<br>        <br>        <span class="hljs-comment"># 设置 5 秒超时</span><br>        conn.settimeout(<span class="hljs-number">5</span>)<br>        <br>        <span class="hljs-keyword">try</span>:<br>            data = conn.recv(<span class="hljs-number">1024</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> data:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">try</span>:<br>                test = <span class="hljs-built_in">int</span>(data.strip())<br>            <span class="hljs-keyword">except</span>:<br>                conn.sendall(<span class="hljs-string">b&quot;Invalid input. Bye.\n&quot;</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            result = calculate(test, x, y)<br>            conn.sendall(<span class="hljs-string">f&quot;Calculation result: <span class="hljs-subst">&#123;result&#125;</span>\n&quot;</span>.encode())<br>        <span class="hljs-keyword">except</span> socket.timeout:<br>            conn.sendall(<span class="hljs-string">b&quot;Time out! Respond in 5 seconds.\n&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    conn.sendall(<span class="hljs-string">f&quot;\nNow, guess the result of <span class="hljs-subst">&#123;description&#125;</span> for m = <span class="hljs-subst">&#123;guess&#125;</span>:\n&quot;</span>.encode())<br>    <br>    <span class="hljs-comment"># 设置 5 秒超时</span><br>    conn.settimeout(<span class="hljs-number">5</span>)<br>    <br>    <span class="hljs-keyword">try</span>:<br>        data = conn.recv(<span class="hljs-number">1024</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> data:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">try</span>:<br>            user_guess = <span class="hljs-built_in">int</span>(data.strip())<br>        <span class="hljs-keyword">except</span>:<br>            conn.sendall(<span class="hljs-string">b&quot;Invalid input. Bye.\n&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>        correct_result = calculate(guess, x, y)<br>        <span class="hljs-keyword">if</span> user_guess == correct_result:<br>            conn.sendall(<span class="hljs-string">b&quot;Correct! Proceeding to next level...\n\n&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            conn.sendall(<span class="hljs-string">b&quot;Wrong guess! Exiting...\n&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">except</span> socket.timeout:<br>        conn.sendall(<span class="hljs-string">b&quot;Time out! You took too long to respond.\n&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_client</span>(<span class="hljs-params">conn, addr, flag</span>):<br>    conn.sendall(<span class="hljs-string">b&quot;Welcome to Puzzle!\n\n&quot;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># Level 1</span><br>        x = random.getrandbits(<span class="hljs-number">30</span>)<br>        y = random.getrandbits(<span class="hljs-number">30</span>)<br>        guess = random.getrandbits(<span class="hljs-number">30</span>)<br>        conn.sendall(<span class="hljs-string">b&quot;Level 1:\n&quot;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> level(conn, calculate_level1, x, y, guess, <span class="hljs-string">&quot;(m | x) + (m | y)&quot;</span>, test_times=<span class="hljs-number">2</span>):<br>            conn.close()<br>            <span class="hljs-keyword">return</span><br><br>        <span class="hljs-comment"># Level 2</span><br>        x = random.getrandbits(<span class="hljs-number">30</span>)<br>        y = random.getrandbits(<span class="hljs-number">30</span>)<br>        guess = random.getrandbits(<span class="hljs-number">30</span>)<br>        conn.sendall(<span class="hljs-string">b&quot;Level 2:\n&quot;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> level(conn, calculate_level2, x, y, guess, <span class="hljs-string">&quot;(m | x) + (m ^ y)&quot;</span>, test_times=<span class="hljs-number">2</span>):<br>            conn.close()<br>            <span class="hljs-keyword">return</span><br><br>        <span class="hljs-comment"># 通关，发flag</span><br>        conn.sendall(<span class="hljs-string">f&quot;Congratulations! You&#x27;ve passed all levels!\nHere is your flag: <span class="hljs-subst">&#123;flag&#125;</span>\n&quot;</span>.encode())<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        conn.sendall(<span class="hljs-string">b&quot;An error occurred. Bye.\n&quot;</span>)<br>    <span class="hljs-keyword">finally</span>:<br>        conn.close()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    host = <span class="hljs-string">&quot;0.0.0.0&quot;</span><br>    port = <span class="hljs-number">2227</span><br><br>    flag = os.getenv(<span class="hljs-string">&#x27;FLAG&#x27;</span>, <span class="hljs-string">&#x27;flag&#123;testflag&#125;&#x27;</span>)<br><br>    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>    s.bind((host, port))<br>    s.listen(<span class="hljs-number">5</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+] Listening on <span class="hljs-subst">&#123;host&#125;</span>:<span class="hljs-subst">&#123;port&#125;</span>&quot;</span>)<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        conn, addr = s.accept()<br>        threading.Thread(target=handle_client, args=(conn, addr, flag)).start()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>题目要求我们完成2个挑战，每个挑战会先让我们发送2个m，靶机会返回特定计算后的结果，然后让我们计算靶机给出的m的计算后的结果。<br>这里我们并不需要计算出准确的x和y，只需要得到一个等效的x,y，使得我们的计算结果和靶机上的基本都是一样的就好了。<br>我的想法是，对于一个二进制的数m，比如10101，靶机会计算$(m|x)+(m|y)$，对于第i位比特位,假如$m_i$是0，那么返回的结果中的第i位就会是$x_i+y_i$，而如果$m_i$是1,那么返回的结果中的第i位就会是$1+1$，就一定是0，同时往前进一位。<br>那么对于一个01交替的二进制数m来说，这里假设还是10101，对于它的计算结果r，如果$m_0$(最低位)是0，同时$r_0$是0，那么$x_0$和$y_0$就可能都是0，或者都是1，那么我们再看$r_{1}$，如果也是0，那么就证明在$r_0$的计算中没有进位，那么$x_0$和$y_0$就只可能都是0，反之则都是1。<br>如果$r_0$是1，那么就证明$x_0$和$y_0$中有一个1，而我们可以任意让其中一个是1即可，因为不管哪个是1，这不影响计算结果。<br>然后我们会注意到如果$m_i$为1的时候会向前进一位，但这也只是让我们上面的结果稍稍改变了一下，并不会使得$x_{i+1}$和$y_{i+1}$变的不确定。<br>在这种构造下，我们就可以得到x和y一半的比特位了(这里的x，y指等效的x，y)，然后我们对m按位取反即可得到另一半比特位。<br>这个过程可以交给z3来完成。<br>然后对于第二部分z3仍然可以求解，我做的时候没有仔细的去思考过，只是想试试z3还能不能做，然后准确率竟然比第一部分还高，很神奇。<br>z3可能出错的原因我不清楚，它是有可能解出连约束都过不了的解的，但概率还是比较小的，多交换几次即可。<br>exp(可能不稳定，但我懒得改了):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> websocket <span class="hljs-keyword">import</span> create_connection<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calculate_level1</span>(<span class="hljs-params">m, x, y</span>):<br>    <span class="hljs-keyword">return</span> (m | x) + (m | y)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calculate_level2</span>(<span class="hljs-params">m, x, y</span>):<br>    <span class="hljs-keyword">return</span> (m | x) + (m ^ y)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pred</span>(<span class="hljs-params">m1,res1,m2,res2,guess,cal</span>):<br>    x=BitVec(<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-number">30</span>)<br>    y=BitVec(<span class="hljs-string">&#x27;y&#x27;</span>,<span class="hljs-number">30</span>)<br>    solver=Solver()<br>    solver.add(res1==cal(m1,x,y))<br>    solver.add(res2==cal(m2,x,y))<br>    <span class="hljs-keyword">if</span> solver.check()==sat:<br>        root=solver.model()<br>        a=root[x].as_long()<br>        b=root[y].as_long()<br>        <span class="hljs-comment">#print(&#x27;===========&#x27;,res1==cal(m1,a,b),res2==cal(m2,a,b))</span><br>        <span class="hljs-keyword">return</span> cal(guess,a,b)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">cal</span>):<br>    x = random.getrandbits(<span class="hljs-number">30</span>)<br>    y = random.getrandbits(<span class="hljs-number">30</span>)<br>    guess = random.getrandbits(<span class="hljs-number">30</span>)<br><br>    m1 = <span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;01&#x27;</span> * <span class="hljs-number">15</span>, <span class="hljs-number">2</span>)<br>    m2 = m1 ^ ((<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">30</span>) - <span class="hljs-number">1</span>)<br>    res1=cal(m1, x, y)<br>    res2=cal(m2, x, y)<br><br>    predict=pred(m1,res1,m2,res2,guess,cal)<br>    real=cal(guess,x,y)<br>    <span class="hljs-built_in">print</span>(predict==real)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">for i in range(50):</span><br><span class="hljs-string">    test(calculate_level1)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>url = <span class="hljs-string">&quot;wss://ctf.xidian.edu.cn/api/traffic/D9UHsvaTW4RfhMxCyB5JX?port=2227&quot;</span><br>r = create_connection(url)<br><br>m1 = <span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;01&#x27;</span> * <span class="hljs-number">15</span>, <span class="hljs-number">2</span>)<br>m2 = m1 ^ ((<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">30</span>) - <span class="hljs-number">1</span>)<br><br>data=r.recv().decode()<br><span class="hljs-built_in">print</span>(data)<br><br>r.send(<span class="hljs-built_in">str</span>(m1).encode())<br><br>data=r.recv().decode()<br><span class="hljs-built_in">print</span>(data)<br><br>i=data.find(<span class="hljs-string">&#x27;: &#x27;</span>)<br>j=data.find(<span class="hljs-string">&#x27;\nE&#x27;</span>)<br>res1=<span class="hljs-built_in">int</span>(data[i+<span class="hljs-number">2</span>:j])<br><br>r.send(<span class="hljs-built_in">str</span>(m2).encode())<br><br>data=r.recv().decode()<br><span class="hljs-built_in">print</span>(data)<br><br>i=data.find(<span class="hljs-string">&#x27;: &#x27;</span>)<br>j=data.find(<span class="hljs-string">&#x27;\n\n&#x27;</span>)<br>res2=<span class="hljs-built_in">int</span>(data[i+<span class="hljs-number">2</span>:j])<br><br>i=data.find(<span class="hljs-string">&#x27; = &#x27;</span>)<br>j=data.find(<span class="hljs-string">&#x27;:\n&#x27;</span>)<br><br>guess=<span class="hljs-built_in">int</span>(data[i+<span class="hljs-number">3</span>:j])<br><br>predict=pred(m1,res1,m2,res2,guess,calculate_level1)<br><br>r.send(<span class="hljs-built_in">str</span>(predict).encode())<br><br>data=r.recv().decode()<br><span class="hljs-built_in">print</span>(data)<br><br><br><span class="hljs-comment">#cal2</span><br>r.send(<span class="hljs-built_in">str</span>(m1).encode())<br><br>data=r.recv().decode()<br><span class="hljs-built_in">print</span>(data)<br><br>i=data.find(<span class="hljs-string">&#x27;: &#x27;</span>)<br>j=data.find(<span class="hljs-string">&#x27;\nE&#x27;</span>)<br>res1=<span class="hljs-built_in">int</span>(data[i+<span class="hljs-number">2</span>:j])<br><br>r.send(<span class="hljs-built_in">str</span>(m2).encode())<br><br>data=r.recv().decode()<br><span class="hljs-built_in">print</span>(data)<br><br>i=data.find(<span class="hljs-string">&#x27;t: &#x27;</span>)<br>j=data.find(<span class="hljs-string">&#x27;\n\n&#x27;</span>)<br>res2=<span class="hljs-built_in">int</span>(data[i+<span class="hljs-number">3</span>:j])<br><br>i=data.find(<span class="hljs-string">&#x27; = &#x27;</span>)<br>j=data.find(<span class="hljs-string">&#x27;:\n&#x27;</span>)<br><br>guess=<span class="hljs-built_in">int</span>(data[i+<span class="hljs-number">3</span>:j])<br><br>predict=pred(m1,res1,m2,res2,guess,calculate_level2)<br><br>r.send(<span class="hljs-built_in">str</span>(predict).encode())<br><br>data=r.recv().decode()<br><span class="hljs-built_in">print</span>(data)<br></code></pre></td></tr></table></figure><p>flag:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs flag">miniLCTF&#123;646AI-51G1n-CRYpto_Z-l5-Y0u_flag-is_WiN561&#125;<br></code></pre></td></tr></table></figure><h2 id="ezhash？！"><a href="#ezhash？！" class="headerlink" title="ezhash？！"></a>ezhash？！</h2><p>这次你还能碰撞的出来吗？ （注：flag以miniL开头）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag,key<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">shash</span>(<span class="hljs-params">value,key</span>):<br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">type</span>(value) == <span class="hljs-built_in">str</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">type</span>(key) == <span class="hljs-built_in">int</span><br>    length = <span class="hljs-built_in">len</span>(value)<br><br>    <span class="hljs-keyword">if</span> length == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    mask = <span class="hljs-number">0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff</span><br>    x = (<span class="hljs-built_in">ord</span>(value[<span class="hljs-number">0</span>]) &lt;&lt; <span class="hljs-number">7</span>) &amp; mask<br>    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> value:<br>        x = (key * x) &amp; mask ^ <span class="hljs-built_in">ord</span>(c)<br><br>    x ^= length &amp; mask<br><br>    <span class="hljs-keyword">return</span> x<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_test</span>(<span class="hljs-params">key</span>):<br><br>    testvalue = []<br>    testhash = []<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):<br>        a = <span class="hljs-string">&#x27;&#x27;</span>.join(random.choices(string.ascii_letters + string.digits, k=<span class="hljs-number">32</span>)) <br>        testvalue.append(a)<br>        testhash.append(shash(a,key))<br><br>    <span class="hljs-keyword">return</span> testvalue,testhash<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(flag) == <span class="hljs-number">32</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">type</span>(flag) == <span class="hljs-built_in">str</span><br>    key = getRandomInteger(<span class="hljs-number">128</span>)<br>    testvalue,testhash = get_test(key)<br>    shash = shash(flag,key)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;output.txt&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(<span class="hljs-string">&#x27;testvalue = &#x27;</span> + <span class="hljs-built_in">str</span>(testvalue) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>        f.write(<span class="hljs-string">&#x27;testhash = &#x27;</span> + <span class="hljs-built_in">str</span>(testhash) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>        f.write(<span class="hljs-string">&#x27;shash = &#x27;</span> + <span class="hljs-built_in">str</span>(shash) + <span class="hljs-string">&#x27;\n&#x27;</span>)        <br></code></pre></td></tr></table></figure><p>题目给了64组测试数据，然后一个flag的哈希值。<br>那么我们通过测试数据来解出所用的key，然后解这个哈希即可。<br>题目中提到key是128位的，但我实际上仅通过一组数据解出来一个更小的key，同时这个key对于后面63组数据来说是符合的，也就是说我们可以解出一个等效的key来解题，而不需要去解128位的key。<br>这个还是用z3即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;output.txt&#x27;</span>,<span class="hljs-string">&#x27;r+&#x27;</span>)<br>fl=f.readlines()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> fl:<br>    i=i.strip()<br>    <span class="hljs-built_in">exec</span>(i)<br><br>thash=shash<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">shash</span>(<span class="hljs-params">value,key</span>):<br>    <span class="hljs-comment">#assert type(value) == str</span><br>    <span class="hljs-comment">#assert type(key) == int</span><br>    length = <span class="hljs-built_in">len</span>(value)<br><br>    <span class="hljs-keyword">if</span> length == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    mask = <span class="hljs-number">0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff</span><br>    x = (<span class="hljs-built_in">ord</span>(value[<span class="hljs-number">0</span>]) &lt;&lt; <span class="hljs-number">7</span>) &amp; mask<br>    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> value:<br>        x = (key * x) &amp; mask ^ <span class="hljs-built_in">ord</span>(c)<br><br>    x ^= length &amp; mask<br><br>    <span class="hljs-keyword">return</span> x<br><br>key=BitVec(<span class="hljs-string">&#x27;key&#x27;</span>,<span class="hljs-number">20</span>)<br>solver=Solver()<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>):<br>    solver.add(shash(testvalue[i],key)==testhash[i])<br><span class="hljs-keyword">if</span> solver.check()==sat:<br>    res=solver.model()<br>    <span class="hljs-built_in">print</span>(res[key].as_long())<br></code></pre></td></tr></table></figure><p>解出来key是1000001。<br>接下来可以参考这篇博客<br><a href="https://dexterjie.github.io/2024/05/18/%E8%B5%9B%E9%A2%98%E5%A4%8D%E7%8E%B0/2024CISCN/#%E7%94%A8%E6%A0%BC%E6%9D%A5%E5%81%9A">hash——复现</a><br>构造相同的格，稍微调一下参数就可以了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs sage">from Crypto.Util.number import *<br>th=463802484547898091835999726502006552543022358314700124374789687370275467670717610329<br>key=1000001<br><br>th=(th^^32)%2**280<br>#th=((th^^125)%2**280)*inverse(key,2**280)%2**280<br><br>len1=32<br>k1=2^50<br>k2=2^15<br>data=[]<br>data=[128*key^len1+key^(len1-1)]<br>data+=[key^i for i in range(len1-1)][::-1]<br>for i in range(len1):<br>    data[i]=data[i]%2**280<br>B=[[0]*(len1+2) for i in range(len1+2)]<br><br>for i in range(len1):<br>    B[i][i]=1<br>    B[i][-1]=data[i]<br>B[-2][-2]=k1<br>B[-2][-1]=-th<br>B[-1][-1]=2**280<br>B=Matrix(ZZ,B)<br>B[:,-1:] *= k2<br>B_=B.LLL()<br>#print(B_)<br>print(guass_Heuristic(B).bit_length(),int(iroot(2**256*len1+1,2)[0]).bit_length())<br>for j in B_:<br>    if j[-2]==k:<br>        print(j)<br>    if j[-2]==k and j[-1]==0:<br>        tmp=j[:-2]<br>        plain=b&#x27;&#x27;<br>        c=th<br>        for i in range(len(tmp)):<br>            tmpc = (c - tmp[-i-1]) % 2^280<br>            s = (tmpc ^^ c)<br>            plain+=long_to_bytes(s)<br>            c = (c ^^ s) * inverse(key,2^280) % 2^280<br>        print(plain[::-1])<br></code></pre></td></tr></table></figure><p>经过测试,k2在$2^{10}$ 到 $2^{15}$这个范围内更容易出。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs flag">miniL&#123;W@!!_Y()o_get_T()@_SEcr@t&#125;<br></code></pre></td></tr></table></figure><h2 id="Noisy"><a href="#Noisy" class="headerlink" title="Noisy"></a>Noisy</h2><p>Damn, there’s just too much noise! Can we still get the flag back?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> getrandbits, randint<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Noisy_cipher</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, params</span>):<br>        <span class="hljs-variable language_">self</span>.nbits = params[<span class="hljs-string">&quot;nbits&quot;</span>]<br>        <span class="hljs-variable language_">self</span>.pbits = params[<span class="hljs-string">&quot;nbits&quot;</span>]//<span class="hljs-number">2</span><br>        <span class="hljs-variable language_">self</span>.Mbits = params[<span class="hljs-string">&quot;Mbits&quot;</span>]<br>        <span class="hljs-variable language_">self</span>.k0bits = params[<span class="hljs-string">&quot;k0bits&quot;</span>]<br>        <span class="hljs-variable language_">self</span>.k1bits = params[<span class="hljs-string">&quot;k1bits&quot;</span>]<br>        <span class="hljs-variable language_">self</span>.samples = params[<span class="hljs-string">&quot;samples&quot;</span>]<br>        <span class="hljs-variable language_">self</span>.p = getPrime(<span class="hljs-variable language_">self</span>.pbits)<br>        <span class="hljs-variable language_">self</span>.q = getPrime(<span class="hljs-variable language_">self</span>.nbits)<br>        <span class="hljs-variable language_">self</span>.n = <span class="hljs-variable language_">self</span>.p * <span class="hljs-variable language_">self</span>.q<br>        <span class="hljs-variable language_">self</span>.s = randint(<span class="hljs-number">0</span>, <span class="hljs-variable language_">self</span>.n)<br>        <span class="hljs-variable language_">self</span>.M = getrandbits(<span class="hljs-variable language_">self</span>.Mbits)<br>        <span class="hljs-variable language_">self</span>.pubKey = [<span class="hljs-variable language_">self</span>.n]<br>        <span class="hljs-variable language_">self</span>.priKey = [<span class="hljs-variable language_">self</span>.s, <span class="hljs-variable language_">self</span>.p, <span class="hljs-variable language_">self</span>.M]<br>    <br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">self,msg</span>):<br>        res = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-variable language_">self</span>.samples):<br>            k0 = getrandbits(<span class="hljs-variable language_">self</span>.k0bits)<br>            k1 = getrandbits(<span class="hljs-variable language_">self</span>.k1bits)<br>            ci = <span class="hljs-variable language_">self</span>.s * (msg[i] + k0*<span class="hljs-variable language_">self</span>.M)*(<span class="hljs-number">1</span> + k1*<span class="hljs-variable language_">self</span>.p) % <span class="hljs-variable language_">self</span>.n<br>            res.append(ci)<br>        <br>        <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    params = &#123;<br>        <span class="hljs-string">&quot;nbits&quot;</span>:<span class="hljs-number">1024</span>,<br>        <span class="hljs-string">&quot;Mbits&quot;</span>:<span class="hljs-number">30</span>,<br>        <span class="hljs-string">&quot;k0bits&quot;</span>:<span class="hljs-number">30</span>,<br>        <span class="hljs-string">&quot;k1bits&quot;</span>:<span class="hljs-number">512</span>,<br>        <span class="hljs-string">&quot;samples&quot;</span>:<span class="hljs-number">20</span>,<br>    &#125;<br>    mbits = <span class="hljs-number">24</span><br>    Noise = Noisy_cipher(params)<br>    n = Noise.n<br>    msg = [getrandbits(mbits) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(params[<span class="hljs-string">&quot;samples&quot;</span>])]<br>    cipher = Noise.encrypt(msg)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;secret.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        flag = file.readlines()[<span class="hljs-number">0</span>].encode()<br>    file.close()<br>    key = md5(<span class="hljs-built_in">str</span>(msg).encode()).digest()<br>    aes = AES.new(key, AES.MODE_ECB)<br>    encrypted_flag = aes.encrypt(pad(flag, <span class="hljs-number">16</span>)).<span class="hljs-built_in">hex</span>()<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;output.txt&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        file.write(<span class="hljs-string">&#x27;n = &#x27;</span> + <span class="hljs-built_in">str</span>(n) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>        file.write(<span class="hljs-string">&#x27;c = &#x27;</span> + <span class="hljs-built_in">str</span>(cipher) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>        file.write(<span class="hljs-string">&#x27;encrypted_flag = &quot;&#x27;</span> + encrypted_flag + <span class="hljs-string">&#x27;&quot;\n&#x27;</span>)<br>    file.close()<br></code></pre></td></tr></table></figure><p>题目要求我们从$ci &#x3D; self.s * (msg[i] + k0 * self.M) * (1 + k1 * self.p) % self.n$中恢复$msg[i]$。</p><p>复现ing…</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2025.4.26ACTF</title>
    <link href="/2025/05/11/2025-4-26ACTF/"/>
    <url>/2025/05/11/2025-4-26ACTF/</url>
    
    <content type="html"><![CDATA[<h1 id="2025-4-26ACTF"><a href="#2025-4-26ACTF" class="headerlink" title="2025.4.26ACTF"></a>2025.4.26ACTF</h1><p>是 <strong>2025.4.26ACTF</strong> 哒！</p><p>难难难。跑了4个小时的脚本说无解…<br>总之就是我自己爆0了。</p><h2 id="easy-log"><a href="#easy-log" class="headerlink" title="easy_log"></a>easy_log</h2><p>E@sy L0g</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes, bytes_to_long, isPrime<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> urandom<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> namedtuple<br><span class="hljs-keyword">from</span> signal <span class="hljs-keyword">import</span> alarm<br><br>Point = namedtuple(<span class="hljs-string">&quot;Point&quot;</span>, <span class="hljs-string">&quot;x y&quot;</span>)<br>O = <span class="hljs-string">&quot;Origin&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">point_addition</span>(<span class="hljs-params">P, Q, n</span>):<br><span class="hljs-keyword">if</span> P == O:<br><span class="hljs-keyword">return</span> Q<br><span class="hljs-keyword">if</span> Q == O:<br><span class="hljs-keyword">return</span> P<br>x = (P.x * Q.y + P.y * Q.x - P.x * Q.x) % n<br>y = (P.x * Q.x + P.y * Q.y) % n<br><span class="hljs-keyword">return</span> Point(x, y)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">double_and_add</span>(<span class="hljs-params">k, P, n</span>):<br>Q = P<br>R = O<br><span class="hljs-keyword">while</span>(k &gt; <span class="hljs-number">0</span>):<br><span class="hljs-keyword">if</span> k &amp; <span class="hljs-number">1</span>:<br>R = point_addition(R, Q, n)<br>k &gt;&gt;= <span class="hljs-number">1</span><br>Q = point_addition(Q, Q, n)<br><span class="hljs-keyword">return</span> R<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.txt&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>flag = f.read()<br><br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(flag) == <span class="hljs-number">50</span><br>flag = urandom(randint(<span class="hljs-number">38</span>, <span class="hljs-number">48</span>)) + flag<br>flag = flag + urandom(<span class="hljs-number">118</span> - <span class="hljs-built_in">len</span>(flag))<br><br>flag1, flag2 = bytes_to_long(flag[:<span class="hljs-number">68</span>]), bytes_to_long(flag[<span class="hljs-number">68</span>:])<br><br>n = <span class="hljs-number">0x231d5fa471913e79facfd95e9b874e2d499def420e0914fab5c9f87e71c2418d1194066bd8376aa8f02ef35c1926f73a46477cd4a88beae89ba575bb3e1b04271426c6706356dd8cd9aa742d7ad0343f8939bfd2110d45122929d29dc022da26551e1ed7000</span><br>G1 = Point(<span class="hljs-number">0xf22b9343408c5857048a19150c8fb9fd44c25d7f6decabc10bf46a2250a128f0df15adc7b82c70c0acaf855c0e898b141c9c94ba8aef8b67ea298c6d9fd870ea70e1c4f8a1b595d15373dc6db25a4ecddf626a64f47beba5538b7f733e4aa0c4f1fd4c291d</span>, <span class="hljs-number">0x8d3264514b7fdbce97fbaedb33120c7889a1af59691a1947c2c7061347c091b0950ca36efaa704514004a988b9b87b24f5cebf2d1c7bef44ff172519e1a62eb62cde234c94bd0ab39375d7ddb42e044090c8db46d3f965ef7e4753bc41dac3b8b3ae0cdb57</span>)<br>G2 = Point(<span class="hljs-number">0x81919777837d3e5065c6f7f6801fe29544180be9db2137f075f53ebb3307f917183c6fc9cdfc5d75977f7</span>, <span class="hljs-number">0xd1a586d6848caa3a5436a86d903516d83808ce2fa49c5fb3f183ecb855e961c7e816a7ba8f588ef947f19</span>)<br><br>f1 = double_and_add(flag1, G1, n)<br><br><span class="hljs-built_in">print</span>(f1)<br><br>alarm(<span class="hljs-number">30</span>)<br><br><span class="hljs-keyword">if</span> flag1 != <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>()):<br>exit()<br><br>p = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><br><span class="hljs-keyword">assert</span> isPrime(p) <span class="hljs-keyword">and</span> p.bit_length() == <span class="hljs-number">400</span><br><br>f2 = double_and_add(flag2, G2, p)<br><br><span class="hljs-built_in">print</span>(f2)<br></code></pre></td></tr></table></figure><p>题目让我们求2个在自定义曲线上的DLP。<br>NaCl是把这个问题转化为了矩阵上的问题，我们构造如下矩阵：<br>$$M_G&#x3D;<br>\begin{bmatrix}<br>G.y-G.x,Q.x \<br>Q.x,   Q.y<br>\end{bmatrix} \mod n$$<br>所有点加就被转换为了矩阵的乘法，倍乘就是矩阵的次方。<br>这个问题就转化为了矩阵的DLP了。<br>之后看他做的比较痛苦，我也不是很懂，但这个思路感觉还是不错的，记录一下。<br>然后就是照着小鸡块的博客的复现了。<br><a href="https://tangcuxiaojikuai.xyz/post/d21bb624.html#easy_log">easy_log</a><br>2个思路：</p><ol><li>手写一个pohlig hellman+bsgs的ECDLP求解</li><li>可以通过曲线上的点来求出这条曲线（点可以通过点加和倍乘来得到，然后解个方程得到系数就好了，但再往后我就看不懂了…）</li></ol><p>第一个思路：<br>先讲一下bsgs（baby-step giant-step）吧，这次遇到了，正好浅浅的学一下<br>对于一个离散对数问题（DLP）:<br>$a^x \equiv b\ (mod p)$<br>我们可以令$x&#x3D;A\lceil \sqrt{p} \rceil + B$<br>那么等式就可以化为:<br>$a^{A\lceil \sqrt{p} \rceil}\equiv b^{-B}\ (mod p)$<br>那么我们只需要枚举A的值，从0到$\sqrt{p}$然后存入哈希表，再枚举B的值，从0到$\sqrt{p}$，每次枚举的时候查找表中是否有值和$b^{-B}$相同的值，有则取出对应的A，把$A\lceil \sqrt{p} \rceil + B$返回即可，可以在$O(\sqrt{p})$的时间复杂度下完成。<br>下面是这题中小鸡块写的bsgs:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">bsgs</span>(<span class="hljs-params">G, kG, p, order</span>):<br>    t = <span class="hljs-built_in">int</span>(sqrt(order))+<span class="hljs-number">2</span><br>    dic = &#123;&#125;<br><br>    tG = double_and_add(t, G, p)<br>    atG = Point(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(t):<br>        dic[atG] = a<br>        atG = point_addition(atG, tG, p)<br>    <br>    bG = kG<br>    _G = double_and_add((-<span class="hljs-number">1</span>) % order, G, p)<br>    <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(t):<br>        <span class="hljs-keyword">if</span>(bG <span class="hljs-keyword">in</span> dic.keys()):<br>            <span class="hljs-keyword">return</span> t*dic[bG] + b<br>        bG = point_addition(bG, _G, p)<br></code></pre></td></tr></table></figure><p>其中参数里的order是G的阶，而不是所在的群的阶。<br>然后再是pohlig hellman<br>值得一提的是，这里我们在应用pohlig hellman的时候，是需要分解一下这个群的order的。<br>即对于一个在$p * q$上的群，其中p,q都是质数，我们需要分解$(p-1) * (q-1)$，然后把整个群投影到阶更小的群中去（阶会比p-1,q-1更小），再用bsgs求解然后crt。在投影到阶更小的群后，bsgs里传入这个群的阶就可以了。</p><p>在其它情况下，如果我们的运算是在sagemath上有定义的，比如加减乘除，椭圆曲线的点加和点乘，我们可以直接使用sagemath内置的discrete_log函数来求解离散对数，这时我们就不需要分解order了，直接在discrete_log里传入ord&#x3D;order即可，discrete_log函数会自动选择pohlig hellman来分解order求解（AI说的，但确实是不需要分解order，但在阶太大的情况下还是要考虑pohlig hellman+discrete_log，即先初步分解一下order，比如在前面那种情况下可以分解成p-1和q-1来传入）</p><p>回到题目中，至于投影的操作，比如整个群的阶是order，而你需要把这个群投影到阶为ord1的群上，那么对于点G，计算double_and_add(order&#x2F;&#x2F;ord1,G,n)，这个点就是投影后的点了，kG也是一样的。<br>但是这题pohlig hellman还是不够，还是太慢了，所以我们需要再套一层，也就是小鸡块wp中的dlp函数:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sage">def dlp(G, kG):<br>    ps = []<br>    ord_p = []<br>    for p, exp in primes[2:3]:<br>        ps.append(p-1)<br>        ord_p.append(pohlig_hellman(G, kG, p, p-1))<br>    for p, exp in primes[3:4]:<br>        ps.append(p^2-1)<br>        ord_p.append(pohlig_hellman(G, kG, p, p^2-1))<br>    for p, exp in primes[4:5]:<br>        ps.append(p^2-1)<br>        ord_p.append(pohlig_hellman(G, kG, p, p^2-1))<br>        ps.append(p)<br>        ord_p.append(lift_to_pk(p, G, kG))<br>    for p, exp in primes[6:]:<br>        ps.append(p-1)<br>        ord_p.append(pohlig_hellman(G, kG, p, p-1))<br>    return crt(ord_p, ps), ps<br></code></pre></td></tr></table></figure><p>这里我去问了小鸡块，勉强搞懂了部分代码。<br>题目中的点加和点乘可以看作是二阶矩阵的运算，前面也有提到，所以我们可以把这个求自定义曲线的DLP转化成求二阶矩阵的DLP。<br>在模p上的矩阵，它的阶是$p*(p-1)*(p^2-1)$，也就是说我们可以把这个二阶矩阵投影到阶更小的子群上去求解，比如说阶为$p-1$，$p^2-1$的子群，而点的运算和这个二阶矩阵矩阵的运算是一样的，所以直接用点的运算即可，前面讲的也就不需要更改了。<br>个人感觉这个思路和pohlig hellman是很像的，整个思路就变成了：对一个阶很大的二阶矩阵矩阵构成的群，先把它投影到阶较小的子群上求解，在这个求解过程中再投影一次，投影到阶更小的子群上。<br>在实际的过程中，只需要最后一次投影即可，子群的子群还是子群，所以只需要在最后投影就好了，第一次就做了投影的话可能就是多此一举了，甚至可能会出现错误了。<br>而dlp函数中有的时候用的是$p-1$，有的时候是$p^2-1$，是这些子群有的阶是$p-1$，有的是$p^2-1$，实际测一下即可。<br>还有一点，我们可以注意到n的分解中有一个$p^3$，小鸡块在处理这个因子的时候特意加入了另一组解，这种是把$p^3$拆成了$p$和$p^2$，其中p用正常的pohlig hellman来解，$p^2$的求解用的是p-adic，但这个我还不是很懂，只知道这个也能用来求解离散对数，并且我遇到的都是用来求解$p^x$的，这题中x&#x3D;2正好可以用。但实际原理我是不太懂的。<br>小鸡块的dlp这块的exp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs sage">def lift_to_pk(p, G, kG):<br>    order_p = p^2 - 1<br><br>    QPP = Qp(p)<br>    P_Qp = Point(QPP(G[0] % p^2), QPP(G[1] % p^2))<br>    Q_Qp = Point(QPP(kG[0] % p^2), QPP(kG[1] % p^2))<br><br>    nP_Qp = double_and_add_Qp(order_p, P_Qp)<br>    nQ_Qp = double_and_add_Qp(order_p, Q_Qp)<br><br>    secret_p =  ZZ((-nQ_Qp[0]/nQ_Qp[1]) / (-nP_Qp[0]/nP_Qp[1]))<br>    return secret_p % p<br><br>def bsgs(G, kG, p, order):<br>    t = int(sqrt(order))+2<br>    dic = &#123;&#125;<br><br>    tG = double_and_add(t, G, p)<br>    atG = Point(0, 1)<br>    for a in range(t):<br>        dic[atG] = a<br>        atG = point_addition(atG, tG, p)<br>    <br>    bG = kG<br>    _G = double_and_add((-1) % order, G, p)<br>    for b in range(t):<br>        if(bG in dic.keys()):<br>            return t*dic[bG] + b<br>        bG = point_addition(bG, _G, p)<br>        <br>def pohlig_hellman(G, kG, p, order):<br>    facs = list(factor(order))<br>    qs = []<br>    ord_q = []<br>    for q, exp in facs:<br>        qs.append(q^exp)<br>        ord_q.append(bsgs(double_and_add(order//(q^exp), G, p), double_and_add(order//(q^exp), kG, p), p, q^exp))<br>    return crt(ord_q, qs)<br><br>def dlp(G, kG):<br>    ps = []<br>    ord_p = []<br>    for p, exp in primes[2:3]:<br>        ps.append(p-1)<br>        ord_p.append(pohlig_hellman(G, kG, p, p-1))<br>    for p, exp in primes[3:4]:<br>        ps.append(p^2-1)<br>        ord_p.append(pohlig_hellman(G, kG, p, p^2-1))<br>    for p, exp in primes[4:5]:<br>        ps.append(p^2-1)<br>        ord_p.append(pohlig_hellman(G, kG, p, p^2-1))<br>        ps.append(p)<br>        ord_p.append(lift_to_pk(p, G, kG))<br>    for p, exp in primes[6:]:<br>        ps.append(p-1)<br>        ord_p.append(pohlig_hellman(G, kG, p, p-1))<br>    return crt(ord_p, ps), ps<br></code></pre></td></tr></table></figure><p>或者可以这么理解第一个思路:<br>这实际上就是一种矩阵的dlp，我之前见过的矩阵的dlp的用矩阵的行列式来代替矩阵，这样就是把矩阵的dlp转化成了普通的dlp。<br>但第一个思路里，我们就是直接通过手写一个bsgs去求矩阵的dlp。<br>在模质数p上的矩阵的阶是$p*(p-1)*(p^2-1)$，所以可以分别用pohlig hellman求一下子群的dlp。</p><p>第二个思路就不讲了，我也还没去试过。</p><h2 id="AAALLL"><a href="#AAALLL" class="headerlink" title="AAALLL"></a>AAALLL</h2><p>Let’s welcome AAA’s LLL master!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> choice, sample<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sample_ternery_poly</span>(<span class="hljs-params">Q</span>):<br>    <span class="hljs-keyword">return</span> Q([choice([-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(Q.degree())])<br><br>n = <span class="hljs-number">450</span><br>p = <span class="hljs-number">3774877201</span><br>t = n//<span class="hljs-number">2</span><br><br>P.&lt;x&gt; = PolynomialRing(GF(p))<br>g = x^n+<span class="hljs-number">1</span><br>roots = [i[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> g.roots()]<br><br>subset = sample(roots, t)<br><br>Q.&lt;x&gt; = P.quotient(x^n+<span class="hljs-number">1</span>)<br>f = sample_ternery_poly(Q)<br>f_lift = f.lift()<br>values = [f_lift(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> subset]<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;subset: <span class="hljs-subst">&#123;subset&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;values: <span class="hljs-subst">&#123;values&#125;</span>&quot;</span>)<br><br>key = md5(<span class="hljs-built_in">str</span>(f.<span class="hljs-built_in">list</span>()).encode()).digest()<br>aes = AES.new(key = key, mode = AES.MODE_ECB)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;ct: <span class="hljs-subst">&#123;aes.encrypt(pad(flag, <span class="hljs-number">16</span>))&#125;</span>&quot;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">subset: [1040018022, 3719840057, 2086762603, 3065369513, 3179320758, 891114580, 966265556, 664146925, 1232096603, 1449704729, 2810118429, 2891821810, 698162894, 3070228878, 3114653287, 2793650430, 2941920517, 1811454265, 325024118, 1860481904, 555392385, 2818572232, 3719972491, 981226771, 1777524396, 2717373523, 3694549306, 91210020, 1397236365, 2806262125, 1966653548, 1369610707, 3545263790, 595556443, 1601356313, 2865921937, 2795518764, 1690002428, 3501122295, 2078440315, 1222414863, 1997352805, 271758023, 3348936352, 1800648013, 410072905, 3378691273, 185134810, 1281817316, 821730517, 2855781188, 3353349707, 273754906, 1187616168, 569728457, 401428606, 3671298095, 149603298, 2300569286, 1057503678, 1915386614, 2716934671, 2005635066, 389589525, 2691165686, 586877133, 2874838, 660954102, 3258633701, 1083711515, 1785913794, 3410290851, 1914395297, 2544074509, 3076714307, 2169463229, 2654223166, 3648299978, 3188000068, 1130206965, 875184747, 2549126013, 3602874619, 80327895, 983400559, 2423201604, 3384400899, 654136379, 1835112234, 3302809337, 3388376496, 364586350, 3219484816, 52162306, 3488542302, 2843511894, 638341256, 427235375, 757491483, 3364804296, 172002582, 3112473265, 2746078509, 2118542465, 421527494, 3017385718, 3683667181, 3536621837, 3113923099, 1989065494, 1769242135, 1541932517, 1963422936, 2341204092, 3306256995, 186750428, 1381468653, 1288011784, 229613411, 839241230, 425544589, 2345390466, 2552462338, 286334899, 2984993503, 3741109364, 103579106, 138703348, 2369990075, 2377640836, 1279106009, 2542780598, 1653097443, 3373448595, 2405266494, 3385287676, 289622793, 2376573706, 3096235437, 1971476669, 3449853083, 3565565810, 762810383, 272826480, 516243500, 1710511548, 3233762177, 2013126070, 224313638, 1884110819, 3141861971, 2014729696, 1572103482, 2232944684, 2644670236, 1350302342, 3589742391, 2106163918, 1077036824, 3527373372, 2474464298, 971863088, 1219963894, 3349332612, 1474307915, 905651245, 2666266327, 2192845472, 2748042118, 1489782942, 1300412903, 126577223, 545427793, 360417066, 704648323, 3562938536, 908955264, 1108610874, 247503829, 2379959160, 1059927520, 2869225956, 2202773719, 1498564318, 2032958616, 3485254408, 1091224495, 3287849020, 780873181, 3410363615, 1398303495, 2426564739, 487028181, 1230802692, 139226346, 789883698, 2557862280, 2994004020, 3205148744, 2914199937, 1803400532, 2738281702, 883055391, 1761751131, 1220550272, 1947825121, 3543565567, 1939764967, 2986882625, 798323428, 1120654035, 3722714895, 3679983602, 364513586, 1760147505, 472067864, 2393408548, 2239781327, 799334306, 3497260623, 2769084221, 860677264, 990410164, 3772002363, 2883762621]</span><br><span class="hljs-string">values: [712538976, 1225537965, 2633482204, 1245652635, 2529155164, 1672980719, 3024410928, 1535384351, 2252244320, 672919726, 2976916118, 3089453551, 2512277279, 2431400831, 1129198075, 3441247454, 610984549, 2043949242, 3306515233, 2759625250, 2459507335, 2885552592, 3226187015, 983312810, 1815610133, 871259259, 3651562935, 570267317, 2548725905, 70380481, 685470168, 1925389996, 2466124957, 1512923993, 2603725653, 409457162, 859041441, 3193931087, 786021320, 2481319115, 2379423262, 1972220678, 251474531, 448830331, 3189297419, 845468707, 3014186402, 1476144624, 1412175603, 464556671, 1251535251, 2252149066, 3501165225, 1173484383, 1168113959, 2547845342, 3132683037, 182880838, 3236782773, 637440805, 1077834200, 910992912, 1281164705, 763525563, 1025793488, 3031918542, 2457090411, 159146268, 3252417067, 1695150089, 1863899429, 2660689081, 647461624, 3736679821, 2034134877, 973654854, 1545264273, 692989149, 769387639, 2024000598, 2916906076, 1996631367, 2889527392, 527082343, 3319918691, 3629378248, 685639382, 2659312228, 472574946, 1237496521, 434512296, 3649895972, 3500730074, 1092276151, 1513927060, 1179642291, 474879861, 1132457849, 3072787035, 1536862618, 3131879287, 1635514910, 2467715064, 2377496874, 2888951190, 3697148067, 1885811970, 1037114846, 2862197847, 2248493059, 829223452, 17390497, 1063920331, 2504310664, 2269937803, 667770896, 1855657371, 323906741, 2972650844, 3620395133, 2613325861, 2508686438, 2143229100, 977352912, 3380653143, 2367018411, 1665354812, 2473914413, 3531805346, 2023595772, 1909192693, 844059686, 2233570033, 1997039839, 3558799006, 2872633369, 1949018254, 3159312415, 3021409934, 2505867881, 2357897866, 3436059930, 1496867815, 594001374, 3433203342, 2396280741, 2696363547, 1775021594, 434891096, 862244228, 1372573410, 3003385341, 3051290794, 493688483, 2143128679, 394087901, 3668481745, 1085467544, 2438896216, 1782052147, 2415529482, 149721114, 1539904401, 1902915995, 1929333694, 1759980967, 2106193398, 3670877657, 2736025727, 3133082490, 182590224, 1099952929, 3522052498, 2206338880, 1925988633, 3440533747, 25471854, 325651518, 72348028, 3178620735, 3335468600, 818634602, 2932340363, 1163855672, 2453716531, 373827915, 2373018915, 2231504345, 2975884007, 3636085022, 2354093635, 2696203979, 799834661, 2412088324, 1446875965, 3299868618, 302142905, 1957341475, 1522953201, 1257060525, 3769499753, 1591149900, 295691418, 3249943297, 1280379656, 1164820140, 115871117, 219831260, 2505969457, 2618672354, 2781617927, 2886486193, 1648555579, 1265576372, 1720183485, 2424145699, 2772052592, 2399827477, 626825210, 2422432913, 322266950, 2157976175, 2208875362, 2216568965, 3223085486]</span><br><span class="hljs-string">ct: b&#x27;&quot;\xf2Y\xf0\x15\xc5x\x94\xb9E\xbd\xd3\xa7\xb1\xad\x00\xa2D*+\x87BQ_20\x87\xa2\nP\xfc\xce\x0eW\xaf\xd8-.\xb5\xfai\xf1\xf6*\xben^\xd5&#x27;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>题目我不是很能看懂，大致意思就是构造了一个多项式，最高次是$x^{449}$，多项式的系数是从$-1,0,1$中随机抽取的，然后用一个值带入这个多项式并给出结果，总共生成了$n&#x2F;2$组数据，subset是带入的值的列表，values的结果的列表。然后要求我们解出这个$-1,0,1$序列。<br>一开始就感觉这个和背包问题很像，然后事实证明在数据量比较小的情况下，比如n&#x3D;100,背包确实能解。但这题数据量明显特别大，即使用了flatter加速也要好几个小时才能跑完，并且随着数据量的增大，背包也很难求出我们所需要的解。<br>后来问了下小鸡块，他是把背包构造的矩阵进行了拆解，然后使得数据量减小了，也就更容易解出来了。<br>在背包问题中我们有系数向量s，$s * A&#x3D;b$，其中A是由求s用的$450 * 450$的单位矩阵和255个规约组成的，这样的格明显会特别大，所以小鸡块对s和A进行了拆分，可以让A的构造变小很多，也就是降维。<br>我们把s按左右拆成$s_1$和$s_2$，A则对应的按上下拆成$A_1$和$A_2$，我们仍然有$s_1 \cdot A_1 + s_2 \cdot A_2 &#x3D; \mathbf{b}$，然后移项化简得出:<br>$s_1 * A_1 * A_2^{-1}+s_2&#x3D;b * A_2^{-1}$<br>所以我们可以构造格<br>$$<br>\begin{pmatrix}<br>1 &amp; 0 &amp; -A_1A_2^{-1} \<br>0 &amp; 1 &amp; \mathbf{b}A_2^{-1} \<br>0 &amp; 0 &amp; p<br>\end{pmatrix}<br>\to<br>(s_1, 1, \mathbf{k})<br>\begin{pmatrix}<br>1 &amp; 0 &amp; -A_1A_2^{-1} \<br>0 &amp; 1 &amp; \mathbf{b}A_2^{-1} \<br>0 &amp; 0 &amp; p<br>\end{pmatrix}<br>&#x3D; (s_1, 1, s_2)<br>$$<br>这样我们构造的格就会小很多了，求解也就更容易了。<br>感觉这样的构造会很有用，以后格过大的时候可以参考一下来降维。<br>构造完就是直接flatter加速，然后拿出$s_1$和$s_2$组成s就是我们要求的了。<br><a href="https://tangcuxiaojikuai.xyz/post/d21bb624.html#exp-2">小鸡块的exp</a></p><p>顺带提一下arch上安装flatter(目前还是电脑小白，只会这个喵)<br>直接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">paru -S flatter-git<br></code></pre></td></tr></table></figure><p>就可以了<br>然后要用就</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sage">from subprocess import check_output<br>def flatter(M):<br>    z = &quot;[[&quot; + &quot;]\n[&quot;.join(&quot; &quot;.join(map(str, row)) for row in M) + &quot;]]&quot;<br>    ret = check_output([&quot;flatter&quot;], input=z.encode())<br>    return matrix(M.nrows(), M.ncols(), map(int, findall(b&quot;-?\\d+&quot;, ret)))<br></code></pre></td></tr></table></figure><p>以及我发现传入flatter的矩阵如果是在QQ上的就会报错，ZZ上的就不会，很神奇。</p><h2 id="OhMyTetration"><a href="#OhMyTetration" class="headerlink" title="OhMyTetration"></a>OhMyTetration</h2><p>Welcome to my Lottery Center!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> bytes_to_long<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> LotteryCenter, FLAG<br><span class="hljs-keyword">import</span> signal<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">handler1</span>(<span class="hljs-params">signum, frame</span>):<br>    <span class="hljs-keyword">raise</span> TimeoutError(<span class="hljs-string">&quot;You took too long to make a decision. The boss is not patient.&quot;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">handler2</span>(<span class="hljs-params">signum, frame</span>):<br>    e = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Before I can react, a heavy hand clamps onto my shoulder. The boss&#x27;s face is dark with rage. &quot;What the hell did you do?!&quot;</span><br><span class="hljs-string">I stammer, &quot;I just thought the numbers could be luckier...&quot;</span><br><span class="hljs-string">&quot;OUT!&quot; he roars, dragging me toward the door. &quot;And don&#x27;t come back unless you&#x27;ve got the money to replace this thing!&quot;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">raise</span> TimeoutError(e)<br><br>x = bytes_to_long(FLAG)<br><span class="hljs-keyword">assert</span> x.bit_length() &lt;= <span class="hljs-number">512</span><br><br>descrption = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">You step into the Lottery Center, the bell above the door rings softly as you enter. The air is stale, with an old fan humming above. The walls are lined with lottery posters and flashing numbers. At the counter, a middle-aged man in a dark suit is busy sorting through some papers, unaware of your presence.</span><br><span class="hljs-string"></span><br><span class="hljs-string">The atmosphere is quiet and slightly unsettling. You glance around the room — a corner has an old lottery machine, still occasionally making a &quot;clicking&quot; noise. There&#x27;s a poster on the wall showing today&#x27;s lucky numbers, but they seem somewhat blurry.</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-built_in">print</span>(descrption)<br><br>lotteryCenter = LotteryCenter()<br><br>menu = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">You&#x27;re left with a few choices:</span><br><span class="hljs-string">1. Talk to the Boss.</span><br><span class="hljs-string">2. Pick Your Lucky Number.</span><br><span class="hljs-string">3. Choose Your Bet Size.</span><br><span class="hljs-string">4. Look Around.</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>signal.signal(signal.SIGALRM, handler1)<br>signal.alarm(<span class="hljs-number">600</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    <span class="hljs-built_in">print</span>(menu)<br>    choice = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;What do you do? &quot;</span>)<br>    <span class="hljs-keyword">if</span> choice == <span class="hljs-string">&quot;1&quot;</span>:<br>        <span class="hljs-comment"># Choose my favourite number.</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;You approach the counter. The boss looks up briefly, then says in a low voice, \&quot;Today&#x27;s lucky number is <span class="hljs-subst">&#123;lotteryCenter.P&#125;</span>. Trust it, it will bring good luck.\&quot;&quot;</span>)<br>    <span class="hljs-keyword">elif</span> choice == <span class="hljs-string">&quot;2&quot;</span>:<br>        g = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;You decide to pick your own lucky number: &quot;</span>))<br>        <span class="hljs-keyword">if</span> lotteryCenter.defineG(g):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;You successfully pick your lucky number.&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;You can&#x27;t pick that number.&quot;</span>)<br>    <span class="hljs-keyword">elif</span> choice == <span class="hljs-string">&quot;3&quot;</span>:<br>        <span class="hljs-keyword">if</span> lotteryCenter.g==<span class="hljs-literal">None</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;You should pick your lucky number first.&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            times = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;You decide to pick your bet size: &quot;</span>))<br>            <span class="hljs-keyword">assert</span> times&gt;<span class="hljs-number">0</span><br>            ticket = lotteryCenter.tetration(times, x)<br>            <span class="hljs-comment"># Calculate the tetration g^g^...^g(times)^x.</span><br>            <span class="hljs-comment"># For example, P=23, g=3, tetration(3, 2) = 3^(3^(3^2)) % 23 = 12.</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;You take the ticket with the number <span class="hljs-subst">&#123;ticket&#125;</span> from the machine, feeling a slight chill in the air. The boss looks at you for a moment longer, his expression unreadable. Then, with a slow smile, he finally speaks, his voice low but clear:&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\&quot;Good luck... I hope today is your lucky day.\&quot;&quot;</span>)<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">elif</span> choice == <span class="hljs-string">&quot;4&quot;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The boss seems distracted — perhaps counting cash or sorting through stacks of old receipts, his back turned just enough. Seizing the moment, I slip around to the back of the lottery machine, my fingers hovering over the controls. A quiet smirk tugs at my lips as I mutter under my breath ...&quot;</span>)<br>        lotteryCenter.P = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;I don&#x27;t think the boss&#x27;s lucky number is lucky enough: &quot;</span>))<br>        <span class="hljs-keyword">assert</span> lotteryCenter.P&gt;<span class="hljs-number">1</span><br>        x = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;\&quot;Yes!\&quot; I whisper, overriding the preset algorithm with my own: &quot;</span>))<br>        g = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;You decide to pick your own lucky number: &quot;</span>))<br>        times = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;You decide to pick your bet size: &quot;</span>))<br>        <span class="hljs-keyword">assert</span> times&gt;<span class="hljs-number">0</span><br>        signal.signal(signal.SIGALRM, handler2)<br>        signal.alarm(<span class="hljs-number">10</span>)<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> lotteryCenter.defineG(g):<br>                ticket = lotteryCenter.tetration(times, x)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;You take the ticket with the number <span class="hljs-subst">&#123;ticket&#125;</span> from the machine secretly.&quot;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Oops! The lottery machine whirs weakly as I finish tampering with its settings — then suddenly, the screen flickers violently before dying with a pathetic click. A thin wisp of smoke curls from the vents.&quot;</span>)<br>        <span class="hljs-keyword">except</span> TimeoutError <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(e)<br>        <span class="hljs-keyword">finally</span>:<br>            signal.alarm(<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Nothing here.&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nYou exit the Lottery Center, the door closing softly behind you. The bell rings once more, leaving you standing outside, holding the ticket — unsure if you&#x27;ve just stepped into a stroke of luck... or something else entirely.&quot;</span>)<br></code></pre></td></tr></table></figure><p>你可以指定t和g，靶机会计算<br>$$<br>f(t, g) &#x3D; g^{g^{g^{\dots(\text{共} t \text{个} g)^{x}}}} \mod p<br>$$<br>并返回<br>实际测一下可以发现有些p，p-1是很光滑的，所以我们可以使用pohlig hellman，同样也是手写一个bsgs。<br>只不过这次我们要解的方程是$g^{g^x} \equiv f\ (mod p)$，</p><p>To Be Continue…</p>]]></content>
    
    
    <categories>
      
      <category>crypto</category>
      
      <category>ACTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
      <tag>矩阵DLP</tag>
      
      <tag>bsgs</tag>
      
      <tag>pohlig hellman</tag>
      
      <tag>flatter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023.10.30ACTF</title>
    <link href="/2025/04/21/2023-10-30ACTF/"/>
    <url>/2025/04/21/2023-10-30ACTF/</url>
    
    <content type="html"><![CDATA[<h1 id="2023-10-30ACTF"><a href="#2023-10-30ACTF" class="headerlink" title="2023.10.30ACTF"></a>2023.10.30ACTF</h1><p>是 <strong>2023.10.30ACTF</strong> 哒！</p><p>马上要打ACTF了，来看看之前的ACTF，题目和exp都来自<a href="https://tangcuxiaojikuai.xyz/post/818adfc0.html">糖醋小鸡块</a></p><h2 id="EasyRSA"><a href="#EasyRSA" class="headerlink" title="EasyRSA"></a>EasyRSA</h2><p>EasyRSA</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">genKey</span>(<span class="hljs-params">nbits, dbits</span>):<br>    bbits = (nbits // <span class="hljs-number">2</span> - dbits) // <span class="hljs-number">2</span><br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        a = getRandomNBitInteger(dbits)<br>        b = getRandomNBitInteger(bbits)<br>        c = getRandomNBitInteger(bbits)<br>        p1 = a * b * c + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> isPrime(p1):<br>            <span class="hljs-comment"># print(&quot;p1 =&quot;, p1)</span><br>            <span class="hljs-keyword">break</span><br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        d = getRandomNBitInteger(dbits)<br>        p2 = b * c * d + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> isPrime(p2):<br>            <span class="hljs-comment"># print(&quot;p2 =&quot;, p2)</span><br>            <span class="hljs-keyword">break</span><br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        e = getRandomNBitInteger(bbits)<br>        f = getRandomNBitInteger(bbits)<br>        q1 = e * d * f + <span class="hljs-number">1</span><br>        p3 = a * e * f + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> isPrime(q1) <span class="hljs-keyword">and</span> isPrime(p3):<br>            <span class="hljs-comment"># print(&quot;p3 =&quot;, p3)</span><br>            <span class="hljs-comment"># print(&quot;q1 =&quot;, q1)</span><br>            <span class="hljs-keyword">break</span><br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        d_ = getRandomNBitInteger(dbits)<br>        <span class="hljs-keyword">if</span> GCD(a * b * c * d * e * f, d_) != <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">continue</span><br>        e_ = inverse(d_, a * b * c * d * e * f)<br>        k1 = (e_ * d_ - <span class="hljs-number">1</span>) // (a * b * c * d * e * f)<br>        <span class="hljs-keyword">assert</span> e_ * d_ == (a * b * c * d * e * f) * k1 + <span class="hljs-number">1</span><br>        q2 = k1 * e * f + <span class="hljs-number">1</span><br>        q3 = k1 * b * c + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> isPrime(q2) <span class="hljs-keyword">and</span> isPrime(q3):<br>            <span class="hljs-comment"># print(&quot;q2 =&quot;, q2)</span><br>            <span class="hljs-comment"># print(&quot;q3 =&quot;, q3)</span><br>            <span class="hljs-comment"># print(&quot;e =&quot;, e_)</span><br>            <span class="hljs-comment"># print(&quot;d =&quot;, d_)</span><br>            <span class="hljs-keyword">break</span><br><br>    n1 = p1 * q1<br>    n2 = p2 * q2<br>    n3 = p3 * q3<br>    <br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">pow</span>(<span class="hljs-built_in">pow</span>(<span class="hljs-number">0xdeadbeef</span>, e_, n1), d_, n1) == <span class="hljs-number">0xdeadbeef</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">pow</span>(<span class="hljs-built_in">pow</span>(<span class="hljs-number">0xdeadbeef</span>, e_, n2), d_, n2) == <span class="hljs-number">0xdeadbeef</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">pow</span>(<span class="hljs-built_in">pow</span>(<span class="hljs-number">0xdeadbeef</span>, e_, n3), d_, n3) == <span class="hljs-number">0xdeadbeef</span><br><br>    <span class="hljs-keyword">return</span>(e_, n1, n2, n3)<br><br><br>nbits = <span class="hljs-number">0x600</span><br>dbits = <span class="hljs-number">0x210</span><br><br>m = bytes_to_long(flag)<br>e, n1, n2, n3 = genKey(nbits, dbits)<br>c = <span class="hljs-built_in">pow</span>(m, e, n1)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c =&quot;</span>, c)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e =&quot;</span>, e)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n1 =&quot;</span>, n1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n2 =&quot;</span>, n2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n3 =&quot;</span>, n3)<br><br><span class="hljs-comment"># c = 63442255298812942222810837512019302954917822996915527697525497640413662503768308023517128481053593562877494934841788054865410798751447333551319775025362132176942795107214528962480350398519459474033659025815248579631003928932688495682277210240277909527931445899728273182691941548330126199931886748296031014210795428593631253184315074234352536885430181103986084755140024577780815130067722355861473639612699372152970688687877075365330095265612016350599320999156644</span><br><span class="hljs-comment"># e = 272785315258275494478303901715994595013215169713087273945370833673873860340153367010424559026764907254821416435761617347240970711252213646287464416524071944646705551816941437389777294159359383356817408302841561284559712640940354294840597133394851851877857751302209309529938795265777557840238332937938235024502686737802184255165075195042860413556866222562167425361146312096189555572705076252573222261842045286782816083933952875990572937346408235562417656218440227</span><br><span class="hljs-comment"># n1 = 473173031410877037287927970398347001343136400938581274026578368211539730987889738033351265663756061524526288423355193643110804217683860550767181983527932872361546531994961481442866335447011683462904976896894011884907968495626837219900141842587071512040734664898328709989285205714628355052565784162841441867556282849760230635164284802614010844226671736675222842060257156860013384955769045790763119616939897544697150710631300004180868397245728064351907334273953201</span><br><span class="hljs-comment"># n2 = 327163771871802208683424470007561712270872666244394076667663345333853591836596054597471607916850284565474732679392694515656845653581599800514388800663813830528483334021178531162556250468743461443904645773493383915711571062775922446922917130005772040139744330987272549252540089872170217864935146429898458644025927741607569303966038195226388964722300472005107075179204987774627759625183739199425329481632596633992804636690274844290983438078815836605603147141262181</span><br><span class="hljs-comment"># n3 = 442893163857502334109676162774199722362644200933618691728267162172376730137502879609506615568680508257973678725536472848428042122350184530077765734033425406055810373669798840851851090476687785235612051747082232947418290952863499263547598032467577778461061567081620676910480684540883879257518083587862219344609851852177109722186714811329766477552794034774928983660538381764930765795290189612024799300768559485810526074992569676241537503405494203262336327709010421</span><br></code></pre></td></tr></table></figure><p><del>花里胡哨</del>看n的构造特殊，还在想会不会是什么特别的方法，然后小鸡块共享私钥攻击秒了…<br>以后多考虑这方面吧<br>具体原理很简单，可以直接看<a href="https://tangcuxiaojikuai.xyz/post/818adfc0.html">小鸡块的博客</a></p><p>常数K数量级差不多即可<br>贴一下小鸡块的脚本:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sage">from Crypto.Util.number import *<br><br>nbits = 0x600<br>dbits = 0x210<br>c = 63442255298812942222810837512019302954917822996915527697525497640413662503768308023517128481053593562877494934841788054865410798751447333551319775025362132176942795107214528962480350398519459474033659025815248579631003928932688495682277210240277909527931445899728273182691941548330126199931886748296031014210795428593631253184315074234352536885430181103986084755140024577780815130067722355861473639612699372152970688687877075365330095265612016350599320999156644<br>e = 272785315258275494478303901715994595013215169713087273945370833673873860340153367010424559026764907254821416435761617347240970711252213646287464416524071944646705551816941437389777294159359383356817408302841561284559712640940354294840597133394851851877857751302209309529938795265777557840238332937938235024502686737802184255165075195042860413556866222562167425361146312096189555572705076252573222261842045286782816083933952875990572937346408235562417656218440227<br>n1 = 473173031410877037287927970398347001343136400938581274026578368211539730987889738033351265663756061524526288423355193643110804217683860550767181983527932872361546531994961481442866335447011683462904976896894011884907968495626837219900141842587071512040734664898328709989285205714628355052565784162841441867556282849760230635164284802614010844226671736675222842060257156860013384955769045790763119616939897544697150710631300004180868397245728064351907334273953201<br>n2 = 327163771871802208683424470007561712270872666244394076667663345333853591836596054597471607916850284565474732679392694515656845653581599800514388800663813830528483334021178531162556250468743461443904645773493383915711571062775922446922917130005772040139744330987272549252540089872170217864935146429898458644025927741607569303966038195226388964722300472005107075179204987774627759625183739199425329481632596633992804636690274844290983438078815836605603147141262181<br>n3 = 442893163857502334109676162774199722362644200933618691728267162172376730137502879609506615568680508257973678725536472848428042122350184530077765734033425406055810373669798840851851090476687785235612051747082232947418290952863499263547598032467577778461061567081620676910480684540883879257518083587862219344609851852177109722186714811329766477552794034774928983660538381764930765795290189612024799300768559485810526074992569676241537503405494203262336327709010421<br><br>K = 2^(nbits//2)<br>L = matrix(ZZ,4,4)<br>L[0]=[K,e,e,e]<br>L[1]=[0,-n1,0,0]<br>L[2]=[0,0,-n2,0]<br>L[3]=[0,0,0,-n3]<br><br>res=L.LLL()[0]<br>d = abs(res[0])//K<br><br>print(long_to_bytes(int(pow(c,d,n1))))<br><br>#ACTF&#123;5FFC427B-F14F-DCA0-C425-675B149890C2&#125;<br></code></pre></td></tr></table></figure><h2 id="MDH"><a href="#MDH" class="headerlink" title="MDH"></a>MDH</h2><p>Malin’s Diffile-Hellman Key Exchange.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br>r = <span class="hljs-number">128</span><br>c = <span class="hljs-number">96</span><br>p = <span class="hljs-number">308955606868885551120230861462612873078105583047156930179459717798715109629</span><br>Fp = GF(p)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen</span>():<br>    a1 = random_matrix(Fp, r, c)<br>    a2 = random_matrix(Fp, r, c)<br>    A = a1 * a2.T<br>    <span class="hljs-keyword">return</span> (a1, a2), A<br><br>sk_alice, pk_alice = gen()<br>sk_bob, pk_bob = gen()<br>shared = (sk_alice[<span class="hljs-number">0</span>].T * pk_bob * sk_alice[<span class="hljs-number">1</span>]).trace()<br>ct = <span class="hljs-built_in">int</span>(sha256(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(shared)).encode()).hexdigest(), <span class="hljs-number">16</span>) ^^ <span class="hljs-built_in">int</span>.from_bytes(flag, <span class="hljs-string">&#x27;big&#x27;</span>)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;output.txt&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(<span class="hljs-built_in">str</span>(ct).encode() + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    f.write(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">list</span>(pk_alice)).encode() + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    f.write(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">list</span>(pk_bob)).encode() + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br></code></pre></td></tr></table></figure><p>这题用到了矩阵的迹的性质<br>shared是alice的2个私钥和bob的公钥的乘积的迹<br>而alice的公钥是<code>a1 * a2.T</code><br>矩阵的迹的性质：行列转置不影响矩阵的迹<br>也就是说<code>pk_alice.trace()==(sk_alice[0]*sk_alice[1].T)==(sk_alice[0].T*sk_alice[1])</code><br>所以shared就很容易求出来了</p><p>小鸡块的脚本:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sage">from hashlib import sha256<br>from Crypto.Util.number import *<br><br>p = 308955606868885551120230861462612873078105583047156930179459717798715109629<br>c = 8308943029741424587523612386337754255889681699670071706719724435165094611096603769021839263<br>A = <br>B = <br><br>A = matrix(GF(p),A)<br>B = matrix(GF(p),B)<br>A = A.transpose()<br><br>shared = (A*B).trace()<br>m = c ^^ int(sha256(str(int(shared)).encode()).hexdigest(), 16)<br>print(long_to_bytes(m))<br><br>#ACTF&#123;do_you_know_f0rm2l1n_1s_4w3s0m3!&#125;<br></code></pre></td></tr></table></figure><h2 id="MidRSA"><a href="#MidRSA" class="headerlink" title="MidRSA"></a>MidRSA</h2><p>MidRSA</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">genKey</span>(<span class="hljs-params">nbits, dbits</span>):<br>    bbits = (nbits // <span class="hljs-number">2</span> - dbits) // <span class="hljs-number">2</span><br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        a = getRandomNBitInteger(dbits)<br>        b = getRandomNBitInteger(bbits)<br>        c = getRandomNBitInteger(bbits)<br>        p1 = a * b * c + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> isPrime(p1):<br>            <span class="hljs-comment"># print(&quot;p1 =&quot;, p1)</span><br>            <span class="hljs-keyword">break</span><br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        d = getRandomNBitInteger(dbits)<br>        p2 = b * c * d + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> isPrime(p2):<br>            <span class="hljs-comment"># print(&quot;p2 =&quot;, p2)</span><br>            <span class="hljs-keyword">break</span><br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        e = getRandomNBitInteger(bbits)<br>        f = getRandomNBitInteger(bbits)<br>        q1 = e * d * f + <span class="hljs-number">1</span><br>        p3 = a * e * f + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> isPrime(q1) <span class="hljs-keyword">and</span> isPrime(p3):<br>            <span class="hljs-comment"># print(&quot;p3 =&quot;, p3)</span><br>            <span class="hljs-comment"># print(&quot;q1 =&quot;, q1)</span><br>            <span class="hljs-keyword">break</span><br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        d_ = getRandomNBitInteger(dbits)<br>        <span class="hljs-keyword">if</span> GCD(a * b * c * d * e * f, d_) != <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">continue</span><br>        e_ = inverse(d_, a * b * c * d * e * f)<br>        k1 = (e_ * d_ - <span class="hljs-number">1</span>) // (a * b * c * d * e * f)<br>        <span class="hljs-keyword">assert</span> e_ * d_ == (a * b * c * d * e * f) * k1 + <span class="hljs-number">1</span><br>        q2 = k1 * e * f + <span class="hljs-number">1</span><br>        q3 = k1 * b * c + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> isPrime(q2) <span class="hljs-keyword">and</span> isPrime(q3):<br>            <span class="hljs-comment"># print(&quot;q2 =&quot;, q2)</span><br>            <span class="hljs-comment"># print(&quot;q3 =&quot;, q3)</span><br>            <span class="hljs-comment"># print(&quot;e =&quot;, e_)</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;d =&quot;</span>, d_)<br>            <span class="hljs-keyword">break</span><br><br>    n1 = p1 * q1<br>    n2 = p2 * q2<br>    n3 = p3 * q3<br>    <br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">pow</span>(<span class="hljs-built_in">pow</span>(<span class="hljs-number">0xdeadbeef</span>, e_, n1), d_, n1) == <span class="hljs-number">0xdeadbeef</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">pow</span>(<span class="hljs-built_in">pow</span>(<span class="hljs-number">0xdeadbeef</span>, e_, n2), d_, n2) == <span class="hljs-number">0xdeadbeef</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">pow</span>(<span class="hljs-built_in">pow</span>(<span class="hljs-number">0xdeadbeef</span>, e_, n3), d_, n3) == <span class="hljs-number">0xdeadbeef</span><br><br>    <span class="hljs-keyword">return</span>(e_, n1, n2, n3)<br><br><br>nbits = <span class="hljs-number">0x600</span><br>dbits = <span class="hljs-number">0x240</span><br><br>m = bytes_to_long(flag)<br>e, n1, n2, n3 = genKey(nbits, dbits)<br>c = <span class="hljs-built_in">pow</span>(m, e, n1)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c =&quot;</span>, c)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e =&quot;</span>, e)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n1 =&quot;</span>, n1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n2 =&quot;</span>, n2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n3 =&quot;</span>, n3)<br><br><br><span class="hljs-comment"># c = 598823083137858565473505718525815255620672892612784824187302545127574115000325539999824374357957135208478070797113625659118825530731575573239221853507638809719397849963861367352055486212696958923800593172417262351719477530809870735637329898331854130533160020420263724619225174940214193740379571953951059401685115164634005411478583529751890781498407518739069969017597521632392997743956791839564573371955246955738575593780508817401390102856295102225132502636316844</span><br><span class="hljs-comment"># e = 334726528702628887205076146544909357751287869200972341824248480332256143541098971600873722567713812425364296038771650383962046800505086167635487091757206238206029361844181642521606953049529231154613145553220809927001722518303114599682529196697410089598230645579658906203453435640824934159645602447676974027474924465177723434855318446073578465621382859962701578350462059764095163424218813852195709023435581237538699769359084386399099644884006684995755938605201771</span><br><span class="hljs-comment"># n1 = 621786427956510577894657745225233425730501124908354697121702414978035232119311662357181409283130180887720760732555757426221953950475736078765267856308595870951635246720750862259255389006679454647170476427262240270915881126875224574474706572728931213060252787326765271752969318854360970801540289807965575654629288558728966771231501959974533484678236051025940684114262451777094234017210230731492336480895879764397821363102224085859281971513276968559080593778873231</span><br><span class="hljs-comment"># n2 = 335133378611627373902246132362791381335635839627660359611198202073307340179794138179041524058800936207811546752188713855950891460382258433727589232119735602364790267515558352318957355100518427499530387075144776790492766973547088838586041648900788325902589777445641895775357091753360428198189998860317775077739054298868885308909495601041757108114540069950359802851809227248145281594107487276003206931533768902437356652676341735882783415106786497390475670647453821</span><br><span class="hljs-comment"># n3 = 220290953009399899705676642623181513318918775662713704923101352853965768389363281894663344270979715555659079125651553079702318700200824118622766698792556506368153467944348604006011828780474050012010677204862020009069971864222175380878120025727369117819196954091417740367068284457817961773989542151049465711430065838517386380261817772422927774945414543880659243592749932727798690742051285364898081188510009069286094647222933710799481899960520270189522155672272451</span><br></code></pre></td></tr></table></figure><p>d变大了，目标向量不再是格中的最短向量，或者说目标向量的长度大于高斯启发式的近似值了。<br>这里记录一下我个人的观点，可能有误:</p><blockquote><p>只要目标向量的长度小于高斯启发式的近似值，那么我们可以认为有很大可能可以规约出目标向量<br>有些自己构建的格不是那么完美，在保证结果向量中的数量级相近的前提下，无论如何更改格中的常数的值都无法让高斯启发式的近似值大于目标向量，因为高斯启发式中的k是<code>k^(1/n)</code><br>计算高斯启发式:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sage">def guass_Heuristic(L):<br>    n = L.nrows()<br>    efficient = (n/(2*math.pi*math.e))**(0.5)<br>    return int(efficient*iroot(abs(L.det()),n)[0])<br><br>print(guass_Heuristic(L).bit_length())<br></code></pre></td></tr></table></figure><p>在这题中需要爆破一下d的低位。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs math">e*d=1*k*phi(n)<br>e*(2^s*d_h+d_l)=1*k*phi(n)<br></code></pre></td></tr></table></figure><p>然后借用一下小鸡块的博客:<br><img src="/2025/04/21/2023-10-30ACTF/1.png"></p><p>小鸡块的exp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs sage">from Crypto.Util.number import *<br>from tqdm import *<br><br>nbits = 0x600<br>dbits = 0x240<br><br>c = 598823083137858565473505718525815255620672892612784824187302545127574115000325539999824374357957135208478070797113625659118825530731575573239221853507638809719397849963861367352055486212696958923800593172417262351719477530809870735637329898331854130533160020420263724619225174940214193740379571953951059401685115164634005411478583529751890781498407518739069969017597521632392997743956791839564573371955246955738575593780508817401390102856295102225132502636316844<br>e = 334726528702628887205076146544909357751287869200972341824248480332256143541098971600873722567713812425364296038771650383962046800505086167635487091757206238206029361844181642521606953049529231154613145553220809927001722518303114599682529196697410089598230645579658906203453435640824934159645602447676974027474924465177723434855318446073578465621382859962701578350462059764095163424218813852195709023435581237538699769359084386399099644884006684995755938605201771<br>n1 = 621786427956510577894657745225233425730501124908354697121702414978035232119311662357181409283130180887720760732555757426221953950475736078765267856308595870951635246720750862259255389006679454647170476427262240270915881126875224574474706572728931213060252787326765271752969318854360970801540289807965575654629288558728966771231501959974533484678236051025940684114262451777094234017210230731492336480895879764397821363102224085859281971513276968559080593778873231<br>n2 = 335133378611627373902246132362791381335635839627660359611198202073307340179794138179041524058800936207811546752188713855950891460382258433727589232119735602364790267515558352318957355100518427499530387075144776790492766973547088838586041648900788325902589777445641895775357091753360428198189998860317775077739054298868885308909495601041757108114540069950359802851809227248145281594107487276003206931533768902437356652676341735882783415106786497390475670647453821<br>n3 = 220290953009399899705676642623181513318918775662713704923101352853965768389363281894663344270979715555659079125651553079702318700200824118622766698792556506368153467944348604006011828780474050012010677204862020009069971864222175380878120025727369117819196954091417740367068284457817961773989542151049465711430065838517386380261817772422927774945414543880659243592749932727798690742051285364898081188510009069286094647222933710799481899960520270189522155672272451<br><br>K = 2^(nbits//2)<br>L = matrix(ZZ,5,5)<br>shift = 2^16<br>for dl in trange(shift):<br>    L[0]=[K*shift,shift*e,shift*e,shift*e,0          ]<br>    L[1]=[0      ,-n1    ,0      ,0      ,0          ]<br>    L[2]=[0      ,0      ,-n2    ,0      ,0          ]<br>    L[3]=[0      ,0      ,0      ,-n3    ,0          ]<br>    L[4]=[0      ,e*dl   ,e*dl   ,e*dl   ,K*(2^dbits)]<br><br>    res=L.LLL()[0]<br>    if(res[0] &gt; 0):<br>        d = abs(res[0])//K + dl<br>    else:<br>        d = abs(res[0])//K - dl<br><br>    flag = long_to_bytes(int(pow(c,d,n1)))<br>    if(b&quot;ACTF&quot; in flag):<br>        print(flag)<br><br>#ACTF&#123;D16C46D9-77A2-2D96-CA51-4538EFB6AFF7&#125;<br></code></pre></td></tr></table></figure><h2 id="CRCRC"><a href="#CRCRC" class="headerlink" title="CRCRC"></a>CRCRC</h2><p>No desCRCiption</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">crc128</span>(<span class="hljs-params">data, poly = <span class="hljs-number">0x883ddfe55bba9af41f47bd6e0b0d8f8f</span></span>):<br>    crc = (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">128</span>) - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> data:<br>        crc ^= b<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>            crc = (crc &gt;&gt; <span class="hljs-number">1</span>) ^ (poly &amp; -(crc &amp; <span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">return</span> crc ^ ((<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">128</span>) - <span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./flag.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    flag = f.readline()<br><br>YourInput = <span class="hljs-built_in">input</span>().encode()<br>YourDecode = b64decode(YourInput, validate=<span class="hljs-literal">True</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(YourDecode))<br><br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(YourDecode) &lt;= <span class="hljs-number">127</span> <span class="hljs-keyword">and</span> YourDecode.startswith(<span class="hljs-string">b&#x27;Dear guest, welcome to CRCRC Magic House, If you input &#x27;</span>) <span class="hljs-keyword">and</span> YourDecode.endswith(<span class="hljs-string">b&quot;, you will get 0x9c6a11fbc0e97b1fff5844fa88b1ee2d&quot;</span>)<br><br>YourCRC = crc128(YourInput)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(YourCRC))<br><br><span class="hljs-keyword">if</span>(YourCRC) == <span class="hljs-number">0x9c6a11fbc0e97b1fff5844fa88b1ee2d</span>:<br>    <span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>小鸡块的wp看不懂…<br>所以记录一下学到的。<br>对于4组任意的明文-密文对<code>p1,c1 p2,c2 p3,c3 p4,c4</code>，其中除p1外均已知<br>如果<code>c1^c2==c3^c4</code>，那么<code>p1^p2==p3^p4</code>。<br>还有就说CRC解密脚本，只能解出一组特解，具体看小鸡块的博客吧，我是看不懂了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sage">def crc128(data, poly=0x883ddfe55bba9af41f47bd6e0b0d8f8f):<br>    crc = (1 &lt;&lt; 128) - 1<br>    for b in data:<br>        crc ^^= b<br>        for _ in range(8):<br>            crc = (crc &gt;&gt; 1) ^^ (poly &amp; -(crc &amp; 1))<br>    return crc ^^ ((1 &lt;&lt; 128) - 1)<br><br>def equivalent_affine_crc(crc = crc128, crc_bits = 128, target_bytes = 16):<br>    zero_crc = crc(target_bytes*b&quot;\x00&quot;)<br>    target_bits = 8 * target_bytes<br>    v2n = lambda v: int(&#x27;&#x27;.join(map(str, v)), 2)<br>    n2v = lambda n: vector(GF(2), bin(n)[2:].zfill(crc_bits))<br>    # n2v_t = lambda n: vector(GF(2), bin(n)[2:].zfill(target_bits))<br>    Affine_Matrix = []<br>    for i in range(target_bits):<br>        v = vector(GF(2), (j == i for j in range(target_bits)))<br>        value = crc(long_to_bytes(v2n(v),target_bytes)) ^^ zero_crc<br>        Affine_Matrix.append(n2v(value))<br>    # crc affine function: crc_128(x) = M*x+ C<br>    return matrix(GF(2),Affine_Matrix).transpose(), n2v(zero_crc)<br><br>def crc_128_reverse(crc_value):<br>    M , C = equivalent_affine_crc()<br>    # crc affine function: crc_128(x) = M*x+ C<br>    v2n = lambda v: int(&#x27;&#x27;.join(map(str, v)), 2)<br>    n2v = lambda n: vector(GF(2), bin(n)[2:].zfill(128))<br>    res = M.solve_right(n2v(crc_value)+C)<br>    return long_to_bytes(v2n(res),16)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>crypto</category>
      
      <category>ACTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
      <tag>共享私钥</tag>
      
      <tag>LLL</tag>
      
      <tag>CRC128</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2025.3.22NCTF</title>
    <link href="/2025/03/29/2025-3-22NCTF/"/>
    <url>/2025/03/29/2025-3-22NCTF/</url>
    
    <content type="html"><![CDATA[<h1 id="2025-3-22NCTF"><a href="#2025-3-22NCTF" class="headerlink" title="2025.3.22NCTF"></a>2025.3.22NCTF</h1><p>是 <strong>2025.3.22NCTF</strong> 哒！</p><p>爆0了…所以给出的我自己的脚本有些是不会与靶机交互的，但最后会给出官方的wp<br><del>才不是我懒得写</del></p><h2 id="绮云"><a href="#绮云" class="headerlink" title="绮云"></a>绮云</h2><p>花灯百盏遥遥一线牵</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> getenv,urandom<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ECDSA</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.p = <span class="hljs-number">0xFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFF</span><br>        <span class="hljs-variable language_">self</span>.a = <span class="hljs-number">0xFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFC</span><br>        <span class="hljs-variable language_">self</span>.b = <span class="hljs-number">0x28E9FA9E9D9F5E344D5A9E4BCF6509A7F39789F515AB8F92DDBCBD414D940E93</span><br>        <span class="hljs-variable language_">self</span>.n = <span class="hljs-number">0xFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123</span><br>        <span class="hljs-variable language_">self</span>.Gx = <span class="hljs-number">0x32C4AE2C1F1981195F9904466A39C9948FE30BBFF2660BE1715A4589334C74C7</span><br>        <span class="hljs-variable language_">self</span>.Gy = <span class="hljs-number">0xBC3736A2F4F6779C59BDCEE36B692153D0A9877CC62A474002DF32E52139F0A0</span><br>        <span class="hljs-variable language_">self</span>.G = (<span class="hljs-variable language_">self</span>.Gx,<span class="hljs-variable language_">self</span>.Gy)<br><br>        <span class="hljs-variable language_">self</span>.d = getPrime(<span class="hljs-number">232</span>)<br>        <span class="hljs-variable language_">self</span>.Q = <span class="hljs-variable language_">self</span>.mul(<span class="hljs-variable language_">self</span>.d,<span class="hljs-variable language_">self</span>.G)<br>        <span class="hljs-keyword">assert</span> <span class="hljs-variable language_">self</span>.is_on_curve(<span class="hljs-variable language_">self</span>.Q)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_on_curve</span>(<span class="hljs-params">self, point</span>):<br>        <span class="hljs-keyword">if</span> point <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        x, y = point<br>        <span class="hljs-keyword">return</span> (y**<span class="hljs-number">2</span> - x**<span class="hljs-number">3</span> - <span class="hljs-variable language_">self</span>.a * x - <span class="hljs-variable language_">self</span>.b) % <span class="hljs-variable language_">self</span>.p == <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">self, p1, p2</span>):<br>        <span class="hljs-keyword">if</span> p1 <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> p2 <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> p1 <span class="hljs-keyword">if</span> p2 <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> p2<br><br>        x1, y1 = p1<br>        x2, y2 = p2<br><br>        <span class="hljs-keyword">if</span> x1 == x2 <span class="hljs-keyword">and</span> y1 != y2:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">if</span> x1 == x2:<br>            m = (<span class="hljs-number">3</span> * x1 * x1 + <span class="hljs-variable language_">self</span>.a) * <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span> * y1, -<span class="hljs-number">1</span>,  <span class="hljs-variable language_">self</span>.p) % <span class="hljs-variable language_">self</span>.p<br>        <span class="hljs-keyword">else</span>:<br>            m = (y2 - y1) * <span class="hljs-built_in">pow</span>((x2 - x1) % <span class="hljs-variable language_">self</span>.p, -<span class="hljs-number">1</span>, <span class="hljs-variable language_">self</span>.p) % <span class="hljs-variable language_">self</span>.p<br>        <br>        x3 = (m * m - x1 - x2) % <span class="hljs-variable language_">self</span>.p<br>        y3 = (m * (x1 - x3) - y1) % <span class="hljs-variable language_">self</span>.p<br>        <span class="hljs-keyword">return</span> (x3, y3)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">mul</span>(<span class="hljs-params">self, k:<span class="hljs-built_in">int</span>, P:<span class="hljs-built_in">tuple</span>[<span class="hljs-built_in">int</span>,<span class="hljs-built_in">int</span>]</span>):<br>        <span class="hljs-keyword">if</span> P <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <br>        R = <span class="hljs-literal">None</span>        <br>        <span class="hljs-keyword">while</span> k &gt; <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">if</span> k &amp; <span class="hljs-number">1</span>:<br>                R = <span class="hljs-variable language_">self</span>.add(R, P)<br>            P = <span class="hljs-variable language_">self</span>.add(P,P)<br>            k &gt;&gt;= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> R<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_key_pair</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.d,<span class="hljs-variable language_">self</span>.Q<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sign</span>(<span class="hljs-params">self, message</span>):<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            k = randint(<span class="hljs-number">1</span>, <span class="hljs-variable language_">self</span>.n - <span class="hljs-number">1</span>)<br>            P = <span class="hljs-variable language_">self</span>.mul(k, <span class="hljs-variable language_">self</span>.G)<br>            <span class="hljs-keyword">if</span> P <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">continue</span><br>            <br>            r = P[<span class="hljs-number">0</span>] % <span class="hljs-variable language_">self</span>.n<br>            <span class="hljs-keyword">if</span> r == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">continue</span><br><br>            s = (<span class="hljs-built_in">pow</span>(k,-<span class="hljs-number">1</span>,<span class="hljs-variable language_">self</span>.n) * (<span class="hljs-built_in">int</span>.from_bytes(sha256(message).digest())+ <span class="hljs-variable language_">self</span>.d * r)) % <span class="hljs-variable language_">self</span>.n<br>            <span class="hljs-keyword">if</span> s != <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> (r, s)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">verify</span>(<span class="hljs-params">self, m:<span class="hljs-built_in">bytes</span>, r:<span class="hljs-built_in">int</span>,s:<span class="hljs-built_in">int</span></span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (<span class="hljs-number">1</span> &lt;= r &lt; <span class="hljs-variable language_">self</span>.n <span class="hljs-keyword">and</span> <span class="hljs-number">1</span> &lt;= s &lt; <span class="hljs-variable language_">self</span>.n):<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <br>        u1 = (<span class="hljs-built_in">int</span>.from_bytes(sha256(m).digest()) * <span class="hljs-built_in">pow</span>(s,-<span class="hljs-number">1</span>,<span class="hljs-variable language_">self</span>.n)) % <span class="hljs-variable language_">self</span>.n<br>        u2 = (r * <span class="hljs-built_in">pow</span>(s,-<span class="hljs-number">1</span>,<span class="hljs-variable language_">self</span>.n)) % <span class="hljs-variable language_">self</span>.n<br><br>        <span class="hljs-keyword">if</span> u1 == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> u2 == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>        P = <span class="hljs-variable language_">self</span>.add(<span class="hljs-variable language_">self</span>.mul(u1, <span class="hljs-variable language_">self</span>.G), <span class="hljs-variable language_">self</span>.mul(u2, <span class="hljs-variable language_">self</span>.Q))        <br>        <span class="hljs-keyword">return</span> P[<span class="hljs-number">0</span>] % <span class="hljs-variable language_">self</span>.n == r<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RSA</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,d:<span class="hljs-built_in">int</span></span>):<br>        p = getStrongPrime(<span class="hljs-number">1024</span>)<br>        q = getStrongPrime(<span class="hljs-number">1024</span>)<br>        <br>        <span class="hljs-keyword">assert</span> GCD(d,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)) == <span class="hljs-number">1</span><br><br>        <span class="hljs-variable language_">self</span>.N = p * q<br>        <span class="hljs-variable language_">self</span>.d = d<br>        <span class="hljs-variable language_">self</span>.e = <span class="hljs-built_in">pow</span>(d,-<span class="hljs-number">1</span>,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">self,m:<span class="hljs-built_in">int</span>,idx:<span class="hljs-built_in">int</span></span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">pow</span>(m,<span class="hljs-variable language_">self</span>.e ^ (<span class="hljs-number">1</span> &lt;&lt; idx),<span class="hljs-variable language_">self</span>.N)<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>():<br>    r,s = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Give me your signature:&#x27;</span>).split()))<br>    <span class="hljs-keyword">if</span> e.verify(<span class="hljs-string">f&#x27;nctf2024-<span class="hljs-subst">&#123;urandom(<span class="hljs-number">1</span>).<span class="hljs-built_in">hex</span>()&#125;</span>&#x27;</span>.encode(),r,s):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Congratulations! Here is your flag: <span class="hljs-subst">&#123;getenv(<span class="hljs-string">&quot;FLAG&quot;</span>)&#125;</span>&#x27;</span>)<br>        exit()<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Wrong!&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    e = ECDSA()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Can you navigate yourself through QiYun Valley with only the encryption orcale?&#x27;</span>)<br><br>    menu = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">--- Menu ---</span><br><span class="hljs-string">[1] Initialize encryption orcale</span><br><span class="hljs-string">[2] Check your signature</span><br><span class="hljs-string">[3] Exit&#x27;&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-built_in">print</span>(menu)<br>        opt = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Your option:&#x27;</span>).strip()<br>        <br>        <span class="hljs-keyword">if</span> opt==<span class="hljs-string">&#x27;1&#x27;</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Generating new public key pair for you...&#x27;</span>)<br>            rsa = RSA(e.d ** <span class="hljs-number">4</span>)<br><br>            <span class="hljs-keyword">while</span> <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter &#x27;e&#x27; for encryption or other to exit:&quot;</span>).strip() == <span class="hljs-string">&quot;e&quot;</span>:<br>                m = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Enter your message:&#x27;</span>),<span class="hljs-number">16</span>)<br>                x = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Where do you want to interfere?&#x27;</span>))<br><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Result:<span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(rsa.encrypt(m,x))[<span class="hljs-number">2</span>:]&#125;</span>&#x27;</span>)<br><br>        <span class="hljs-keyword">elif</span> opt==<span class="hljs-string">&#x27;2&#x27;</span>:<br>            check()<br>        <br>        <span class="hljs-keyword">elif</span> opt==<span class="hljs-string">&#x27;3&#x27;</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Bye~&#x27;</span>)<br>            exit()<br><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Invalid option&#x27;</span>)<br></code></pre></td></tr></table></figure><p>题目允许我们:1.翻转e的任意一个比特位然后进行加密，返回加密结果;2.检查椭圆曲线的签名，正确就给flag。而椭圆曲线的d的4次方就是RSA的d。<br>我们需要通过明文和密文来推出e和n，进而推出d，再进行轻度的签名爆破即可。<br>首先要获取RSA的n。我是在lazzaro的博客里找到了这个<br><a href="https://lazzzaro.github.io/2020/05/06/crypto-RSA/#%E9%80%89%E6%8B%A9%E6%98%8E-%E5%AF%86%E6%96%87%E6%94%BB%E5%87%BB">选择明&#x2F;密文攻击</a><br><img src="/2025/03/29/2025-3-22NCTF/1.png"><br>让服务器加密明文<code>P</code>，得到结果<code>C1</code>，再加密明文<code>P**2</code>，得到结果<code>C2</code>，那么就能得到<code>C1**2-C2=kn</code>，再对另一个明文<code>P2</code>重复操作即可得到<code>k&#39;n</code>，对这两个结果求GCD即可得到n，可能会有一些小素数因子存在，去掉即可。<br>由题可知<code>GCD(e,(p-1)*(q-1))=1</code>，所以e一定是奇数，那么e的最低比特位一定是1。<br>我们就可以翻转最低比特位，再对2进行加密，返回的结果一定是<code>2**(e-1)%n</code>，结果再乘2模n即是<code>2**e%n</code>，我们就得到了未翻转任何比特位的加密结果。<br>之后，我们再继续翻转第k位比特位，把加密结果乘<code>2**(1&lt;&lt;k)</code>再模n，这个操作相当于把e的第k位加1。<br>如果这个比特位翻转前是1，那么翻转后就是0，加1后又变回了1，也就是说会得到未翻转比特位的e的加密结果。<br>所以，当我们把加密结果乘以<code>2**(1&lt;&lt;k)</code>后再模n，如果密文与前面得到的未翻转任何比特位的加密结果相同，说明这个比特位是1，反之是0<br>这里给出我比赛时用的得到n和e的脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> nextprime<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">t</span>(<span class="hljs-params">m:<span class="hljs-built_in">int</span>,x:<span class="hljs-built_in">int</span></span>):<br>    m=<span class="hljs-built_in">hex</span>(m)[<span class="hljs-number">2</span>:].encode()<br>    x=<span class="hljs-built_in">str</span>(x).encode()<br>    out=r.recvuntil(<span class="hljs-string">b&#x27;:&#x27;</span>)<br>    r.sendline(<span class="hljs-string">b&#x27;e&#x27;</span>)<br>    out=r.recvuntil(<span class="hljs-string">b&#x27;:&#x27;</span>)<br>    r.sendline(m)<br>    out=r.recvuntil(<span class="hljs-string">b&#x27;?&#x27;</span>)<br>    r.sendline(x)<br>    out=r.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    out=<span class="hljs-built_in">int</span>(out.decode()[:-<span class="hljs-number">2</span>].split(<span class="hljs-string">&#x27;:&#x27;</span>)[-<span class="hljs-number">1</span>],<span class="hljs-number">16</span>)<br>    <span class="hljs-keyword">return</span> out<br>    <br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>r=remote(<span class="hljs-string">&#x27;39.106.16.204&#x27;</span>,<span class="hljs-number">16330</span>)<br><br>out=r.recv(<span class="hljs-number">400</span>)<br><span class="hljs-built_in">print</span>(out)<br><br>r.sendline(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>out=r.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br><span class="hljs-built_in">print</span>(out)<br><br>c2=t(<span class="hljs-number">2</span>,<span class="hljs-number">0</span>)<br>c4=t(<span class="hljs-number">4</span>,<span class="hljs-number">0</span>)<br><br>c3=t(<span class="hljs-number">3</span>,<span class="hljs-number">0</span>)<br>c9=t(<span class="hljs-number">9</span>,<span class="hljs-number">0</span>)<br><br>c5=t(<span class="hljs-number">5</span>,<span class="hljs-number">0</span>)<br>c25=t(<span class="hljs-number">25</span>,<span class="hljs-number">0</span>)<br><br>n1=c2**<span class="hljs-number">2</span>-c4<br>n2=c3**<span class="hljs-number">2</span>-c9<br>n3=c5**<span class="hljs-number">2</span>-c25<br><br>n_=GCD(n1,n2)<br>n=GCD(n_,n3)<br><br><span class="hljs-comment">#检查是否有小素数因子，其实可能不需要检查这么多</span><br>pri=<span class="hljs-number">2</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">while</span> n%pri==<span class="hljs-number">0</span>:<br>        n//=pri<br>    pri=nextprime(pri)<br><br><span class="hljs-built_in">print</span>(n)<br><br><span class="hljs-comment">#得到未翻转比特位的加密结果</span><br>c=c2*<span class="hljs-number">2</span>%n<br><br>e=[<span class="hljs-number">0</span>]*<span class="hljs-number">2049</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2049</span>):<br>    <span class="hljs-keyword">if</span> i%<span class="hljs-number">200</span>==<span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(i)<br>    <span class="hljs-keyword">if</span> t(<span class="hljs-number">2</span>,i)*<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>&lt;&lt;i,n)%n==c:<br>        e[i]=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        e[i]=<span class="hljs-number">0</span><br><br>e=<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>,e[::-<span class="hljs-number">1</span>])),<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(e)<br></code></pre></td></tr></table></figure><p>得到n,e后就不会了…<br>看了下wp是用格的，而且需要10组n,e，也就是说交互时间是非常长的。<br>wp的解释:<br><img src="/2025/03/29/2025-3-22NCTF/2.png"><br>这是我复现的脚本:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sage">import gmpy2<br>#10组n和e<br>el=[]<br>nl=[]<br><br>length=11<br>B=[[0]*length for i in range(length)]<br>for i in range(len(B)-1):<br>    B[i][i]=nl[i]<br>    B[-1][i]=el[i]<br>B[-1][-1]=2^1024<br>B=matrix(ZZ,B)<br>B_=B.LLL()<br><br>d=B_[0][-1]//2^1024<br>d=gmpy2.iroot(d,4)<br>print(d)<br>d=d[0]<br></code></pre></td></tr></table></figure><figure class="highlight hy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs hy">(<span class="hljs-name">mpz</span>(<span class="hljs-number">3650017291377232489980231598072561018897386229012755703758171135449773</span>), <span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>成功得到d。<br>之后用题目中的sign函数对随机一个byte签名即可，然后尝试verify，直到靶机随机到你签名的那个byte。<br>官方wp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs sage">#sage<br>__import__(&#x27;os&#x27;).environ[&#x27;TERM&#x27;] = &#x27;xterm&#x27;<br><br>from pwn import *<br>from sage.all import *<br>from time import time<br>from hashlib import sha256<br><br>io = remote(&#x27;39.106.16.204&#x27;, 10645)<br># io = process([&#x27;python3&#x27;, &#x27;task.py&#x27;])<br><br>nls = []<br>els = []<br><br>recv_hexint = lambda: int(io.recvline().strip().decode(), 16)<br><br>t0 = time()<br><br>for _ in range(10):<br>    io.sendlineafter(b&#x27;option:&#x27;, b&#x27;1&#x27;)<br>    # decipher N via GCD<br><br>    numls = []<br>    for i in range(9):<br>        msg = int(1 &lt;&lt; (i + 1)).to_bytes(2, &#x27;big&#x27;)<br>        io.sendlineafter(b&#x27;exit:&#x27;, b&#x27;e&#x27;)<br>        io.sendlineafter(b&#x27;message:&#x27;, msg.hex().encode())<br>        io.sendlineafter(b&#x27;interfere?&#x27;, b&#x27;0&#x27;)<br>        io.recvuntil(b&#x27;Result:&#x27;)<br>        numls.append(int(io.recvline().strip().decode(), 16))<br><br>    gcdls = []<br>    for i in range(1, 9):<br>        gcdls.append(numls[0] ^ (i + 1) - numls[i])<br><br>    n = gcd(gcdls)<br>    nls.append(n)<br>    print(f&#x27;n #&#123;_&#125; = &#123;n&#125;&#x27;)<br><br>    # decipher e via fault injection of e<br><br>    orcale_msg = 3<br><br>    io.sendlineafter(b&#x27;exit:&#x27;, b&#x27;e&#x27;)<br>    io.sendlineafter(b&#x27;message:&#x27;, int(orcale_msg).to_bytes(1, &#x27;big&#x27;).hex().encode())<br>    io.sendlineafter(b&#x27;interfere?&#x27;, b&#x27;2048&#x27;)<br>    io.recvuntil(b&#x27;Result:&#x27;)<br>    basis = recv_hexint() * pow(orcale_msg, -2**2048, n) % n  # basis, = pow(m,e,n)<br><br>    e_rng = [0] * 2048<br><br>    for i in range(2048):<br>        io.sendlineafter(b&#x27;exit:&#x27;, b&#x27;e&#x27;)<br>        io.sendlineafter(b&#x27;message:&#x27;, int(orcale_msg).to_bytes(1, &#x27;big&#x27;).hex().encode())<br>        io.sendlineafter(b&#x27;interfere?&#x27;, str(i).encode())<br>        io.recvuntil(b&#x27;Result:&#x27;)<br><br>        temp = recv_hexint()<br>        multiplier = pow(orcale_msg, 2**i, n)<br><br>        if temp == basis * multiplier % n:  # 0 -&gt; 1, original = 0<br>            e_rng[i] = 0<br>        else:  # 1 -&gt; 0, original = 1<br>            assert temp == basis * pow(multiplier, -1, n) % n  # ensure<br>            e_rng[i] = 1<br><br>    e_res = int(&#x27;&#x27;.join(str(i) for i in e_rng)[::-1], 2)<br>    assert pow(orcale_msg, e_res, n) == basis<br>    els.append(e_res)<br><br>    print(f&#x27;e #&#123;_&#125; = &#123;e_res&#125;&#x27;)<br>    print(f&#x27;Time elasped: &#123;time() - t0:.2f&#125;s&#x27;)<br>    io.sendlineafter(b&#x27;exit:&#x27;, b&#x27;&#x27;)<br><br>const = 2**1024<br>mt = matrix.diagonal(ZZ, nls + [0]).dense_matrix()<br>mt[-1] = els + [const]<br>mt = mt.LLL()<br><br>temp = abs(mt[0, -1])<br>assert temp % const == 0<br>d = ZZ(temp / const)<br><br>x = d.nth_root(4)<br>E = EllipticCurve(Zmod(0xFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFF), [0xFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFC, 0x28E9FA9E9D9F5E344D5A9E4BCF6509A7F39789F515AB8F92DDBCBD414D940E93])<br>n = 0xFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123<br><br>G = E((0x32C4AE2C1F1981195F9904466A39C9948FE30BBFF2660BE1715A4589334C74C7, 0xBC3736A2F4F6779C59BDCEE36B692153D0A9877CC62A474002DF32E52139F0A0))<br>m0 = int.from_bytes(sha256(&#x27;nctf2024-00&#x27;.encode()).digest(), &#x27;big&#x27;)<br><br>while True:<br>    k = int(time() * 1000)  # any random number smaller than n<br>    P = k * G<br>    r = int(P.xy()[0]) % n<br>    s = (pow(k, -1, n) * (m0 + x * r)) % n<br>    if r != 0 and s != 0:<br>        break<br><br>send = f&#x27;&#123;r&#125; &#123;s&#125;&#x27;.encode()<br>while True:<br>    io.sendlineafter(b&#x27;option:&#x27;, b&#x27;2&#x27;)<br>    io.sendlineafter(b&#x27;:&#x27;, send)<br>    msg = io.recvline()<br>    if b&#x27;flag&#x27; in msg:<br>        print(msg.decode())<br>        break<br><br>io.close()<br></code></pre></td></tr></table></figure><h2 id="Sign"><a href="#Sign" class="headerlink" title="Sign"></a>Sign</h2><p>这是恢复互联网的密钥，密码是实时生成的三万个随机数。<br>srv.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> util <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> getenv<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> Random<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><br>string = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;secret.txt&#x27;</span>).read().strip().encode()<br>flag = getenv(<span class="hljs-string">&#x27;FLAG&#x27;</span>).encode()<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    Keys = []<br>    <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> string:<br>        f = FHE()<br>        s = long_to_bytes(Random().getrandbits(<span class="hljs-number">20000</span>))<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s[<span class="hljs-number">4</span>:]:<br>            Keys.extend(f.encrypt([i]))<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s[:<span class="hljs-number">4</span>]:<br>            Keys.extend(f.encrypt([i * (m &amp; <span class="hljs-number">0x03</span>) % <span class="hljs-number">0x101</span>]))<br>            m &gt;&gt;= <span class="hljs-number">2</span><br>        <br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(Keys) == <span class="hljs-number">30000</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;[+] Your ciphertext: <span class="hljs-subst">&#123;AES.new(md5(string).digest(),AES.MODE_ECB).encrypt(pad(flag,<span class="hljs-number">16</span>)).<span class="hljs-built_in">hex</span>()&#125;</span>&#x27;</span>)<br>    <span class="hljs-built_in">input</span>(<span class="hljs-string">f&#x27;[+] The keys to retrieve the global internet connection are as follows:&#x27;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">30000</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;[+] <span class="hljs-subst">&#123;Keys[i]&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>util.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> urandom<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getrandint</span>(<span class="hljs-params">n:<span class="hljs-built_in">int</span></span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>.from_bytes(urandom(n//<span class="hljs-number">8</span>+<span class="hljs-number">1</span>)) % <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,n)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FHE</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.p = getPrime(<span class="hljs-number">77</span>)<br>        <span class="hljs-variable language_">self</span>.pubkeys = []<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>            <span class="hljs-variable language_">self</span>.pubkeys.append(<span class="hljs-variable language_">self</span>.p * getrandint(<span class="hljs-number">177</span>) + (getrandint(<span class="hljs-number">17</span>) &lt;&lt; <span class="hljs-number">8</span>))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">self,msg:<span class="hljs-built_in">list</span>[<span class="hljs-built_in">int</span>] | <span class="hljs-built_in">bytes</span></span>):<br>        result = []<br>        <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> msg:<br>            tmp = <span class="hljs-number">0</span><br>            shuffle_base = urandom(<span class="hljs-number">16</span>)<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> shuffle_base:<br>                x,y = <span class="hljs-built_in">divmod</span>(i,<span class="hljs-number">16</span>)<br>                tmp += x*<span class="hljs-variable language_">self</span>.pubkeys[y] + y*<span class="hljs-variable language_">self</span>.pubkeys[x]<br>            result.append(tmp + m)<br>        <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure><p>题目的意思很简单，恢复字符串string，然后解密AES即可。<br>通过观察FHE的encrypt函数，我们不难得出<code>msg=result%p%256</code><br><code>result%p</code>能得到<code>getrandint(17) &lt;&lt; 8+m</code>，而<code>getrandint(17) &lt;&lt; 8</code>的低8位正好是0，<code>%256</code>即可得到msg。<br>求出mag后我们就可以恢复<code>s[4:]</code>的值了，并且因为这20000bits是通过random模块生成的，random模块采用的是MT19937作为伪随机数生成器的，所以我们可以逆向MT19937来获得<code>s[:4]</code><br>得到了<code>s[:4]</code>后我们就可以恢复string了，具体细节之后再说<br>所以问题就变成了如何得到p。<br>嗯…比赛时卡这了，所以来看wp吧~<br><img src="/2025/03/29/2025-3-22NCTF/3.png"><br><img src="/2025/03/29/2025-3-22NCTF/4.png"><br><img src="/2025/03/29/2025-3-22NCTF/5.png"><br>这是一个求近似最大公约数问题(AGCD&#x2F;Approximate Greatest Common Divisor)。<br>所以，上格。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs txt">x0=p*q0+e0+m0<br>xi=p*qi+ei+mi<br>-&gt;<br>x0*qi=p*q0*qi+(e0+m0)*qi<br>xi*q0=p*qi*q0+(ei+mi)*q0<br>两式相减<br>x0*qi-xi*q0=(e0+m0)*qi-(ei+mi)*q0<br></code></pre></td></tr></table></figure><p>我们通过构造上面的格就可以还原出q0，进而求出p。<br>值得一提的是求出来的q0需要abs一下，因为LLL求出来的是最短向量，是有可能为负的，相比之下BKZ求出负值的概率就小一点了，但依旧存在。以及格中的短向量<code>2**(ρ+1)</code>的值在很大程度上并不影响结果，取1都可以。<br>这里给出我复现时的求p的脚本:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sage">Keys=[]<br>B=[[0]*length for i in range(length)]<br>for i in range(length-1):<br>    B[i][i]=Keys[j*2500+0]<br>    B[-1][i]=Keys[j*2500+i+1]<br>B[-1][-1]=k<br>B=matrix(ZZ,B)<br>B_=B.LLL()<br><br>q0=abs(B_[0][-1])//k<br>p=((Keys[j*2500]-Keys[j*2500]%q0)//q0)<br></code></pre></td></tr></table></figure><p>求出p后我们就可以得到<code>s[4:]</code><br>接下来需要求出<code>s[:4]</code><br>这里涉及到random生成固定位数的随机数的方式<br>下面的拼接都是以16进制字符串的形式进行的拼接，不是加法<br>对于32位以下的随机数，比如<code>getrandbits(16)</code>，random会先生成32位的随机数然后截断，只取前16位然后return<br>对于32位以上的随机数，比如<code>getrandbits(64)</code>，random会生成2个32位是随机数，再进行拼接，后生成的随机数拼接在先生成的随机数的前面，即<code>后生成的32位随机数+先生成的32位随机数</code>，对于不是32的倍数的bits的随机数，比如<code>getrandbits(80)</code>，random会先按前面的方法生成64位随机数，再按32位一下的随机数的生成方法来生成16位的随机数，后生成的永远排在先生成的前面，即<code>截断成16位的第3次生成的随机数+32位的第2次生成的随机数+32位的第1次生成的随机数</code><br>所以，得到<code>s[:4]</code>的方法很明确了，通过<code>s[4:]</code>来逆向MT19937，然后再生成一个32位的随机数就是<code>s[:4]</code>了。<br>我复现的时候就是没弄清楚然后调了好久，一直以为<code>s[:4]</code>是最先生成的32位随机数，还找了相关的脚本，这里顺便也贴一下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inv_shift_right</span>(<span class="hljs-params">x:<span class="hljs-built_in">int</span>,bit:<span class="hljs-built_in">int</span>,mask:<span class="hljs-built_in">int</span> = <span class="hljs-number">0xffffffff</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    tmp = x <br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>//bit):<br>        tmp = x ^ tmp &gt;&gt; bit &amp; mask<br>    <span class="hljs-keyword">return</span> tmp<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inv_shift_left</span>(<span class="hljs-params">x:<span class="hljs-built_in">int</span>,bit:<span class="hljs-built_in">int</span>,mask:<span class="hljs-built_in">int</span> = <span class="hljs-number">0xffffffff</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    tmp = x<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>//bit):<br>        tmp = x ^ tmp &lt;&lt; bit &amp; mask<br>    <span class="hljs-keyword">return</span> tmp<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rev_extract</span>(<span class="hljs-params">y:<span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    y = inv_shift_right(y,<span class="hljs-number">18</span>)<br>    y = inv_shift_left(y,<span class="hljs-number">15</span>,<span class="hljs-number">4022730752</span>)<br>    y = inv_shift_left(y,<span class="hljs-number">7</span>,<span class="hljs-number">2636928640</span>)<br>    y = inv_shift_right(y,<span class="hljs-number">11</span>)<br>    <span class="hljs-keyword">return</span> y<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">backtrace_untwist</span>(<span class="hljs-params">cur</span>):<br>    high = <span class="hljs-number">0x80000000</span><br>    low = <span class="hljs-number">0x7fffffff</span><br>    mask = <span class="hljs-number">0x9908b0df</span><br>    state = cur<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">623</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>        tmp = state[i]^state[(i+<span class="hljs-number">397</span>)%<span class="hljs-number">624</span>]<br>        <span class="hljs-comment"># recover Y,tmp = Y</span><br>        <span class="hljs-keyword">if</span> tmp &amp; high == high:<br>            tmp ^= mask<br>            tmp &lt;&lt;= <span class="hljs-number">1</span><br>            tmp |= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            tmp &lt;&lt;=<span class="hljs-number">1</span><br>        <span class="hljs-comment"># recover highest bit</span><br>        res = tmp&amp;high<br>        <span class="hljs-comment"># recover other 31 bits,when i =0,it just use the method again it so beautiful!!!!</span><br>        tmp = state[i-<span class="hljs-number">1</span>]^state[(i+<span class="hljs-number">396</span>)%<span class="hljs-number">624</span>]<br>        <span class="hljs-comment"># recover Y,tmp = Y</span><br>        <span class="hljs-keyword">if</span> tmp &amp; high == high:<br>            tmp ^= mask<br>            tmp &lt;&lt;= <span class="hljs-number">1</span><br>            tmp |= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            tmp &lt;&lt;=<span class="hljs-number">1</span><br>        res |= (tmp)&amp;low<br>        state[i] = res    <br>    <span class="hljs-keyword">return</span> state<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exp_mt19937</span>(<span class="hljs-params">output:<span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(output) == <span class="hljs-number">624</span><br>    cur_stat = [rev_extract(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> output]<br>    <span class="hljs-keyword">return</span> cur_stat<br><br>random.seed(<span class="hljs-number">1</span>)<br>l=[random.getrandbits(<span class="hljs-number">32</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">624</span>)]<br>stat=exp_mt19937(l)<br>stat=backtrace_untwist(stat)<br>r=random.Random()<br>r.setstate((<span class="hljs-number">3</span>, <span class="hljs-built_in">tuple</span>(stat + [<span class="hljs-number">624</span>]), <span class="hljs-literal">None</span>))<br><span class="hljs-keyword">assert</span> r.getrandbits(<span class="hljs-number">32</span>)==l[<span class="hljs-number">0</span>]<br><span class="hljs-comment">#要求l序列之前的值，只需要更改setstate里面的624即可，每减一就是向前推一个</span><br>r.setstate((<span class="hljs-number">3</span>, <span class="hljs-built_in">tuple</span>(stat + [<span class="hljs-number">623</span>]), <span class="hljs-literal">None</span>))<br>r.getrandbits(<span class="hljs-number">32</span>)<br><span class="hljs-keyword">assert</span> r.getrandbits(<span class="hljs-number">32</span>)==l[<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><p>这里提一下，random每生成624个随机数后就会调用一次twist来更新内部的state，也就是说我们向前面逆向每624个随机数就要调用一次backtrace_untwist。不明白的可以自己尝试一下，这里不多说了。<br>好的，我们回到题目中去。<br>刚刚我们做到了逆向MT19937这一步，接下来我们需要的就是用<code>s[4:]</code>来逆向获取MT19937的内部状态，然后再根据这个来得到下一个32位的随机数，就是<code>s[:4]</code>，逆向MT19937的方法我目前知道2个，一个是用randcrack这个库，你只需要提交624个32位的随机数，然后调用<code>predic_getrandbits(32)</code>即可，挺方便的。另一个就是用和上面差不多的脚本，只不过就是不需要调用backtrace_untwist来转换状态了。把exp_mt19937返回的state直接传入r.setstate里即可。<br>这里给出我复现时的脚本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs sage">from Crypto.Util.number import *<br>from hashlib import md5<br>from Crypto.Cipher import AES<br>from random import Random<br><br>def inv_shift_right(x:int,bit:int,mask:int = 0xffffffff) -&gt; int:<br>    tmp = x <br>    for _ in range(32//bit):<br>        tmp = x ^^ tmp &gt;&gt; bit &amp; mask<br>    return tmp<br><br>def inv_shift_left(x:int,bit:int,mask:int = 0xffffffff) -&gt; int:<br>    tmp = x<br>    for _ in range(32//bit):<br>        tmp = x ^^ tmp &lt;&lt; bit &amp; mask<br>    return tmp<br><br>def rev_extract(y:int) -&gt; int:<br>    y = inv_shift_right(y,18)<br>    y = inv_shift_left(y,15,4022730752)<br>    y = inv_shift_left(y,7,2636928640)<br>    y = inv_shift_right(y,11)<br>    return y<br><br>def backtrace_untwist(cur):<br>    high = 0x80000000<br>    low = 0x7fffffff<br>    mask = 0x9908b0df<br>    state = cur<br>    for i in range(623,-1,-1):<br>        tmp = state[i]^^state[(i+397)%624]<br>        # recover Y,tmp = Y<br>        if tmp &amp; high == high:<br>            tmp ^^= mask<br>            tmp &lt;&lt;= 1<br>            tmp |= 1<br>        else:<br>            tmp &lt;&lt;=1<br>        # recover highest bit<br>        res = tmp&amp;high<br>        # recover other 31 bits,when i =0,it just use the method again it so beautiful!!!!<br>        tmp = state[i-1]^^state[(i+396)%624]<br>        # recover Y,tmp = Y<br>        if tmp &amp; high == high:<br>            tmp ^^= mask<br>            tmp &lt;&lt;= 1<br>            tmp |= 1<br>        else:<br>            tmp &lt;&lt;=1<br>        res |= (tmp)&amp;low<br>        state[i] = res    <br>    return state<br><br>def exp_mt19937(output:list) -&gt; int:<br>    assert len(output) == 624<br>    cur_stat = [rev_extract(i) for i in output]<br>    r = Random()<br>    r.setstate((3, tuple([int(i) for i in cur_stat] + [624]), None))<br>    return r<br><br>length=21<br>k=1<br>string=b&#x27;&#x27;<br>for j in range(12):<br>    B=[[0]*length for i in range(length)]<br>    for i in range(length-1):<br>        B[i][i]=Keys[j*2500+0]<br>        B[-1][i]=Keys[j*2500+i+1]<br>    B[-1][-1]=k<br>    B=matrix(ZZ,B)<br>    B_=B.LLL()<br><br>    q0=abs(B_[0][-1])//k<br>    p=((Keys[j*2500]-Keys[j*2500]%q0)//q0)<br>    #p=p+p%2-1<br>    print(p)<br><br>    ilist=[Keys[j*2500+i]%p%256 for i in range(2500)]<br>    r=exp_mt19937([bytes_to_long(bytes(ilist[i:i+4])) for i in range(0,2496,4)][::-1])<br>    s=list(long_to_bytes(r.getrandbits(32)))<br>    __l=[]<br>    for i in range(4):<br>        if s[i]!=0:<br>            m_=ilist[2496+i]*inverse(s[i],0x101)%0x101<br>            __l+=[bin(m_)[2:].zfill(2)]<br>        else:<br>            __l+=[&#x27;00&#x27;]<br>    __l=__l[::-1]<br>    m=long_to_bytes(int(&#x27;&#x27;.join(__l),2))<br>    print(m)<br>    string+=m<br>print(string)<br>print(AES.new(md5(string).digest(),AES.MODE_ECB).decrypt(long_to_bytes(int(cipher,16))))<br></code></pre></td></tr></table></figure><p>官方wp(官方wp里没有对求出来的q取abs):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs sage"># sage<br>__import__(&#x27;os&#x27;).environ[&#x27;TERM&#x27;] = &#x27;xterm&#x27;<br>from sage.all import *<br>from Crypto.Util.number import *<br>from functools import reduce<br>from random import *<br>from pwn import *<br>from Crypto.Util.Padding import unpad<br>from Crypto.Cipher import AES<br>from hashlib import md5<br><br><br>def inv_shift_right(x: int, bit: int, mask: int = 0xffffffff) -&gt; int:<br>    tmp = x<br>    for _ in range(32 // bit):<br>        tmp = x ^ tmp &gt;&gt; bit &amp; mask<br>    return tmp<br><br><br>def inv_shift_left(x: int, bit: int, mask: int = 0xffffffff) -&gt; int:<br>    tmp = x<br>    for _ in range(32 // bit):<br>        tmp = x ^ tmp &lt;&lt; bit &amp; mask<br>    return tmp<br><br><br>def rev_extract(y: int) -&gt; int:<br>    y = inv_shift_right(y, 18)<br>    y = inv_shift_left(y, 15, 4022730752)<br>    y = inv_shift_left(y, 7, 2636928640)<br>    y = inv_shift_right(y, 11)<br>    return y<br><br><br>def exp_mt19937(output: list) -&gt; int:<br>    assert len(output) == 624<br>    cur_stat = [rev_extract(i) for i in output]<br>    r = Random()<br>    r.setstate((3, tuple([int(i) for i in cur_stat] + [624]), None))<br>    return r.getrandbits(32)<br><br><br>io = remote(&#x27;39.106.16.204&#x27;, 24259)<br>io.recvuntil(b&#x27;:&#x27;)<br>aes_cipher = bytes.fromhex(io.recvline().strip().decode())<br>io.sendlineafter(b&#x27;:&#x27;, b&#x27;&#x27;)<br>msg = []<br>for _ in range(30000):<br>    io.recvuntil(b&#x27;[+]&#x27;)<br>    msg.append(int(io.recvline().strip().decode()))<br><br>io.close()<br>msg = [msg[i:i + 2500] for i in range(0, 30000, 2500)]<br><br>d1 = []<br>for dx in range(12):<br>    cp = msg[dx]<br><br>    mt = matrix(ZZ, 21, 21)<br>    for i in range(20):<br>        mt[i, i] = cp[-1]<br>        mt[-1, i] = cp[i]<br>    const = 2 ** 30<br>    mt[-1, -1] = const<br>    mt = mt.LLL()<br><br>    temp = abs(mt[0, -1])<br>    assert temp % const == 0<br><br>    q0 = temp / const<br>    e0 = ZZ(cp[-1] % q0)<br>    p = ZZ((cp[-1] - e0) / q0)<br><br>    d1.append(list(map(lambda x: x % p % 256, cp)))<br><br>d2 = b&#x27;&#x27;<br><br>for dx in range(12):<br>    ran_output = [bytes_to_long(bytes(d1[dx][i:i + 4])) for i in range(0, 2496, 4)]<br>    invmul_key = [pow(i, -1, 0x101) for i in long_to_bytes(exp_mt19937(ran_output[::-1]))]<br><br>    res = []<br>    for i in range(4):<br>        res.append(invmul_key[i] * d1[dx][-4 + i] % 0x101)<br><br>    assert all(0 &lt;= i &lt; 4 for i in res)<br>    res.reverse()<br>    d2 += bytes([reduce(lambda x, y: 4 * x + y, res)])<br><br>print(unpad(AES.new(md5(d2).digest(), AES.MODE_ECB).decrypt(aes_cipher), 16).decode())<br></code></pre></td></tr></table></figure><h2 id="Arcahv"><a href="#Arcahv" class="headerlink" title="Arcahv"></a>Arcahv</h2><p>Delightful.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> urandom,getenv<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LCG</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,seed:<span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-variable language_">self</span>.p = getPrime(<span class="hljs-number">1024</span>)<br>        <span class="hljs-variable language_">self</span>.a = getPrime(<span class="hljs-number">1023</span>)<br>        <span class="hljs-variable language_">self</span>.b = getPrime(<span class="hljs-number">1023</span>)<br>        <span class="hljs-variable language_">self</span>.status = seed<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        ret = <span class="hljs-variable language_">self</span>.status<br>        <span class="hljs-variable language_">self</span>.status = (<span class="hljs-variable language_">self</span>.status * <span class="hljs-variable language_">self</span>.a + <span class="hljs-variable language_">self</span>.b) % <span class="hljs-variable language_">self</span>.p<br>        <span class="hljs-keyword">return</span> ret<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">crystal_trick</span>(<span class="hljs-params">m:<span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>    m = <span class="hljs-built_in">bytearray</span>(m)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(m)):<br>        m[i] = reduce(<span class="hljs-keyword">lambda</span> x,y: x^y^urandom(<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>],m[:i],m[i])<br>    <span class="hljs-keyword">return</span> m<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RSA</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        p = getStrongPrime(<span class="hljs-number">1024</span>)<br>        q = getStrongPrime(<span class="hljs-number">1024</span>)<br>        <span class="hljs-variable language_">self</span>.p = p<br>        <span class="hljs-variable language_">self</span>.N = p * q<br>        <span class="hljs-variable language_">self</span>.e = <span class="hljs-number">65537</span><br>        <span class="hljs-variable language_">self</span>.d = <span class="hljs-built_in">pow</span>(<span class="hljs-variable language_">self</span>.e, -<span class="hljs-number">1</span>, (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">self,m:<span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">pow</span>(m,<span class="hljs-variable language_">self</span>.e,<span class="hljs-variable language_">self</span>.N)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">self,c:<span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">pow</span>(c,<span class="hljs-variable language_">self</span>.d,<span class="hljs-variable language_">self</span>.N) <br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRSA1</span>(<span class="hljs-title class_ inherited__">RSA</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">self,m:<span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>().encrypt(<span class="hljs-built_in">int</span>.from_bytes(m)).to_bytes(<span class="hljs-number">256</span>)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">self,c:<span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>().decrypt(<span class="hljs-built_in">int</span>.from_bytes(c)).to_bytes(<span class="hljs-number">256</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRSA2</span>(<span class="hljs-title class_ inherited__">RSA</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">self,m:<span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">pow</span>(<span class="hljs-built_in">int</span>.from_bytes(m),<span class="hljs-variable language_">self</span>.e,<span class="hljs-variable language_">self</span>.N).to_bytes(<span class="hljs-number">256</span>,<span class="hljs-string">&#x27;little&#x27;</span>)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">self,c:<span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>        m = <span class="hljs-built_in">pow</span>(<span class="hljs-built_in">int</span>.from_bytes(c),<span class="hljs-variable language_">self</span>.d,<span class="hljs-variable language_">self</span>.N).to_bytes(<span class="hljs-number">256</span>,<span class="hljs-string">&#x27;little&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hibiscus is here to trick your decryption result!!&#x27;</span>)<br>        <span class="hljs-keyword">return</span> crystal_trick(m)<br><br>menu = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Welcome to NCTF 2025 arcahv challenge!</span><br><span class="hljs-string"></span><br><span class="hljs-string">--- Menu ---</span><br><span class="hljs-string">[1] View encrypted flag and hint</span><br><span class="hljs-string">[2] Play with the decryption orcale</span><br><span class="hljs-string">[3] Get some random numbers for fun</span><br><span class="hljs-string">[4] Exit</span><br><span class="hljs-string"></span><br><span class="hljs-string">Your Option &gt; &#x27;&#x27;&#x27;</span><br><br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Loading, please wait...&#x27;</span>)<br>    <br>    <span class="hljs-comment"># flag = open(&#x27;flag.txt&#x27;).read().strip().encode()</span><br>    flag = getenv(<span class="hljs-string">&#x27;FLAG&#x27;</span>).encode()<br>    attempts = <span class="hljs-number">75</span><br>    r1 = MyRSA1()<br>    r2 = MyRSA2()<br>    hint1 = r2.encrypt(r1.p.to_bytes(<span class="hljs-number">128</span>))<br><br>    key = urandom(<span class="hljs-number">16</span>)<br>    hint2 = AES.new(key,AES.MODE_ECB).encrypt(r1.N.to_bytes(<span class="hljs-number">256</span>))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">flag_and_hint</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Encrypted flag: <span class="hljs-subst">&#123;r1.encrypt(flag).<span class="hljs-built_in">hex</span>()&#125;</span>&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Hint1: <span class="hljs-subst">&#123;hint1.<span class="hljs-built_in">hex</span>()&#125;</span>&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Hint2: <span class="hljs-subst">&#123;hint2.<span class="hljs-built_in">hex</span>()&#125;</span>&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">rsachal</span>(): <br>        <span class="hljs-keyword">global</span> attempts<br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Since you didn&#x27;t v Hibiscus 50 on crazy thursday, Hibiscus decided to do some trick on your decryption result!&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Your pubkey:(<span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(r2.N)[<span class="hljs-number">2</span>:]&#125;</span>,<span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(r2.e)[<span class="hljs-number">2</span>:]&#125;</span>)&#x27;</span>)<br><br>        <span class="hljs-keyword">while</span> attempts &gt; <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Do you still want to try decryption(y/[n])?&#x27;</span>) != <span class="hljs-string">&#x27;y&#x27;</span>:<br>                <span class="hljs-keyword">break</span><br><br>            c = <span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-built_in">input</span>(<span class="hljs-string">f&#x27;You have <span class="hljs-subst">&#123;attempts&#125;</span> remaining access to decryption orcale!\nYour ciphertext(in hex):&#x27;</span>))<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Result: <span class="hljs-subst">&#123;r2.decrypt(c).<span class="hljs-built_in">hex</span>()&#125;</span>&#x27;</span>)<br>            attempts -= <span class="hljs-number">1</span><br>        <br>        <span class="hljs-keyword">if</span> attempts == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Unfortunately, you are out of decryption attempts! Come back again on nctf2026 ~&#x27;</span>)<br><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lcgchal</span>():<br>        lcg = LCG(<span class="hljs-built_in">int</span>.from_bytes(key))<br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Tempering with LCG generator, please wait...&#x27;</span>)<br>        <span class="hljs-keyword">while</span> urandom(<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>] &amp; <span class="hljs-number">0xff</span>:<br>            lcg.<span class="hljs-built_in">next</span>()<br>        <br>        hexnums = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">hex</span>(lcg.<span class="hljs-built_in">next</span>())[<span class="hljs-number">2</span>:] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>))<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(hexnums) % <span class="hljs-number">16</span>:<br>            hexnums = hexnums.zfill((<span class="hljs-built_in">len</span>(hexnums) // <span class="hljs-number">16</span> + <span class="hljs-number">1</span>) * <span class="hljs-number">16</span>)<br>        <br>        idx = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Do you want another unsigned long long number(y/[n])?&#x27;</span>) == <span class="hljs-string">&#x27;y&#x27;</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(hexnums[idx:idx+<span class="hljs-number">16</span>]),<span class="hljs-number">16</span>))<br>            idx = (idx + <span class="hljs-number">16</span>) % <span class="hljs-built_in">len</span>(hexnums)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">bye</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hope you have fun during the challenge XD:)&#x27;</span>)<br>        exit(<span class="hljs-number">0</span>)<br><br>    fundc = &#123;<span class="hljs-number">1</span>:flag_and_hint,<span class="hljs-number">2</span>:rsachal,<span class="hljs-number">3</span>:lcgchal,<span class="hljs-number">4</span>:bye&#125;<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        opt = <span class="hljs-built_in">input</span>(menu)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(opt) == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> opt <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;1234&#x27;</span>:<br>            opt = <span class="hljs-string">&#x27;4&#x27;</span><br>        fundc[<span class="hljs-built_in">int</span>(opt)]()<br></code></pre></td></tr></table></figure><p>很麻烦，感觉很麻烦。感觉可以分成两道题了。<br>wp里也说了这是大杂烩，你能看到RSA LSB Orcale,LCG,Coppersmith。<br>这题比赛时也是只有大致的思路，具体攻击不会。<br>题目大致可以分成2部分，第一部分的RSA，通过RSA LSB Orcale来获得r1.p。<br>第二部分就是LCG，LCG生成的数的16进制的长度基本可以认为长度是256，有可能会出现255长度的情况，但只要多试一下就可以了。得到数后就是套公式了。<br>最后解个RSA就可以得到flag了<br>那么这题主要就是第一部分的RSA LSB Orcale了。<br>这个我复现的时候也是想了很久，有些地方wp里没有指出来。先把wp放出来。<br><img src="/2025/03/29/2025-3-22NCTF/6.png"><br>一点点来看吧。<br>首先介绍一下乘法同态，说白了就是你将2个密文相乘，再解密，明文也会是2个明文相乘。类似的还有加法同态，只是把乘法换成了加法，你将2个密文相加，再解密，明文也会是2个明文相加。同时具有加法同态和乘法同态的，我们称之为全同态，也就是上面的FHE。<br>很明显，RSA具有乘法同态，这个稍微推一下就能出来。<br>那么我们就可以通过改变密文来使解出来的明文乘以一个确定的数。<br>如果我们将密文乘C*<em>e，那么解出来的明文将会是原来的C倍。<br>因为这题我们可以得到明文mod 256的结果(256位以上的都被crystal_trick改变了，没办法得到)，所以我们取C为256。<br>因为m是小于n的，所以我们可以得到256</em>m%256&#x3D;0，这个在C较小的时候是恒成立的。但当C较大时，也就是说存在一个数a，<code>C=256**a</code>，使得<code>m*C&gt;n</code>，那么这时候就存在等式<code>m&#39;=C*m-k*n</code>(m’是更改密文后解出来的明文的值)，其中k是正数。我们只能得到模256下的值，所以我们对两边模256，得到<code>m&#39;=-k*n (mod 256)</code>，易得<code>k=-m&#39;*n**(-1) (mod 256)</code><br>同时我们要明确一点，这里<code>C=256**a</code>的a是使得<code>C*m&gt;n</code>的最小的a，也就是说k不会很大，我们可以认为<code>k&lt;256</code>，也就是说我们可以认为在模256下求出来的k就是k。<br>所以，我们可以回到最开始的等式<code>C*m=m&#39;+k*n</code>，<code>m&#39;&lt;n</code>，那么<code>C*m</code>就在<code>k*n</code>和<code>(k+1)*n</code>之间。即<code>k*n/256**a&lt;m&lt;(k+1)*n/256**a</code>，我们就得到了m的一个范围。<br>我们令<code>a=a+1</code>，即密文再乘一个<code>256**e</code>，即在<code>m&#39;=C*m-k*n</code>两边再乘以一个256，我们可以得到<code>256*m&#39;=256*C*m-256*k*n</code>，其中<code>256*m&#39;</code>是有可能大于n的，而解密出来<code>m&#39;&#39;</code>是小于n的，有等式<code>m&#39;&#39;=256*m&#39;-k2*n</code>，<code>m&#39;&#39;+k2*n=256*m&#39;</code>，代回去得到<code>m&#39;&#39;+k2*n=256*C*m-256*k1*n</code>，<code>m&#39;&#39;=256**(a+1)*m-256*k1*n-k2*n</code>，<code>m&#39;&#39;=256**(a+1)*m-(256*k1+k2)*n</code>，重复上述步骤后能得到<code>256*k1+k2 mod 256</code>的值，即k2，k1前面已经得到，所以我们可以再次缩小m的范围，<code>(256*k1+k2)*n/256**a&lt;m&lt;((256*k1+k2)+1)*n/256**a</code>。这样每次都能把m的范围缩小<code>1/256</code>，最后我们可以得到一个足够小的范围，其中左边界和右边界的高600位是相同的，也就是说我们获得了<code>r1.p</code>的高600位信息，在后面LCG里得到了n后用coppersmith可以很容易求出<code>r1.p</code>。<br>下面我重新整理一下推理的过程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs math">取一个a，C=256**a，使得C*m&gt;n<br>m&#x27;是解密后的明文<br>m&#x27;=C*m-k*n=256**a*m-k*n<br>m&#x27;=-k*n (mod n)<br>k=-m&#x27;*n**(-1) (mod 256)<br>k=-(m&#x27; mod 256)*n**(-1) (mod 256)<br>再看等式256**a*m=m&#x27;+k*n<br>=&gt;k*n/256**a&lt;m&lt;(k+1)*n/256**a<br><br>256*m&#x27;=256*C*m-256*k*n<br>其中:256*m&#x27;=m&quot;+k2*n<br>m&quot;+k2*n=256*C*m-256*k1*n<br>m&quot;=256*C*m-256*k1*n-k2*n<br>m&quot;=256*C*m-(256*k1+k2)*n<br>m&quot;=-(256*k1+k2)*n (mod 256)<br>256*k1+k2=-m&quot;*n**(-1) (mod 256)<br>k2=-(m&quot; mod 256)*n**(-1) (mod 256)<br>再看等式256**(a+1)*m=m&quot;+(256*k1+k2)*n<br>=&gt;(256*k1+k2)*n/256**(a+1)&lt;m&lt;((256*k1+k2)+1)*n/256**(a+1)<br></code></pre></td></tr></table></figure><p>这里给出我复现的脚本:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> urandom,getenv<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">crystal_trick</span>(<span class="hljs-params">m:<span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>    m = <span class="hljs-built_in">bytearray</span>(m)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(m)):<br>        m[i] = reduce(<span class="hljs-keyword">lambda</span> x,y: x^y^urandom(<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>],m[:i],m[i])<br>    <span class="hljs-keyword">return</span> m<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RSA</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        p = getStrongPrime(<span class="hljs-number">1024</span>)<br>        q = getStrongPrime(<span class="hljs-number">1024</span>)<br>        <span class="hljs-variable language_">self</span>.p = p<br>        <span class="hljs-variable language_">self</span>.N = p * q<br>        <span class="hljs-variable language_">self</span>.e = <span class="hljs-number">65537</span><br>        <span class="hljs-variable language_">self</span>.d = <span class="hljs-built_in">pow</span>(<span class="hljs-variable language_">self</span>.e, -<span class="hljs-number">1</span>, (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">self,m:<span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">pow</span>(m,<span class="hljs-variable language_">self</span>.e,<span class="hljs-variable language_">self</span>.N)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">self,c:<span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">pow</span>(c,<span class="hljs-variable language_">self</span>.d,<span class="hljs-variable language_">self</span>.N) <br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRSA1</span>(<span class="hljs-title class_ inherited__">RSA</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">self,m:<span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>().encrypt(<span class="hljs-built_in">int</span>.from_bytes(m)).to_bytes(<span class="hljs-number">256</span>)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">self,c:<span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>().decrypt(<span class="hljs-built_in">int</span>.from_bytes(c)).to_bytes(<span class="hljs-number">256</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRSA2</span>(<span class="hljs-title class_ inherited__">RSA</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">self,m:<span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">pow</span>(<span class="hljs-built_in">int</span>.from_bytes(m),<span class="hljs-variable language_">self</span>.e,<span class="hljs-variable language_">self</span>.N).to_bytes(<span class="hljs-number">256</span>,<span class="hljs-string">&#x27;little&#x27;</span>)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">self,c:<span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>        m = <span class="hljs-built_in">pow</span>(<span class="hljs-built_in">int</span>.from_bytes(c),<span class="hljs-variable language_">self</span>.d,<span class="hljs-variable language_">self</span>.N).to_bytes(<span class="hljs-number">256</span>,<span class="hljs-string">&#x27;little&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hibiscus is here to trick your decryption result!!&#x27;</span>)<br>        <span class="hljs-keyword">return</span> crystal_trick(m)<br><br><br>attempts = <span class="hljs-number">75</span><br>r1 = MyRSA1()<br>r2 = MyRSA2()<br><br>hint1 = r2.encrypt(r1.p.to_bytes(<span class="hljs-number">128</span>))<br><br>e=r2.e<br>n=r2.N<br><br>c=bytes_to_long(hint1[::-<span class="hljs-number">1</span>])<br>c=c*<span class="hljs-built_in">pow</span>(<span class="hljs-built_in">pow</span>(<span class="hljs-number">256</span>,e,n),<span class="hljs-number">127</span>,n)%n<br>k=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(attempts):<br>    c=c*<span class="hljs-built_in">pow</span>(<span class="hljs-number">256</span>,e,n)<br>    p=bytes_to_long(r2.decrypt(long_to_bytes(c))[::-<span class="hljs-number">1</span>])<br>    k=k*<span class="hljs-number">256</span>+(-inverse(n,<span class="hljs-number">256</span>)*p%<span class="hljs-number">256</span>)<br>    <br><span class="hljs-built_in">print</span>(k*n&lt;=r1.p*<span class="hljs-number">256</span>**<span class="hljs-number">202</span>&lt;=(k+<span class="hljs-number">1</span>)*n)<br><span class="hljs-comment">#True</span><br><br>left=k*n//<span class="hljs-number">256</span>**<span class="hljs-number">202</span><br><span class="hljs-built_in">print</span>(left)<br><span class="hljs-comment">#130885664743289933041962413621767865441591321317558885014199074466855996631539798687727640403945760110268413946434133511019400476370469967300594876528558048910115238902971140792455911038756167472065922832612114808088205280482352816705878339397975785484133224023653016197364452594597283624017262470813673995009</span><br><br>right=(k+<span class="hljs-number">1</span>)*n//<span class="hljs-number">256</span>**<span class="hljs-number">202</span><br>left=<span class="hljs-built_in">bin</span>(left)[<span class="hljs-number">2</span>:]<br>right=<span class="hljs-built_in">bin</span>(right)[<span class="hljs-number">2</span>:]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(left)):<br>    <span class="hljs-keyword">if</span> left[i]!=right[i]:<br>        <span class="hljs-built_in">print</span>(i+<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">1024</span>-i-<span class="hljs-number">1</span>)<br><span class="hljs-comment">#433</span><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sage">p=130885664743289933041962413621767865441591321317558885014199074466855996631539798687727640403945760110268413946434133511019400476370469967300594876528558048910115238902971140792455911038756167472065922832612114808088205280482352816705878339397975785484133224023653016197364452594597283624017262470813673995009<br>n=22404304571663619533801749171851644355131031548896050596784492860131952108418133799362203562452927755672086256671456886275374200290455900981573098592802256957759447612198108603737786271333540992054310231142238002312019309261407284535898443221193784771270772676264595891893528938890406282960473610037440992613094585895090383508341010089438083413545705058441072109863024324482039164643863226495180994062873842889196325037541415051411994025140102929000241053770118516405280808187203883977272655025293179259881406034169473289536962089680084335406639749490203495720187657339642405381585747883680749867717205896873223051129<br><br>bit=433<br>R.&lt;x&gt;=PolynomialRing(Zmod(n))<br>f=p+x<br>f=f.monic()<br>roots=f.small_roots(X=2^bit,beta=0.4)<br>print(roots)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs result">[6941661959252282301910494977227763113291421486720572265514320326916996337372195724367188176400540935900844813645952855916156047100]<br></code></pre></td></tr></table></figure><p>上面我只是假设已经得到n了。<br>所以接下来我们来逆向LCG来得到n<br>自己稍微改改源码把LCG的5个数的hex给print出来，你会发现在大部分情况下的长度都是256，只有少数情况下会遇到长度是255的，遇到这种情况直接重新获取一下就好了。之后就是套公式恢复参数了。<br>这里直接贴wp了<br><img src="/2025/03/29/2025-3-22NCTF/7.png"><br>得到了n后就可以用上面的coppersmith解出p，然后解RSA1就可以了。<br>官方wp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs sage">#sage<br>__import__(&#x27;os&#x27;).environ[&#x27;TERM&#x27;] = &#x27;xterm&#x27;<br><br>from sage.all import *<br>from pwn import *<br>from Crypto.Util.number import *<br>from Crypto.Cipher import AES<br><br><br>def hexify_send(num: int) -&gt; bytes:<br>    return long_to_bytes(num).hex().encode()<br><br>io = remote(&#x27;39.106.16.204&#x27;, 28575)<br># io = process([&#x27;python3&#x27;, &#x27;arcahv.py&#x27;])<br><br>io.sendlineafter(b&#x27;&gt;&#x27;, b&#x27;1&#x27;)<br><br>io.recvuntil(b&#x27;:&#x27;)<br>enc_flag = int(io.recvline().strip().decode(), 16)<br>io.recvuntil(b&#x27;:&#x27;)<br>enc_hint = int.from_bytes(bytes.fromhex(io.recvline().strip().decode()), &#x27;little&#x27;)<br>io.recvuntil(b&#x27;:&#x27;)<br>enc_hint2 = bytes.fromhex(io.recvline().strip().decode())<br><br># RSA LSB Orcale<br><br>m = enc_hint<br>omit_count = 127<br>io.sendlineafter(b&#x27;&gt;&#x27;, b&#x27;2&#x27;)<br>io.recvuntil(b&#x27;(&#x27;)<br>rn = int(io.recvuntil(b&#x27;,&#x27;, drop=True).strip().decode(), 16)<br>re = int(io.recvuntil(b&#x27;)&#x27;, drop=True).strip().decode(), 16)<br><br>upper_bound = reduce(lambda x, y: floor(x / 256), range(omit_count), rn)<br><br>lower_bound = 0<br>single_mul = pow(256, re, rn)<br>inv = pow(rn, -1, 256)<br><br>m = m * pow(single_mul, omit_count, rn) % rn<br><br>for i in range(75):<br>    m = int(m * single_mul % rn)<br>    io.sendlineafter(b&#x27;?&#x27;, b&#x27;y&#x27;)<br>    io.sendlineafter(b&#x27;:&#x27;, hexify_send(m))<br>    io.recvuntil(b&#x27;:&#x27;)<br>    this = int(io.recvline().strip().decode()[:2], 16)<br>    k = int(-this * inv % 256)<br>    ttl = (upper_bound - lower_bound) / 256<br>    lower_bound += ceil(k * ttl)<br>    upper_bound = lower_bound + floor(ttl)<br><br>res_pp = lower_bound<br><br># LCG<br><br>io.sendlineafter(b&#x27;&gt;&#x27;, b&#x27;3&#x27;)<br>ls = []<br>for _ in range(80):<br>    io.sendlineafter(b&#x27;?&#x27;, b&#x27;y&#x27;)<br>    ls.append(int(io.recvline().strip().decode()))<br><br><br>hexstr = &#x27;&#x27;.join(hex(i)[2:].zfill(16) for i in ls)<br>lcgnums = [int(hexstr[i:i + 256], 16) for i in range(0, len(hexstr), 256)]<br><br><br>A = [lcgnums[i + 1] - lcgnums[i] for i in range(4)]<br>p = gcd(A[1] ** 2 - A[2] * A[0], A[2] ** 2 - A[3] * A[1])<br><br>if not isPrime(p):<br>    p = factor(p)[-1][0]<br>assert isPrime(p)<br><br>a = int(A[1] * int(pow(A[0], -1, p)) % p)<br>b = int((lcgnums[1] - a * lcgnums[0]) % p)<br><br>cur = Zmod(p)(lcgnums[0])<br>count = 0<br>while int(cur).bit_length() &gt; 128:<br>    cur = (cur - b) * pow(a, -1, p)<br>    count += 1<br><br>key = int(cur).to_bytes(16, &#x27;big&#x27;)<br>res_n = int.from_bytes(AES.new(key, AES.MODE_ECB).decrypt(enc_hint2), &#x27;big&#x27;)<br><br># Coppersmith<br>P.&lt;x&gt; = Zmod(res_n)[]<br>rt = (res_pp + x).small_roots(X=2 ** 453, beta=0.4)[0]<br><br>p0 = int(res_pp + rt)<br><br>assert res_n % p0 == 0<br>q0 = res_n // p0<br>d0 = int(pow(65537, -1, (p0 - 1) * (q0 - 1)))<br>print(long_to_bytes(int(pow(enc_flag, d0, res_n))))<br></code></pre></td></tr></table></figure><p>至此，三到题已经全部复现。剩下还有三题应该不会去复现了，我也没有去做过。<br>总得来说这次的NCTF的强度还是有点高的，内容也是非常的多。<br>那么就这样吧。<br><img src="/2025/03/29/2025-3-22NCTF/8.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>crypto</category>
      
      <category>NCTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
      <tag>RSA</tag>
      
      <tag>NCTF</tag>
      
      <tag>LCG</tag>
      
      <tag>ECDSA</tag>
      
      <tag>格</tag>
      
      <tag>FHE</tag>
      
      <tag>MT19937</tag>
      
      <tag>RSA LSB Orcale</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2025.2.3hgame</title>
    <link href="/2025/02/21/2025-2-3hgame/"/>
    <url>/2025/02/21/2025-2-3hgame/</url>
    
    <content type="html"><![CDATA[<h1 id="2025-2-3hgame"><a href="#2025-2-3hgame" class="headerlink" title="2025.2.3hgame"></a>2025.2.3hgame</h1><p>是 <strong>2025.2.3hgame</strong> 哒！</p><h2 id="week1"><a href="#week1" class="headerlink" title="week1"></a>week1</h2><h3 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h3><h4 id="suprimeRSA"><a href="#suprimeRSA" class="headerlink" title="suprimeRSA"></a>suprimeRSA</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> prime<br><br>FLAG=<span class="hljs-string">b&#x27;hgame&#123;xxxxxxxxxxxxxxxxxx&#125;&#x27;</span><br>e=<span class="hljs-number">0x10001</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">primorial</span>(<span class="hljs-params">num</span>):<br>    result = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, num + <span class="hljs-number">1</span>):<br>        result *= prime(i)<br>    <span class="hljs-keyword">return</span> result<br>M=primorial(random.choice([<span class="hljs-number">39</span>,<span class="hljs-number">71</span>,<span class="hljs-number">126</span>]))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_key</span>():<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        k = getPrime(random.randint(<span class="hljs-number">20</span>,<span class="hljs-number">40</span>))<br>        a = getPrime(random.randint(<span class="hljs-number">20</span>,<span class="hljs-number">60</span>))<br>        p = k * M + <span class="hljs-built_in">pow</span>(e, a, M)<br>        <span class="hljs-keyword">if</span> isPrime(p):<br>            <span class="hljs-keyword">return</span> p<br><br>p,q=gen_key(),gen_key()<br>n=p*q<br>m=bytes_to_long(FLAG)<br>enc=<span class="hljs-built_in">pow</span>(m,e,n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;n=&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;enc=&#125;</span>&#x27;</span>)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">n=787190064146025392337631797277972559696758830083248285626115725258876808514690830730702705056550628756290183000265129340257928314614351263713241</span><br><span class="hljs-string">enc=365164788284364079752299551355267634718233656769290285760796137651769990253028664857272749598268110892426683253579840758552222893644373690398408</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>直接上ROCA<br>我是照着这篇博客来的<br><a href="https://blog.csdn.net/qq_51999772/article/details/123146784">GKCTF2020_Crypto_复现</a><br>这里也贴一下博客里的脚本<br>脚本里的M_prime不需要换成题目里的M</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs sage"><br>from sage.all import *<br>from tqdm import tqdm<br><br>def solve(M, n, a, m):<br>    # I need to import it in the function otherwise multiprocessing doesn&#x27;t find it in its context<br>    from sage_functions import coppersmith_howgrave_univariate<br><br>    base = int(65537)<br>    # the known part of p: 65537^a * M^-1 (mod N)<br>    known = int(pow(base, a, M) * inverse_mod(M, n))<br>    # Create the polynom f(x)<br>    F = PolynomialRing(Zmod(n), implementation=&#x27;NTL&#x27;, names=(&#x27;x&#x27;,))<br>    (x,) = F._first_ngens(1)<br>    pol = x + known<br>    beta = 0.1<br>    t = m+1<br>    # Upper bound for the small root x0<br>    XX = floor(2 * n**0.5 / M)<br>    # Find a small root (x0 = k) using Coppersmith&#x27;s algorithm<br>    roots = coppersmith_howgrave_univariate(pol, n, beta, m, t, XX)<br>    # There will be no roots for an incorrect guess of a.<br>    for k in roots:<br>        # reconstruct p from the recovered k<br>        p = int(k*M + pow(base, a, M))<br>        if n%p == 0:<br>            return p, n//p<br><br>def roca(n):<br><br>    keySize = n.bit_length()<br><br>    if keySize &lt;= 960:<br>        M_prime = 0x1b3e6c9433a7735fa5fc479ffe4027e13bea<br>        m = 5<br><br>    elif 992 &lt;= keySize &lt;= 1952:<br>        M_prime = 0x24683144f41188c2b1d6a217f81f12888e4e6513c43f3f60e72af8bd9728807483425d1e<br>        m = 4<br>        print(&quot;Have you several days/months to spend on this ?&quot;)<br><br>    elif 1984 &lt;= keySize &lt;= 3936:<br>        M_prime = 0x16928dc3e47b44daf289a60e80e1fc6bd7648d7ef60d1890f3e0a9455efe0abdb7a748131413cebd2e36a76a355c1b664be462e115ac330f9c13344f8f3d1034a02c23396e6<br>        m = 7<br>        print(&quot;You&#x27;ll change computer before this scripts ends...&quot;)<br><br>    elif 3968 &lt;= keySize &lt;= 4096:<br>        print(&quot;Just no.&quot;)<br>        return None<br><br>    else:<br>        print(&quot;Invalid key size: &#123;&#125;&quot;.format(keySize))<br>        return None<br><br>    a3 = Zmod(M_prime)(n).log(65537)<br>    order = Zmod(M_prime)(65537).multiplicative_order()<br>    inf = a3 // 2<br>    sup = (a3 + order) // 2<br><br>    # Search 10 000 values at a time, using multiprocess<br>    # too big chunks is slower, too small chunks also<br>    chunk_size = 10000<br>    for inf_a in tqdm(range(inf, sup, chunk_size)):<br>        # create an array with the parameter for the solve function<br>        inputs = [((M_prime, n, a, m), &#123;&#125;) for a in range(inf_a, inf_a+chunk_size)]<br>        # the sage builtin multiprocessing stuff<br>        from sage.parallel.multiprocessing_sage import parallel_iter<br>        from multiprocessing import cpu_count<br><br>        for k, val in parallel_iter(cpu_count(), solve, inputs):<br>            if val:<br>                p = val[0]<br>                q = val[1]<br>                print(&quot;found factorization:\np=&#123;&#125;\nq=&#123;&#125;&quot;.format(p, q))<br>                return val<br><br>if __name__ == &quot;__main__&quot;:<br>    # Normal values<br>    #p = 88311034938730298582578660387891056695070863074513276159180199367175300923113<br>    #q = 122706669547814628745942441166902931145718723658826773278715872626636030375109<br>    #a = 551658, interval = [475706, 1076306]<br>    # won&#x27;t find if beta=0.5<br>    # p = 80688738291820833650844741016523373313635060001251156496219948915457811770063<br>    # q = 69288134094572876629045028069371975574660226148748274586674507084213286357069<br>    # #a = 176170, interval = [171312, 771912]<br>    # n = p*q<br>    n = 15518961041625074876182404585394098781487141059285455927024321276783831122168745076359780343078011216480587575072479784829258678691739<br>    # For the test values chosen, a is quite close to the minimal value so the search is not too long<br>    roca(n)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs sage"><br>from sage.all_cmdline import *<br><br>def coppersmith_howgrave_univariate(pol, modulus, beta, mm, tt, XX):<br>    &quot;&quot;&quot;<br>    Taken from https://github.com/mimoo/RSA-and-LLL-attacks/blob/master/coppersmith.sage<br>    Coppersmith revisited by Howgrave-Graham<br><br>    finds a solution if:<br>    * b|modulus, b &gt;= modulus^beta , 0 &lt; beta &lt;= 1<br>    * |x| &lt; XX<br>    More tunable than sage&#x27;s builtin coppersmith method, pol.small_roots()<br>    &quot;&quot;&quot;<br>    #<br>    # init<br>    #<br>    dd = pol.degree()<br>    nn = dd * mm + tt<br><br>    #<br>    # checks<br>    #<br>    if not 0 &lt; beta &lt;= 1:<br>        raise ValueError(&quot;beta should belongs in [0, 1]&quot;)<br><br>    if not pol.is_monic():<br>        raise ArithmeticError(&quot;Polynomial must be monic.&quot;)<br><br>    #<br>    # calculate bounds and display them<br>    #<br>    &quot;&quot;&quot;<br>    * we want to find g(x) such that ||g(xX)|| &lt;= b^m / sqrt(n)<br><br>    * we know LLL will give us a short vector v such that:<br>    ||v|| &lt;= 2^((n - 1)/4) * det(L)^(1/n)<br><br>    * we will use that vector as a coefficient vector for our g(x)<br><br>    * so we want to satisfy:<br>    2^((n - 1)/4) * det(L)^(1/n) &lt; N^(beta*m) / sqrt(n)<br><br>    so we can obtain ||v|| &lt; N^(beta*m) / sqrt(n) &lt;= b^m / sqrt(n)<br>    (it&#x27;s important to use N because we might not know b)<br>    &quot;&quot;&quot;<br>    #<br>    # Coppersmith revisited algo for univariate<br>    #<br><br>    # change ring of pol and x<br>    polZ = pol.change_ring(ZZ)<br>    x = polZ.parent().gen()<br><br>    # compute polynomials<br>    gg = []<br>    for ii in range(mm):<br>        for jj in range(dd):<br>            gg.append((x * XX) ** jj * modulus ** (mm - ii) * polZ(x * XX) ** ii)<br>    for ii in range(tt):<br>        gg.append((x * XX) ** ii * polZ(x * XX) ** mm)<br><br>    # construct lattice B<br>    BB = Matrix(ZZ, nn)<br><br>    for ii in range(nn):<br>        for jj in range(ii + 1):<br>            BB[ii, jj] = gg[ii][jj]<br><br>    BB = BB.LLL()<br><br>    # transform shortest vector in polynomial<br>    new_pol = 0<br>    for ii in range(nn):<br>        new_pol += x ** ii * BB[0, ii] / XX ** ii<br><br>    # factor polynomial<br>    potential_roots = new_pol.roots()<br><br>    # test roots<br>    roots = []<br>    for root in potential_roots:<br>        if root[0].is_integer():<br>            result = polZ(ZZ(root[0]))<br>            if gcd(modulus, result) &gt;= modulus ** beta:<br>                roots.append(ZZ(root[0]))<br>    return roots<br></code></pre></td></tr></table></figure><p>分解出p,q后直接正常RSA解密即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs flag">hgame&#123;ROCA_ROCK_and_ROll!&#125;<br></code></pre></td></tr></table></figure><h4 id="ezBag"><a href="#ezBag" class="headerlink" title="ezBag"></a>ezBag</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br><span class="hljs-keyword">from</span> secrets <span class="hljs-keyword">import</span> flag<br><br><span class="hljs-built_in">list</span> = []<br>bag = []<br>p=random.getrandbits(<span class="hljs-number">64</span>)<br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">bin</span>(p)[<span class="hljs-number">2</span>:])==<span class="hljs-number">64</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    t = p<br>    a=[getPrime(<span class="hljs-number">32</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>)]<br>    b=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>        temp=t%<span class="hljs-number">2</span><br>        b+=temp*i<br>        t=t&gt;&gt;<span class="hljs-number">1</span><br>    <span class="hljs-built_in">list</span>.append(a)<br>    bag.append(b)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;list=<span class="hljs-subst">&#123;<span class="hljs-built_in">list</span>&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;bag=<span class="hljs-subst">&#123;bag&#125;</span>&#x27;</span>)<br><br>key = hashlib.sha256(<span class="hljs-built_in">str</span>(p).encode()).digest()<br>cipher = AES.new(key, AES.MODE_ECB)<br>flag = pad(flag,<span class="hljs-number">16</span>)<br>ciphertext = cipher.encrypt(flag)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;ciphertext=<span class="hljs-subst">&#123;ciphertext&#125;</span>&quot;</span>)<br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">list=[[2826962231, 3385780583, 3492076631, 3387360133, 2955228863, 2289302839, 2243420737, 4129435549, 4249730059, 3553886213, 3506411549, 3658342997, 3701237861, 4279828309, 2791229339, 4234587439, 3870221273, 2989000187, 2638446521, 3589355327, 3480013811, 3581260537, 2347978027, 3160283047, 2416622491, 2349924443, 3505689469, 2641360481, 3832581799, 2977968451, 4014818999, 3989322037, 4129732829, 2339590901, 2342044303, 3001936603, 2280479471, 3957883273, 3883572877, 3337404269, 2665725899, 3705443933, 2588458577, 4003429009, 2251498177, 2781146657, 2654566039, 2426941147, 2266273523, 3210546259, 4225393481, 2304357101, 2707182253, 2552285221, 2337482071, 3096745679, 2391352387, 2437693507, 3004289807, 3857153537, 3278380013, 3953239151, 3486836107, 4053147071], [2241199309, 3658417261, 3032816659, 3069112363, 4279647403, 3244237531, 2683855087, 2980525657, 3519354793, 3290544091, 2939387147, 3669562427, 2985644621, 2961261073, 2403815549, 3737348917, 2672190887, 2363609431, 3342906361, 3298900981, 3874372373, 4287595129, 2154181787, 3475235893, 2223142793, 2871366073, 3443274743, 3162062369, 2260958543, 3814269959, 2429223151, 3363270901, 2623150861, 2424081661, 2533866931, 4087230569, 2937330469, 3846105271, 3805499729, 4188683131, 2804029297, 2707569353, 4099160981, 3491097719, 3917272979, 2888646377, 3277908071, 2892072971, 2817846821, 2453222423, 3023690689, 3533440091, 3737441353, 3941979749, 2903000761, 3845768239, 2986446259, 3630291517, 3494430073, 2199813137, 2199875113, 3794307871, 2249222681, 2797072793], [4263404657, 3176466407, 3364259291, 4201329877, 3092993861, 2771210963, 3662055773, 3124386037, 2719229677, 3049601453, 2441740487, 3404893109, 3327463897, 3742132553, 2833749769, 2661740833, 3676735241, 2612560213, 3863890813, 3792138377, 3317100499, 2967600989, 2256580343, 2471417173, 2855972923, 2335151887, 3942865523, 2521523309, 3183574087, 2956241693, 2969535607, 2867142053, 2792698229, 3058509043, 3359416111, 3375802039, 2859136043, 3453019013, 3817650721, 2357302273, 3522135839, 2997389687, 3344465713, 2223415097, 2327459153, 3383532121, 3960285331, 3287780827, 4227379109, 3679756219, 2501304959, 4184540251, 3918238627, 3253307467, 3543627671, 3975361669, 3910013423, 3283337633, 2796578957, 2724872291, 2876476727, 4095420767, 3011805113, 2620098961], [2844773681, 3852689429, 4187117513, 3608448149, 2782221329, 4100198897, 3705084667, 2753126641, 3477472717, 3202664393, 3422548799, 3078632299, 3685474021, 3707208223, 2626532549, 3444664807, 4207188437, 3422586733, 2573008943, 2992551343, 3465105079, 4260210347, 3108329821, 3488033819, 4092543859, 4184505881, 3742701763, 3957436129, 4275123371, 3307261673, 2871806527, 3307283633, 2813167853, 2319911773, 3454612333, 4199830417, 3309047869, 2506520867, 3260706133, 2969837513, 4056392609, 3819612583, 3520501211, 2949984967, 4234928149, 2690359687, 3052841873, 4196264491, 3493099081, 3774594497, 4283835373, 2753384371, 2215041107, 4054564757, 4074850229, 2936529709, 2399732833, 3078232933, 2922467927, 3832061581, 3871240591, 3526620683, 2304071411, 3679560821]]</span><br><span class="hljs-string">bag=[123342809734, 118191282440, 119799979406, 128273451872]</span><br><span class="hljs-string">ciphertext=b&#x27;\x1d6\xcc&#125;\x07\xfa7G\xbd\x01\xf0P4^Q&quot;\x85\x9f\xac\x98\x8f#\xb2\x12\xf4+\x05`\x80\x1a\xfa !\x9b\xa5\xc7g\xa8b\x89\x93\x1e\xedz\xd2M;\xa2&#x27;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>很明显的背包问题的多子集和变式，照着A Gentle Tutorial for Lattice-Based Cryptanalysis这篇论文来即可，主要就是在矩阵的右边再增加n列的 子集以及背包容量<br>官方题解中给每个 子集以及背包容量 乘以了2^10这么个系数，然后LLL即可求解<br>或者不乘系数直接用BKZ也是可以的<br>exp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs sage">B=[[0 for i in range(len(list[0])+5)] for i in range(len(list[0])+1)]<br>de=2<br>for i in range(len(list[0])):<br>    B[i][i]=de<br>    B[i][len(list[0])+ 1]=list[0][i]<br>    B[i][len(list[0])+ 2]=list[1][i]<br>    B[i][len(list[0])+ 3]=list[2][i]<br>    B[i][len(list[0])+ 4]=list[3][i]<br>    B[len(list[0])][i]=de/2<br>B[-1][-1]=bag[-1]<br>B[-1][-2]=bag[-2]<br>B[-1][-3]=bag[-3]<br>B[-1][-4]=bag[-4]<br>B[-1][len(list[0])]=de/2<br>B=matrix(ZZ,B)<br>B_=B.BKZ()<br>for i in range(len(list[0]) + 1):<br>    M = B_.row(i).list()<br>    flag = True<br>    for m in M[:-5]:<br>        if m != de/2 and m != -de/2:<br>            flag = False<br>            break<br>    if flag:<br>        print(M)<br>a=[1, 1, 1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, 1, 1, 1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, 1, 1][::-1]<br>c=&#x27;&#x27;<br>for i in a:<br>    if i==-1:<br>        c+=&#x27;0&#x27;<br>    else:<br>        c+=&#x27;1&#x27;<br><br>        <br>p=int(c,2)<br>#17739748707559623655<br>p=17739748707559623655<br>key = hashlib.sha256(str(p).encode()).digest()<br>cipher = AES.new(key, AES.MODE_ECB)<br>print(cipher.decrypt(ciphertext))<br></code></pre></td></tr></table></figure><p>flag:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs flag">hgame&#123;A_S1mple_Modul@r_Subset_Sum_Problem&#125;<br></code></pre></td></tr></table></figure><h4 id="sieve"><a href="#sieve" class="headerlink" title="sieve"></a>sieve</h4><p>两种不同孔径的筛子，才能筛干净</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sage">from Crypto.Util.number import bytes_to_long<br>from sympy import nextprime<br><br>FLAG = b&#x27;hgame&#123;xxxxxxxxxxxxxxxxxxxxxx&#125;&#x27;<br>m = bytes_to_long(FLAG)<br><br>def trick(k):<br>    if k &gt; 1:<br>        mul = prod(range(1,k)) <br>        if k - mul % k - 1 == 0:<br>            return euler_phi(k) + trick(k-1) + 1<br>        else:<br>            return euler_phi(k) + trick(k-1)<br>    else:<br>        return 1<br><br>e = 65537<br>p = q = nextprime(trick(e^2//6)&lt;&lt;128)<br>n = p * q<br>enc = pow(m,e,n)<br>print(f&#x27;&#123;enc=&#125;&#x27;)<br>#enc=2449294097474714136530140099784592732766444481665278038069484466665506153967851063209402336025065476172617376546<br></code></pre></td></tr></table></figure><p>题目是要我们求n之前的数的欧拉函数和，如果是素数再额外+1<br>官方wp是用了两种筛，但单一个线性筛其实就可以完成题目的要求<br>在线性筛筛到素数时多加个1即可<br>官方exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#筛1（也可以⽤sage内置的prime_pi()）</span><br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">count_primes_optimized_sieve</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    is_prime = [<span class="hljs-literal">True</span>] * (n + <span class="hljs-number">1</span>)<br>    is_prime[<span class="hljs-number">0</span>], is_prime[<span class="hljs-number">1</span>] = <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-built_in">int</span>(n**<span class="hljs-number">0.5</span>) + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> is_prime[i]:<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i*i, n + <span class="hljs-number">1</span>, i):<br>                is_prime[j] = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>(is_prime)<br>count_primes_optimized_sieve(<span class="hljs-number">65537</span>^<span class="hljs-number">2</span>//<span class="hljs-number">6</span>)<br><span class="hljs-comment">#37030583</span><br><span class="hljs-comment">#筛2 </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">linear_sieve_phi</span>(<span class="hljs-params">m</span>):<br>    phi = [<span class="hljs-number">0</span>] * (m + <span class="hljs-number">1</span>)<br>    is_prime = [<span class="hljs-literal">True</span>] * (m + <span class="hljs-number">1</span>)<br>    primes = []<br>    phi[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, m + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> is_prime[i]:<br>            primes.append(i)<br>            phi[i] = i - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> primes:<br>            <span class="hljs-keyword">if</span> i * p &gt; m:<br>                <span class="hljs-keyword">break</span><br>            is_prime[i * p] = <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">if</span> i % p == <span class="hljs-number">0</span>:<br>                phi[i * p] = phi[i] * p<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">else</span>:<br>                phi[i * p] = phi[i] * (p - <span class="hljs-number">1</span>)<br>    pre_s = [<span class="hljs-number">0</span>] * (m + <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>):<br>        pre_s[i] = pre_s[i - <span class="hljs-number">1</span>] + phi[i]<br>    <span class="hljs-keyword">return</span> phi, pre_s<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">EulerSumSolver</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, m=<span class="hljs-number">10</span>**<span class="hljs-number">6</span></span>):<br>        <span class="hljs-variable language_">self</span>.m = m<br>        <span class="hljs-variable language_">self</span>.phi, <span class="hljs-variable language_">self</span>.pre_s = linear_sieve_phi(m)<br>        <span class="hljs-variable language_">self</span>.cache = &#123;&#125;<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">S</span>(<span class="hljs-params">self, n</span>):<br>        <span class="hljs-keyword">if</span> n &lt;= <span class="hljs-variable language_">self</span>.m:<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.pre_s[n]<br>        <span class="hljs-keyword">if</span> n <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.cache:<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.cache[n]<br>        res = n * (n + <span class="hljs-number">1</span>) // <span class="hljs-number">2</span><br>        v = <span class="hljs-built_in">int</span>(n ** <span class="hljs-number">0.5</span>)<br>        sum1 = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, v + <span class="hljs-number">1</span>):<br>            sum1 += <span class="hljs-variable language_">self</span>.S(n // i)<br>        u = n // (v + <span class="hljs-number">1</span>)<br>        sum2 = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, u + <span class="hljs-number">1</span>):<br>            sum2 += <span class="hljs-variable language_">self</span>.S(k) * (n // k - n // (k + <span class="hljs-number">1</span>))<br>        res -= (sum1 + sum2)<br>        <span class="hljs-variable language_">self</span>.cache[n] = res<br>        <span class="hljs-keyword">return</span> res<br>solver = EulerSumSolver(m=<span class="hljs-number">10</span>**<span class="hljs-number">6</span>)<br><span class="hljs-built_in">print</span>(slover.S(<span class="hljs-number">65537</span>^<span class="hljs-number">2</span>//<span class="hljs-number">6</span>))<br><span class="hljs-comment">#155763335194435672</span><br></code></pre></td></tr></table></figure><p>单线性筛，大约需要17G以上的内存，内存不够可能会有点慢<br>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> nextprime<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sieve_phi</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">global</span> phi,prime,__<span class="hljs-built_in">sum</span><br>    __<span class="hljs-built_in">sum</span>=<span class="hljs-number">1</span><br>    phi = [<span class="hljs-number">0</span>] * (n + <span class="hljs-number">1</span>)<br>    prime = []<br>    phi[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, n + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> i%<span class="hljs-number">100000</span>==<span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(i,<span class="hljs-string">&#x27;/&#x27;</span>,n,<span class="hljs-string">&#x27;|&#x27;</span>,i/n)<br>        <span class="hljs-keyword">if</span> phi[i] == <span class="hljs-number">0</span>:<br>            __<span class="hljs-built_in">sum</span>+=<span class="hljs-number">1</span><br>            phi[i] = i - <span class="hljs-number">1</span><br>            prime.append(i)<br>        <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> prime:<br>            <span class="hljs-keyword">if</span> i * p &gt; n:<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> i%p==<span class="hljs-number">0</span>:<br>                phi[p*i]=phi[i]*p<br>                <span class="hljs-keyword">break</span><br>            phi[p*i]=phi[i]*(p-<span class="hljs-number">1</span>)<br>        __<span class="hljs-built_in">sum</span>+=phi[i]<br>    <span class="hljs-keyword">return</span> __<span class="hljs-built_in">sum</span><br><br>e = <span class="hljs-number">65537</span><br>n=e**<span class="hljs-number">2</span>//<span class="hljs-number">6</span><br>c=<span class="hljs-number">2449294097474714136530140099784592732766444481665278038069484466665506153967851063209402336025065476172617376546</span><br><br>start=time.time()<br>result=sieve_phi(n)<br>ed=time.time()<br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment">#155763335447735055</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;用时:&#x27;</span>,ed-start)<br>p=nextprime(result&lt;&lt;<span class="hljs-number">128</span>)<br>n=p**<span class="hljs-number">2</span><br>phi=p**<span class="hljs-number">2</span>-p<br>d=inverse(e,phi)<br>plain=<span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(long_to_bytes(plain))<br></code></pre></td></tr></table></figure><p>flag:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs flag">#hgame&#123;sieve_is_n0t_that_HArd&#125;<br></code></pre></td></tr></table></figure><h3 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h3><p>在CTF的征途上，我选择让思维稍作休憩。Misc领域的每一次奇技巧思，都值得被更深度地内化与沉淀。当解题的快感褪去后，我意识到过度聚焦于文档的堆砌，或许会稀释技术探索的纯粹性。此刻更愿将精力投入实战推演的复盘中，待未来的某个节点，以更精炼的方式呈现解题的密钥。知识的重组需要发酵的时间，正如隐写术的像素需要耐心校准，才能显现完整的图景。<br>省流：懒~</p><h2 id="week2"><a href="#week2" class="headerlink" title="week2"></a>week2</h2><h3 id="crypto-1"><a href="#crypto-1" class="headerlink" title="crypto"></a>crypto</h3><h4 id="Ancient-Recall"><a href="#Ancient-Recall" class="headerlink" title="Ancient Recall"></a>Ancient Recall</h4><p>命运之轮逆转了原本的厄运，请准确还原最初抽中的牌面组合，使既定命数回归其本应遵循的轨迹</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><br>Major_Arcana = [<span class="hljs-string">&quot;The Fool&quot;</span>, <span class="hljs-string">&quot;The Magician&quot;</span>, <span class="hljs-string">&quot;The High Priestess&quot;</span>,<span class="hljs-string">&quot;The Empress&quot;</span>, <span class="hljs-string">&quot;The Emperor&quot;</span>, <span class="hljs-string">&quot;The Hierophant&quot;</span>,<span class="hljs-string">&quot;The Lovers&quot;</span>, <span class="hljs-string">&quot;The Chariot&quot;</span>, <span class="hljs-string">&quot;Strength&quot;</span>,<span class="hljs-string">&quot;The Hermit&quot;</span>, <span class="hljs-string">&quot;Wheel of Fortune&quot;</span>, <span class="hljs-string">&quot;Justice&quot;</span>,<span class="hljs-string">&quot;The Hanged Man&quot;</span>, <span class="hljs-string">&quot;Death&quot;</span>, <span class="hljs-string">&quot;Temperance&quot;</span>,<span class="hljs-string">&quot;The Devil&quot;</span>, <span class="hljs-string">&quot;The Tower&quot;</span>, <span class="hljs-string">&quot;The Star&quot;</span>,<span class="hljs-string">&quot;The Moon&quot;</span>, <span class="hljs-string">&quot;The Sun&quot;</span>, <span class="hljs-string">&quot;Judgement&quot;</span>,<span class="hljs-string">&quot;The World&quot;</span>]<br>wands = [<span class="hljs-string">&quot;Ace of Wands&quot;</span>, <span class="hljs-string">&quot;Two of Wands&quot;</span>, <span class="hljs-string">&quot;Three of Wands&quot;</span>, <span class="hljs-string">&quot;Four of Wands&quot;</span>, <span class="hljs-string">&quot;Five of Wands&quot;</span>, <span class="hljs-string">&quot;Six of Wands&quot;</span>, <span class="hljs-string">&quot;Seven of Wands&quot;</span>, <span class="hljs-string">&quot;Eight of Wands&quot;</span>, <span class="hljs-string">&quot;Nine of Wands&quot;</span>, <span class="hljs-string">&quot;Ten of Wands&quot;</span>, <span class="hljs-string">&quot;Page of Wands&quot;</span>, <span class="hljs-string">&quot;Knight of Wands&quot;</span>, <span class="hljs-string">&quot;Queen of Wands&quot;</span>, <span class="hljs-string">&quot;King of Wands&quot;</span>]<br>cups = [<span class="hljs-string">&quot;Ace of Cups&quot;</span>, <span class="hljs-string">&quot;Two of Cups&quot;</span>, <span class="hljs-string">&quot;Three of Cups&quot;</span>, <span class="hljs-string">&quot;Four of Cups&quot;</span>, <span class="hljs-string">&quot;Five of Cups&quot;</span>, <span class="hljs-string">&quot;Six of Cups&quot;</span>, <span class="hljs-string">&quot;Seven of Cups&quot;</span>, <span class="hljs-string">&quot;Eight of Cups&quot;</span>, <span class="hljs-string">&quot;Nine of Cups&quot;</span>, <span class="hljs-string">&quot;Ten of Cups&quot;</span>, <span class="hljs-string">&quot;Page of Cups&quot;</span>, <span class="hljs-string">&quot;Knight of Cups&quot;</span>, <span class="hljs-string">&quot;Queen of Cups&quot;</span>, <span class="hljs-string">&quot;King of Cups&quot;</span>]<br>swords = [<span class="hljs-string">&quot;Ace of Swords&quot;</span>, <span class="hljs-string">&quot;Two of Swords&quot;</span>, <span class="hljs-string">&quot;Three of Swords&quot;</span>, <span class="hljs-string">&quot;Four of Swords&quot;</span>, <span class="hljs-string">&quot;Five of Swords&quot;</span>, <span class="hljs-string">&quot;Six of Swords&quot;</span>, <span class="hljs-string">&quot;Seven of Swords&quot;</span>, <span class="hljs-string">&quot;Eight of Swords&quot;</span>, <span class="hljs-string">&quot;Nine of Swords&quot;</span>, <span class="hljs-string">&quot;Ten of Swords&quot;</span>, <span class="hljs-string">&quot;Page of Swords&quot;</span>, <span class="hljs-string">&quot;Knight of Swords&quot;</span>, <span class="hljs-string">&quot;Queen of Swords&quot;</span>, <span class="hljs-string">&quot;King of Swords&quot;</span>]<br>pentacles = [<span class="hljs-string">&quot;Ace of Pentacles&quot;</span>, <span class="hljs-string">&quot;Two of Pentacles&quot;</span>, <span class="hljs-string">&quot;Three of Pentacles&quot;</span>, <span class="hljs-string">&quot;Four of Pentacles&quot;</span>, <span class="hljs-string">&quot;Five of Pentacles&quot;</span>, <span class="hljs-string">&quot;Six of Pentacles&quot;</span>, <span class="hljs-string">&quot;Seven of Pentacles&quot;</span>, <span class="hljs-string">&quot;Eight of Pentacles&quot;</span>, <span class="hljs-string">&quot;Nine of Pentacles&quot;</span>, <span class="hljs-string">&quot;Ten of Pentacles&quot;</span>, <span class="hljs-string">&quot;Page of Pentacles&quot;</span>, <span class="hljs-string">&quot;Knight of Pentacles&quot;</span>, <span class="hljs-string">&quot;Queen of Pentacles&quot;</span>, <span class="hljs-string">&quot;King of Pentacles&quot;</span>]<br>Minor_Arcana = wands + cups + swords + pentacles<br>tarot = Major_Arcana + Minor_Arcana<br>reversals = [<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>]<br><br>Value = []<br>cards = []<br>YOUR_initial_FATE = []<br><span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(YOUR_initial_FATE)&lt;<span class="hljs-number">5</span>:<br>    card = random.choice(tarot)<br>    <span class="hljs-keyword">if</span> card <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> cards:<br>        cards.append(card)<br>        <span class="hljs-keyword">if</span> card <span class="hljs-keyword">in</span> Major_Arcana:<br>            k = random.choice(reversals)<br>            Value.append(tarot.index(card)^k)<br>            <span class="hljs-keyword">if</span> k == -<span class="hljs-number">1</span>:<br>                YOUR_initial_FATE.append(<span class="hljs-string">&quot;re-&quot;</span>+card)<br>            <span class="hljs-keyword">else</span>:<br>                YOUR_initial_FATE.append(card)<br>        <span class="hljs-keyword">else</span>:<br>            Value.append(tarot.index(card))<br>            YOUR_initial_FATE.append(card)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">continue</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Oops!lets reverse 1T!&quot;</span>)<br><br>FLAG=(<span class="hljs-string">&quot;hgame&#123;&quot;</span>+<span class="hljs-string">&quot;&amp;&quot;</span>.join(YOUR_initial_FATE)+<span class="hljs-string">&quot;&#125;&quot;</span>).replace(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-string">&quot;_&quot;</span>)<br><br>YOUR_final_Value = Value<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Fortune_wheel</span>(<span class="hljs-params">FATE</span>):<br>    FATEd = [FATE[i]+FATE[(i+<span class="hljs-number">1</span>)%<span class="hljs-number">5</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(FATE))]<br>    <span class="hljs-keyword">return</span> FATEd<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">250</span>):<br>    YOUR_final_Value = Fortune_wheel(YOUR_final_Value)<br><span class="hljs-built_in">print</span>(YOUR_final_Value)<br>YOUR_final_FATE = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> YOUR_final_Value:<br>    YOUR_final_FATE.append(tarot[i%<span class="hljs-number">78</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Your destiny changed!\n&quot;</span>,<span class="hljs-string">&quot;,&quot;</span>.join(YOUR_final_FATE))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;oh,now you GET th3 GOOd lU&gt;k,^^&quot;</span>)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Oops!lets reverse 1T!</span><br><span class="hljs-string">[2532951952066291774890498369114195917240794704918210520571067085311474675019, 2532951952066291774890327666074100357898023013105443178881294700381509795270, 2532951952066291774890554459287276604903130315859258544173068376967072335730, 2532951952066291774890865328241532885391510162611534514014409174284299139015, 2532951952066291774890830662608134156017946376309989934175833913921142609334]</span><br><span class="hljs-string">Your destiny changed!</span><br><span class="hljs-string"> Eight of Cups,Ace of Cups,Strength,The Chariot,Five of Swords</span><br><span class="hljs-string">oh,now you GET th3 GOOd lU&gt;k,^^</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>题目要求还原出YOUR_initial_FATE，那么对YOUR_final_FATE进行250次Fortune_wheel的逆变换再取值即可<br>对于Fortune_wheel的逆变换<br>设<code>FATE=[a,b,c,d,e]</code><br>一次变换后<code>FATE1=[a+b,b+c,c+d,d+e,e+a]</code><br>那么<code>a=(FATE1[0]+FATE1[2]+FATE1[4]-FATE1[1]-FATE1[3])//2</code><br>官方wp中是设了5个未知数，对这5个未知数进行250次Fortune_wheel的变换，然后乘以系数矩阵的逆矩阵即可得到a,b,c,e,d<br>官方exp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs sage">R.&lt;a, b, c, d, e&gt; = PolynomialRing(QQ, 5)<br> def Fortune_wheel(FATE):<br> FATEd = [FATE[i]+FATE[(i+1)%5] for i in range(5)]<br> return FATEd<br> #<br>获取系数矩阵<br> <br>fate = [a,b,c,d,e]<br> for i in range(250):<br> fate = Fortune_wheel(fate)<br> v = vector(list(fate[0].dict().values()))#<br>得到系数向量<br> <br>C = matrix(5, 5, lambda i, j: v[(j - i) % 5])#<br>系数循环<br> <br>print(C.rank()==5)<br>#True<br><br>FATE=vector([2532951952066291774890498369114195917240794704918210520571067085311474675019, 2532951952066291774890327666074100357898023013105443178881294700381509795270, 2532951952066291774890554459287276604903130315859258544173068376967072335730, 2532951952066291774890865328241532885391510162611534514014409174284299139015, 2532951952066291774890830662608134156017946376309989934175833913921142609334])<br>E=[[0,0,0,0,0] for _ in range(5)]<br>for i in range(5):<br>    E[i][i]=1<br>real_FATE = [vector(E[i])*C.inverse()*FATE for i in range(5)]<br>print(real_FATE)<br>#[-19, -20, 20, -15, 41]<br><br>value=[-19, -20, 20, -15, 41]<br>#这里省略其他赋值<br>YOUR_final_FATE=[]<br>for i in value:<br>    if i&lt;0:<br>        YOUR_final_FATE.append(&#x27;re-&#x27;+tarot[i^(-1)])<br>    else:<br>        YOUR_final_FATE.append(tarot[i])<br>FLAG=(&quot;hgame&#123;&quot;+&quot;&amp;&quot;.join(YOUR_final_FATE)+&quot;&#125;&quot;).replace(&quot; &quot;,&quot;_&quot;)<br>print(FLAG)<br>#hgame&#123;re-The_Moon&amp;re-The_Sun&amp;Judgement&amp;re-Temperance&amp;Six_of_Cups&#125;<br></code></pre></td></tr></table></figure><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python">YOUR_final_Value=[<span class="hljs-number">2532951952066291774890498369114195917240794704918210520571067085311474675019</span>, <span class="hljs-number">2532951952066291774890327666074100357898023013105443178881294700381509795270</span>, <span class="hljs-number">2532951952066291774890554459287276604903130315859258544173068376967072335730</span>, <span class="hljs-number">2532951952066291774890865328241532885391510162611534514014409174284299139015</span>, <span class="hljs-number">2532951952066291774890830662608134156017946376309989934175833913921142609334</span>]<br><br>Major_Arcana = [<span class="hljs-string">&quot;The Fool&quot;</span>, <span class="hljs-string">&quot;The Magician&quot;</span>, <span class="hljs-string">&quot;The High Priestess&quot;</span>,<span class="hljs-string">&quot;The Empress&quot;</span>, <span class="hljs-string">&quot;The Emperor&quot;</span>, <span class="hljs-string">&quot;The Hierophant&quot;</span>,<span class="hljs-string">&quot;The Lovers&quot;</span>, <span class="hljs-string">&quot;The Chariot&quot;</span>, <span class="hljs-string">&quot;Strength&quot;</span>,<span class="hljs-string">&quot;The Hermit&quot;</span>, <span class="hljs-string">&quot;Wheel of Fortune&quot;</span>, <span class="hljs-string">&quot;Justice&quot;</span>,<span class="hljs-string">&quot;The Hanged Man&quot;</span>, <span class="hljs-string">&quot;Death&quot;</span>, <span class="hljs-string">&quot;Temperance&quot;</span>,<span class="hljs-string">&quot;The Devil&quot;</span>, <span class="hljs-string">&quot;The Tower&quot;</span>, <span class="hljs-string">&quot;The Star&quot;</span>,<span class="hljs-string">&quot;The Moon&quot;</span>, <span class="hljs-string">&quot;The Sun&quot;</span>, <span class="hljs-string">&quot;Judgement&quot;</span>,<span class="hljs-string">&quot;The World&quot;</span>]<br>wands = [<span class="hljs-string">&quot;Ace of Wands&quot;</span>, <span class="hljs-string">&quot;Two of Wands&quot;</span>, <span class="hljs-string">&quot;Three of Wands&quot;</span>, <span class="hljs-string">&quot;Four of Wands&quot;</span>, <span class="hljs-string">&quot;Five of Wands&quot;</span>, <span class="hljs-string">&quot;Six of Wands&quot;</span>, <span class="hljs-string">&quot;Seven of Wands&quot;</span>, <span class="hljs-string">&quot;Eight of Wands&quot;</span>, <span class="hljs-string">&quot;Nine of Wands&quot;</span>, <span class="hljs-string">&quot;Ten of Wands&quot;</span>, <span class="hljs-string">&quot;Page of Wands&quot;</span>, <span class="hljs-string">&quot;Knight of Wands&quot;</span>, <span class="hljs-string">&quot;Queen of Wands&quot;</span>, <span class="hljs-string">&quot;King of Wands&quot;</span>]<br>cups = [<span class="hljs-string">&quot;Ace of Cups&quot;</span>, <span class="hljs-string">&quot;Two of Cups&quot;</span>, <span class="hljs-string">&quot;Three of Cups&quot;</span>, <span class="hljs-string">&quot;Four of Cups&quot;</span>, <span class="hljs-string">&quot;Five of Cups&quot;</span>, <span class="hljs-string">&quot;Six of Cups&quot;</span>, <span class="hljs-string">&quot;Seven of Cups&quot;</span>, <span class="hljs-string">&quot;Eight of Cups&quot;</span>, <span class="hljs-string">&quot;Nine of Cups&quot;</span>, <span class="hljs-string">&quot;Ten of Cups&quot;</span>, <span class="hljs-string">&quot;Page of Cups&quot;</span>, <span class="hljs-string">&quot;Knight of Cups&quot;</span>, <span class="hljs-string">&quot;Queen of Cups&quot;</span>, <span class="hljs-string">&quot;King of Cups&quot;</span>]<br>swords = [<span class="hljs-string">&quot;Ace of Swords&quot;</span>, <span class="hljs-string">&quot;Two of Swords&quot;</span>, <span class="hljs-string">&quot;Three of Swords&quot;</span>, <span class="hljs-string">&quot;Four of Swords&quot;</span>, <span class="hljs-string">&quot;Five of Swords&quot;</span>, <span class="hljs-string">&quot;Six of Swords&quot;</span>, <span class="hljs-string">&quot;Seven of Swords&quot;</span>, <span class="hljs-string">&quot;Eight of Swords&quot;</span>, <span class="hljs-string">&quot;Nine of Swords&quot;</span>, <span class="hljs-string">&quot;Ten of Swords&quot;</span>, <span class="hljs-string">&quot;Page of Swords&quot;</span>, <span class="hljs-string">&quot;Knight of Swords&quot;</span>, <span class="hljs-string">&quot;Queen of Swords&quot;</span>, <span class="hljs-string">&quot;King of Swords&quot;</span>]<br>pentacles = [<span class="hljs-string">&quot;Ace of Pentacles&quot;</span>, <span class="hljs-string">&quot;Two of Pentacles&quot;</span>, <span class="hljs-string">&quot;Three of Pentacles&quot;</span>, <span class="hljs-string">&quot;Four of Pentacles&quot;</span>, <span class="hljs-string">&quot;Five of Pentacles&quot;</span>, <span class="hljs-string">&quot;Six of Pentacles&quot;</span>, <span class="hljs-string">&quot;Seven of Pentacles&quot;</span>, <span class="hljs-string">&quot;Eight of Pentacles&quot;</span>, <span class="hljs-string">&quot;Nine of Pentacles&quot;</span>, <span class="hljs-string">&quot;Ten of Pentacles&quot;</span>, <span class="hljs-string">&quot;Page of Pentacles&quot;</span>, <span class="hljs-string">&quot;Knight of Pentacles&quot;</span>, <span class="hljs-string">&quot;Queen of Pentacles&quot;</span>, <span class="hljs-string">&quot;King of Pentacles&quot;</span>]<br>Minor_Arcana = wands + cups + swords + pentacles<br>tarot = Major_Arcana + Minor_Arcana<br>reversals = [<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">de_Fortune_wheel</span>(<span class="hljs-params">FATE</span>):<br>    ol=[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)]<br>    a_2=FATE[<span class="hljs-number">0</span>]+FATE[<span class="hljs-number">2</span>]+FATE[<span class="hljs-number">4</span>]-FATE[<span class="hljs-number">1</span>]-FATE[<span class="hljs-number">3</span>]<br>    a=a_2//<span class="hljs-number">2</span><br>    ol[<span class="hljs-number">0</span>]=a<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>):<br>        ol[i]=FATE[i-<span class="hljs-number">1</span>]-ol[i-<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">return</span> ol<br>Value=YOUR_final_Value[:]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">250</span>):<br>    Value=de_Fortune_wheel(Value)<br><br>ini=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Value:<br>    <span class="hljs-keyword">if</span> i&lt;<span class="hljs-number">0</span>:<br>        i=i^-<span class="hljs-number">1</span><br>        ini+=[<span class="hljs-string">&#x27;re-&#x27;</span>+tarot[i]]<br>    <span class="hljs-keyword">else</span>:<br>        ini+=[tarot[i]]<br></code></pre></td></tr></table></figure><p>flag:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs flag">hgame&#123;re-The_Moon&amp;re-The_Sun&amp;Judgement&amp;re-Temperance&amp;Six_of_Cups&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>crypto</category>
      
      <category>hgame</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
      <tag>misc</tag>
      
      <tag>web</tag>
      
      <tag>reverse</tag>
      
      <tag>RSA</tag>
      
      <tag>格密码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>crypto的小池塘</title>
    <link href="/2025/02/01/crypto%E7%9A%84%E5%B0%8F%E6%B1%A0%E5%A1%98/"/>
    <url>/2025/02/01/crypto%E7%9A%84%E5%B0%8F%E6%B1%A0%E5%A1%98/</url>
    
    <content type="html"><![CDATA[<h1 id="crypto的小池塘"><a href="#crypto的小池塘" class="headerlink" title="crypto的小池塘"></a>crypto的小池塘</h1><p>是 <strong>crypto的小池塘</strong> 哒！</p><p>crypto内容持续更新中！</p><h2 id="古典密码和其他"><a href="#古典密码和其他" class="headerlink" title="古典密码和其他"></a>古典密码和其他</h2><h3 id="凯撒密码"><a href="#凯撒密码" class="headerlink" title="凯撒密码"></a>凯撒密码</h3><p>凯撒密码有一个变种，即偏移量在原来的基础上会逐渐递增或递减，如：</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-variable">_dX</span>]pZT]VOUZNSh<br></code></pre></td></tr></table></figure><p>根据flag的开头猜出第一个字母的偏移量然后再解即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">c=<span class="hljs-string">&#x27;_dX]pZT]VOUZNSh&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>,<span class="hljs-number">7</span>+<span class="hljs-built_in">len</span>(c)):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(c[i-<span class="hljs-number">7</span>])+i),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-comment">#flag&#123;fake_flag&#125;</span><br></code></pre></td></tr></table></figure><h3 id="rot密码"><a href="#rot密码" class="headerlink" title="rot密码"></a>rot密码</h3><p>跟凯撒差不多，但rot会对数字、字母和符号采用不同的偏移量</p><h3 id="维吉尼亚"><a href="#维吉尼亚" class="headerlink" title="维吉尼亚"></a>维吉尼亚</h3><p>这种一般都会有大段的英文组成，解出来后会有一段英文，在里面找到flag即可<sub>偶尔看看这些英文文章或许不错？</sub><br>网站一把梭<br><a href="https://www.guballa.de/vigenere-solver">维吉尼亚</a><br><a href="https://quipqiup.com/">字频分析</a></p><h3 id="栅栏密码"><a href="#栅栏密码" class="headerlink" title="栅栏密码"></a>栅栏密码</h3><p>有普通的栅栏密码和W型栅栏密码，以及其他的，但目前只遇到这两个<br>一般来说比较明显，可以一眼看出是打乱了顺序的flag<br>直接工具一把梭就好</p><h3 id="burros-wheeler变换"><a href="#burros-wheeler变换" class="headerlink" title="burros wheeler变换"></a>burros wheeler变换</h3><p>和栅栏密码有点类似<br>网站一把梭<br><a href="https://www.dcode.fr/burrows-wheeler-transform#">burros wheeler变换</a></p><h3 id="base家族"><a href="#base家族" class="headerlink" title="base家族"></a>base家族</h3><p>生活习性一般为群居，有较少的个体会单独出现<br>工具一把梭</p><h3 id="rabbit加密"><a href="#rabbit加密" class="headerlink" title="rabbit加密"></a>rabbit加密</h3><p>和base64有点像，但不是<br>特点就是rabbit加密的密文开头一定是U2FsdGVkX1</p><h3 id="摩斯密码"><a href="#摩斯密码" class="headerlink" title="摩斯密码"></a>摩斯密码</h3><p>无需多盐<br>有的时候可以考虑取倒序再解</p><h3 id="各种奇怪的编码"><a href="#各种奇怪的编码" class="headerlink" title="各种奇怪的编码"></a>各种奇怪的编码</h3><p>一般会给提示，把提示里的名词&#x2F;名词的英文+“加密”然后去网上搜搜看有没有<br>稍微整合一下遇到过的<br>1.unicode(开头带\u的)<br>2.hill密码<br>3.云影密码<br>4.阴阳怪气密码<br>5.Ook密码(只会出现.!?)<br>6….</p><h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2><h3 id="N比较小"><a href="#N比较小" class="headerlink" title="N比较小"></a>N比较小</h3><p>yafu分解或者<a href="http://www.factordb.com/index.php">factordb</a>上去查</p><h3 id="p-q比较接近"><a href="#p-q比较接近" class="headerlink" title="p,q比较接近"></a>p,q比较接近</h3><p>yafu分解<br>如果q是p的下一个素数可以直接开根然后取下一个素数<br>如果没那么接近可以尝试费马分解</p><h3 id="已知p的高位-或低位"><a href="#已知p的高位-或低位" class="headerlink" title="已知p的高位(或低位)"></a>已知p的高位(或低位)</h3><p>需要知道p一半多一点的位<br>然后可以使用coppersmith来求出未知的部分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>p=getPrime(<span class="hljs-number">512</span>)<br>q=getPrime(<span class="hljs-number">512</span>)<br>n=p*q<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;n=&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;p=&#x27;</span>,p&gt;&gt;<span class="hljs-number">200</span>)<br><span class="hljs-comment">#n=112504979083712229531952757191194732828499706371472784719813972405778703417247176790237513106376618450306935577929225321894114864615650356115078192433412933614500196557250554235973290182450168320807821949691618499503517524567476630509814549179909620880384733611969002850838245795773226688747995514766739694723</span><br><span class="hljs-comment">#p= 6523821383236155809139380148039921541898396152483777060219989822945258930310576045651663651099</span><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sage">n=112504979083712229531952757191194732828499706371472784719813972405778703417247176790237513106376618450306935577929225321894114864615650356115078192433412933614500196557250554235973290182450168320807821949691618499503517524567476630509814549179909620880384733611969002850838245795773226688747995514766739694723<br>p= 6523821383236155809139380148039921541898396152483777060219989822945258930310576045651663651099<br>p=p&lt;&lt;200<br><br>R.&lt;x&gt;=PolynomialRing(Zmod(n))<br>f=p+x<br>roots=f.small_roots(X=2^200,beta=0.4)<br>print(roots)<br>#[1021435571904691551547239506034919073476937520743412292671445]<br>p=p+roots[0]<br></code></pre></td></tr></table></figure><p>已知低位也是一样的<br>需要注意一下这时方程x的系数不是1，所以要再加一句<code>f=f.monic()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>p=getPrime(<span class="hljs-number">512</span>)<br>q=getPrime(<span class="hljs-number">512</span>)<br>n=p*q<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;n=&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;p=&#x27;</span>,p%<span class="hljs-number">2</span>**<span class="hljs-number">312</span>)<br><span class="hljs-comment">#n=89820736169682478448552519628218400705135210973260509778007045831883668969527110280533187547246617801981864105163972853781185965361518351893786764486150702831984065217897337271844754064100947812093154222574318035632483431419851762377108959021951925201490503252582574906016560633323642437493362618007712135887</span><br><span class="hljs-comment">#p= 5503879275028571598277317489624851891721566574579555947545006824124736548319357887871362651269</span><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sage">n=89820736169682478448552519628218400705135210973260509778007045831883668969527110280533187547246617801981864105163972853781185965361518351893786764486150702831984065217897337271844754064100947812093154222574318035632483431419851762377108959021951925201490503252582574906016560633323642437493362618007712135887<br>p= 5503879275028571598277317489624851891721566574579555947545006824124736548319357887871362651269<br><br>R.&lt;x&gt;=PolynomialRing(Zmod(n))<br>f=p+x*2**312<br>f=f.monic()<br>roots=f.small_roots(X=2^200,beta=0.4)<br>print(roots)<br>#[1005017440926667857292176627451616359396335830870171531975062]<br></code></pre></td></tr></table></figure><p>如果已知p的低位，那么q的低位也可以求出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">x=<span class="hljs-number">100</span><br>px=p%<span class="hljs-number">2</span>**x<br>qx=q%<span class="hljs-number">2</span>**x<br>nx=n%<span class="hljs-number">2</span>**x<br>px*qx%<span class="hljs-number">2</span>**x==nx<br><span class="hljs-comment">#True</span><br></code></pre></td></tr></table></figure><p>只需要在2^x上求出px的逆元然后乘nx即可<br>可以在已知q的高位，p的低位的时候用然后求出q</p><p>另外在别的地方看到了应该是coppersmith的具体实现，所以记录一下，平常用sagemath里自带的small_roots即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> subprocess <span class="hljs-keyword">import</span> check_output<br><span class="hljs-keyword">from</span> re <span class="hljs-keyword">import</span> findall<br><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">flatter</span>(<span class="hljs-params">M</span>):  <span class="hljs-comment"># flatter</span><br>    z = <span class="hljs-string">&quot;[[&quot;</span> + <span class="hljs-string">&quot;]\n[&quot;</span>.join(<span class="hljs-string">&quot; &quot;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>, row)) <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> M) + <span class="hljs-string">&quot;]]&quot;</span><br>    ret = check_output([<span class="hljs-string">&quot;flatter&quot;</span>], <span class="hljs-built_in">input</span>=z.encode())<br>    <span class="hljs-keyword">return</span> matrix(M.nrows(), M.ncols(), <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, findall(<span class="hljs-string">b&quot;-?\\d+&quot;</span>, ret)))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">matrix_overview</span>(<span class="hljs-params">BB</span>):  <span class="hljs-comment"># see the shape of matrix</span><br>    <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(BB.dimensions()[<span class="hljs-number">0</span>]):<br>        a = (<span class="hljs-string">&#x27;%02d &#x27;</span> % ii)<br>        <span class="hljs-keyword">for</span> jj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(BB.dimensions()[<span class="hljs-number">1</span>]):<br>            a += <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">if</span> BB[ii, jj] == <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;X&#x27;</span><br>            <span class="hljs-keyword">if</span> BB.dimensions()[<span class="hljs-number">0</span>] &lt; <span class="hljs-number">60</span>:<br>                a += <span class="hljs-string">&#x27; &#x27;</span><br>        <span class="hljs-built_in">print</span>(a)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Small_Roots_Univariate</span>(<span class="hljs-params">f, X=<span class="hljs-literal">None</span>, beta=<span class="hljs-number">1.0</span>, epsilon=<span class="hljs-literal">None</span></span>):  <span class="hljs-comment"># 多项式f,X,beta,epsilon</span><br><br>    delta = f.degree()  <span class="hljs-comment"># 度delta</span><br>    N = f.parent().characteristic()  <span class="hljs-comment"># 模数N</span><br>    PR = PolynomialRing(ZZ, <span class="hljs-string">&#x27;x&#x27;</span>)<br>    x = PR.gen()<br><br>    Zm = f.base_ring()  <span class="hljs-comment"># Zmod(N)</span><br>    f = f.change_ring(ZZ)  <span class="hljs-comment"># ZZ下f(x)</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> f.is_monic():  <span class="hljs-comment"># 首一</span><br>        f = f.monic()  <span class="hljs-comment"># f = f * f[delta].inverse_mod(N)</span><br><br>    m = ceil(<span class="hljs-built_in">max</span>(beta * beta / (delta * epsilon), <span class="hljs-number">7</span> * beta / delta))  <span class="hljs-comment"># m</span><br>    t = floor(delta * m * (<span class="hljs-number">1</span> / beta - <span class="hljs-number">1</span>))  <span class="hljs-comment"># t</span><br>    <span class="hljs-comment">#print(&#x27;m=&#123;&#125;, t=&#123;&#125;&#x27;.format(m, t))</span><br><br>    f_ij = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(delta):<br>            f_ij.append(x ** j * N ** (m - i) * f ** i)  <span class="hljs-comment"># shift g_ij(x)</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(t):<br>        f_ij.append(x ** i * f ** m)  <span class="hljs-comment"># shift h_i(x)</span><br><br>    monomials = []<br>    <span class="hljs-keyword">for</span> g <span class="hljs-keyword">in</span> f_ij:<br>        monomials += g.monomials()  <span class="hljs-comment"># 统计所有出现的单项 x^i</span><br>    monomials = <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">set</span>(monomials))  <span class="hljs-comment"># 去重并排序</span><br><br>    M = Matrix(ZZ, <span class="hljs-built_in">len</span>(f_ij), <span class="hljs-built_in">len</span>(monomials))  <span class="hljs-comment"># 行数为多项式个数，列数为所有单项可能个数</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(M.nrows()):<br>        <span class="hljs-keyword">for</span> j, monomial <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(monomials):<br>            M[i, j] = f_ij[i].monomial_coefficient(monomial) * monomial.subs(x=X)  <span class="hljs-comment"># g_ij(xX)和h_i(xX)</span><br>    <span class="hljs-comment">#matrix_overview(M)  # see</span><br>    <span class="hljs-keyword">assert</span> M.nrows() == M.ncols()  <span class="hljs-comment"># 方阵 nrows()=ncols()</span><br>    B = flatter(M)  <span class="hljs-comment"># flater加速</span><br>    <span class="hljs-comment">#print(&#x27;end LLL&#x27;)</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(M.nrows()):  <span class="hljs-comment"># 得到f(xX)，构建f(x)，求根检验</span><br>        Cx = <span class="hljs-built_in">sum</span>(ZZ(B[j, i] // monomials[i](X)) * monomials[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(M.ncols()))  <span class="hljs-comment"># construct polynomial,</span><br>        R = Cx.roots()  <span class="hljs-comment"># get roots</span><br>        roots = [Zm(r[<span class="hljs-number">0</span>]) <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> R <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>(r[<span class="hljs-number">0</span>]) &lt;= X]  <span class="hljs-comment"># check x0&lt;=X</span><br>        roots = [r <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> roots <span class="hljs-keyword">if</span> gcd(N, ZZ(f(r))) &gt;= ZZ(floor(N ** beta))]  <span class="hljs-comment"># check gcd(f(x_0),N)&gt;N^beta</span><br>        <span class="hljs-keyword">if</span> roots:<br>            <span class="hljs-keyword">return</span> roots  <span class="hljs-comment"># 返回root</span><br></code></pre></td></tr></table></figure><h2 id="椭圆曲线"><a href="#椭圆曲线" class="headerlink" title="椭圆曲线"></a>椭圆曲线</h2><h2 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h2><p>to be continue…</p>]]></content>
    
    
    <categories>
      
      <category>crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024浙江省赛</title>
    <link href="/2025/02/01/2024%E6%B5%99%E6%B1%9F%E7%9C%81%E8%B5%9B/"/>
    <url>/2025/02/01/2024%E6%B5%99%E6%B1%9F%E7%9C%81%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="2024浙江省赛"><a href="#2024浙江省赛" class="headerlink" title="2024浙江省赛"></a>2024浙江省赛</h1><p>是 <strong>2024浙江省赛</strong> 哒！</p><h2 id="预赛"><a href="#预赛" class="headerlink" title="预赛"></a>预赛</h2><h3 id="myez-encode"><a href="#myez-encode" class="headerlink" title="myez_encode"></a>myez_encode</h3><p>sinqwq</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> bytes_to_long, getPrime<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> isprime<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_ecc_parameters</span>():<br>    x = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">512</span>)<br>    y = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">512</span>)<br>    <span class="hljs-keyword">return</span> x, y<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_prime_on_curve</span>(<span class="hljs-params">x, y, a, b, ecc_p</span>):<br>    p = x<br>    q = y<br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> (isprime(p) <span class="hljs-keyword">and</span> isprime(q)):<br>        p = random.randint(<span class="hljs-number">2</span>, ecc_p - <span class="hljs-number">1</span>)<br>        q = (p**<span class="hljs-number">3</span> + a * p + b) % ecc_p<br>    <span class="hljs-keyword">return</span> p, q<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_rsa_parameters</span>():<br>    a = getPrime(<span class="hljs-number">512</span>) <br>    b = getPrime(<span class="hljs-number">512</span>)   <br>    ecc_p = getPrime(<span class="hljs-number">512</span>)  <br>    x, y = generate_ecc_parameters()<br>    p, q = find_prime_on_curve(x, y, a, b, ecc_p)<br>    n = p * q<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;p= <span class="hljs-subst">&#123;p&#125;</span>\nq= <span class="hljs-subst">&#123;q&#125;</span>\nn= <span class="hljs-subst">&#123;n&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;a= <span class="hljs-subst">&#123;a&#125;</span>\nb= <span class="hljs-subst">&#123;b&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;P= <span class="hljs-subst">&#123;ecc_p&#125;</span>&quot;</span>)<br>    <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    generate_rsa_parameters()<br><br>n = p*q<br>e = <span class="hljs-number">9</span><br>m = bytes_to_long(flag)<br>c = <span class="hljs-built_in">pow</span>(m,e,n)<br><span class="hljs-built_in">print</span>(c)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n= 23298836191712395990541254600776262066247692725919114528027158820049802443474994576179738462067629079873633948850637889127452791527914591229415148712172587856497614285410824614070907847594399218298016379507879066220104597707859246179921731928508884947347652904142879813069359815823184922170241099916465722623</span><br><span class="hljs-string">a= 7388665644223916915334064243181348811184637180763467245762518813757790945069068654378380490110607063038613823004593920489924786053478102905200169738195523</span><br><span class="hljs-string">b= 11742940161647091720180482697980016011774828087234021441133595442949631197989696508358388255191793888646498553804646435609849154496274569000398776043150743</span><br><span class="hljs-string">P= 11300086101709077144191286182913849072593185125745291892398153828719453495325025227858328617077648296782357912556752467026523366682963139253552060862229027</span><br><span class="hljs-string">c= 9314530945343661153059846131608414257092556390479105017633636336832925597262814680689800448223193301814365726128618348603188219757245073917910487794768758461683644600756896595336654006282030911824869219015400826589122838492456940861634378619000373353637666835642505021355710338342048772713981673863167110471</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>给出了q &#x3D; (p*<em>3 + a * p + b) % ecc_p，n&#x3D;p</em>q<br>设p&#x3D;x，构建ecc_p上的方程解出p</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sage">n= 23298836191712395990541254600776262066247692725919114528027158820049802443474994576179738462067629079873633948850637889127452791527914591229415148712172587856497614285410824614070907847594399218298016379507879066220104597707859246179921731928508884947347652904142879813069359815823184922170241099916465722623<br>a= 7388665644223916915334064243181348811184637180763467245762518813757790945069068654378380490110607063038613823004593920489924786053478102905200169738195523<br>b= 11742940161647091720180482697980016011774828087234021441133595442949631197989696508358388255191793888646498553804646435609849154496274569000398776043150743<br>P= 11300086101709077144191286182913849072593185125745291892398153828719453495325025227858328617077648296782357912556752467026523366682963139253552060862229027<br><br>R=Zmod(P)[&#x27;x&#x27;]<br>x=R.gen()<br>f=(x**3 + a * x + b)*x-n<br>roots=f.roots()<br>print(roots)<br></code></pre></td></tr></table></figure><blockquote><p>[(2925490712948356009205547798331037409204468852265154197929696123102317330847028997592576845375767951888373634075473448002921250636926630905567362014595493, 1)]</p></blockquote><p>因为<code>GCD(e,(p-1))</code>是3，而<code>GCD(e,(q-1))</code>是1，所以转换到mod q上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>p=<span class="hljs-number">2925490712948356009205547798331037409204468852265154197929696123102317330847028997592576845375767951888373634075473448002921250636926630905567362014595493</span><br>q=<span class="hljs-number">7964077988212602731598828926489143570796450850963162530397620970577507270219530635660167912693046701894468774510746807002256765035407708129322533385075411</span><br>e=<span class="hljs-number">9</span><br>d=<span class="hljs-built_in">pow</span>(e,-<span class="hljs-number">1</span>,q-<span class="hljs-number">1</span>)<br>plain=<span class="hljs-built_in">pow</span>(c,d,q)<br><span class="hljs-built_in">print</span>(long_to_bytes(plain))<br></code></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">DASCTF</span><span class="hljs-template-variable">&#123;Very_easy_3NC0dE_Is_1t&#125;</span><br></code></pre></td></tr></table></figure><h3 id="叠叠乐"><a href="#叠叠乐" class="headerlink" title="叠叠乐"></a>叠叠乐</h3><p>sinqwq</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>m = bytes_to_long(flag)<br>p = getPrime(<span class="hljs-number">1024</span>)<br>q = getPrime(<span class="hljs-number">1024</span>)<br>n = p * q<br>phi = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        K, Q, P = getrandbits(<span class="hljs-number">900</span>), getrandbits(<span class="hljs-number">50</span>), getrandbits(<span class="hljs-number">40</span>)<br>        Y = K * Q + P<br>        e = inverse(Y, phi)<br>        <span class="hljs-keyword">if</span> GCD(Y, phi) == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">except</span> ValueError:<br>        <span class="hljs-keyword">continue</span><br>c = <span class="hljs-built_in">pow</span>(m,e,n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;n = <span class="hljs-subst">&#123;n&#125;</span>\ne = <span class="hljs-subst">&#123;e&#125;</span>\nc = <span class="hljs-subst">&#123;c&#125;</span>\nQP = <span class="hljs-subst">&#123;Q^P&#125;</span>&quot;</span>)<br><br>a = getPrime(<span class="hljs-number">256</span>)<br>b = getPrime(<span class="hljs-number">256</span>)<br>ct = getPrime(<span class="hljs-number">256</span>)<br>kp = K&gt;&gt;<span class="hljs-number">256</span>&lt;&lt;<span class="hljs-number">256</span><br>kt = K - kp<br>hint = (a * kt + b) % ct<br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;a = <span class="hljs-subst">&#123;a&#125;</span>\nb = <span class="hljs-subst">&#123;b&#125;</span>\nct = <span class="hljs-subst">&#123;ct&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;hint = <span class="hljs-subst">&#123;hint &gt;&gt; <span class="hljs-number">64</span>&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;kp = <span class="hljs-subst">&#123;kp&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;kt = <span class="hljs-subst">&#123;kt &gt;&gt; <span class="hljs-number">64</span>&#125;</span>&quot;</span> )<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n = 13303856899011983632960307882319638637287550432779792007603701106983751876258258048795658350090305467837563627318527545231628416053156415975945196818433676370277283141965954341888806103176166238312378096457083879950701541506765361840788206662319436206601457152594339944176515389512519816615898370162128798168782601890642932984764317007450016645945780381938581704042377883323192832778751432894895603847845606533248604610646973688090589505251553075107051564166403193760651488750826245412068423204034796156843765421320342265009955812200476134570302591703762798597205025078181770729074023303604132413763581028940724047053</span><br><span class="hljs-string">e = 2733517162977325316168171866728796033084902904187914379488075721239142722580656245473605622483921568453860073436024032094493176750414721945725534405036772939927287999268479777085171913762833110203454301633868757808443485399661516913959111387656462439998435796234902268408475529868761969365402107153613238260226108864951738479939189489551038436191545122312333617807990694525995038168231022704371131328332275808094810800990404143404473637884482394299488230831809795888381186519555285694029266922792625447331253019632257369630552871013035628858621927646094270019889444050527156845910381295069049755746679380460434044361</span><br><span class="hljs-string">c = 1257188899046514997272405325110424564385768024060742063320284255988190007584654784656431260867071493048511123353948069507669503633550848919744874511579443966819136329852114472266216895363699392703786987813179700514033350248365850450092001546491420343429207567685052543332537686663079614502304203291177287727697712338767938071399864090084866741203851028912823360536739689896262852936314757299216155671690262149783045336778852616143194149940631969143394631299410783137418636516190101007126937403728720725015452113538709754534149425438610714702079839102903881751106774919038549406459141819940733821104205463323546057321</span><br><span class="hljs-string">QP = 374563570713029</span><br><span class="hljs-string">a = 99122984274070362726537021378927027394007193977385990197140215753769750795421</span><br><span class="hljs-string">b = 109980476177887671809918999270373802499713895541798303554775830754300928967413</span><br><span class="hljs-string">ct = 107507754155219159022820175387994991690395542115681890441982942540734100538841</span><br><span class="hljs-string">hint = 4003137201644984429135979790277666488437115932866581847838</span><br><span class="hljs-string">kp = 7184356853939910548131241595220948851978680431483401537207787860047928595973775242115057099194568802207740239839134611884070301385515936096797317313765187937716505251256116706827496362883360670296901928436254026774384214648582578725974699293753323212294005332698430701568</span><br><span class="hljs-string">kt = 2000588514863262877141025511928564790205362046489313378420</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>题目给出了hint和kp的高192位，要求恢复K，再恢复Y，然后解RSA即可。<br>多元coppersmith梭了。<br>复现的脚本:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs sage">import itertools<br><br>def small_roots(f, bounds, m=1, d=None):<br>    if not d:<br>        d = f.degree()<br> <br>    R = f.base_ring()<br>    N = R.cardinality()<br> <br>    f /= f.coefficients().pop(0)<br>    f = f.change_ring(ZZ)<br> <br>    G = Sequence([], f.parent())<br>    for i in range(m + 1):<br>        base = N ^ (m - i) * f ^ i<br>        for shifts in itertools.product(range(d), repeat=f.nvariables()):<br>            g = base * prod(map(power, f.variables(), shifts))<br>            G.append(g)<br> <br>    B, monomials = G.coefficient_matrix()<br>    monomials = vector(monomials)<br> <br>    factors = [monomial(*bounds) for monomial in monomials]<br>    for i, factor in enumerate(factors):<br>        B.rescale_col(i, factor)<br> <br>    B = B.dense_matrix().LLL()<br> <br>    B = B.change_ring(QQ)<br>    for i, factor in enumerate(factors):<br>        B.rescale_col(i, 1 / factor)<br> <br>    H = Sequence([], f.parent().change_ring(QQ))<br>    for h in filter(None, B * monomials):<br>        H.append(h)<br>        I = H.ideal()<br>        if I.dimension() == -1:<br>            H.pop()<br>        elif I.dimension() == 0:<br>            roots = []<br>            for root in I.variety(ring=ZZ):<br>                root = tuple(R(root[var]) for var in f.variables())<br>                roots.append(root)<br>            return roots<br>    return []<br><br><br>n = <br>e = <br>c = <br>QP = <br>a = <br>b = <br>ct = <br>hint = <br>kp = <br>kt = <br>P.&lt;x,y&gt; = PolynomialRing(Zmod(ct))<br>f=a*((kt&lt;&lt;64)+x)+b-(hint&lt;&lt;64)-y<br>bounds=(2^64,2^64)<br>res = small_roots(f,bounds,m =2 ,d = 2)<br>print(res)<br><br>dkt=res[0][0]<br>dh=res[0][1]<br>kt=(kt&lt;&lt;64)+dkt<br>hint=(hint&lt;&lt;64)+dh<br>assert hint == (a * kt + b) % ct<br>K=int(kp)+int(kt)<br>print(K)<br></code></pre></td></tr></table></figure><p>下一个还是多元coppersmith。<br>找的小鸡块的博客:<a href="https://tangcuxiaojikuai.xyz/post/4311e802.html#Week-4-Danger-Leak">Danger Leak</a><br><img src="/2025/02/01/2024%E6%B5%99%E6%B1%9F%E7%9C%81%E8%B5%9B/2.png"><br>直接按照这个构建一下方程，解一下即可。第二个参数调错了导致我死活解不出来…<br>脚本:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sage">R.&lt;x,y,z&gt; = PolynomialRing(Zmod(e*K))<br>f=e*x - 1 - n*y + y*z<br>bounds=(2^39, 2^947, 2^1025)<br><br>res = small_roots(f,bounds,m =3 ,d = 3)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs result">[(944458204083, 552560007843076923398164260994159471807550408694526455233352292531945811156310842419047890332009181413495561481756007924157620126366568469123253368740622107077476645222325656305794977621972645408084023732255953798516849162998553825344237466120566386612181335521132040599181606274560641, 235681768835910777712622269457346978821121797522206608887974456212118979486411195712467848203727919845155536551605550715865106258897298449186222892938047506561981718836263182343343122200026888924819782172663699192899753711204849338725765643146319190364107913200366351844540910550001346645855729485732602826765)]<br></code></pre></td></tr></table></figure><p>最后算一下Y，解个RSA即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sage">from Crypto.Util.number import *<br>P=int(res[0][0])<br>Q=QP^^P<br>Y=K*Q+P<br>plain=int(pow(c,Y,n))<br>print(long_to_bytes(plain))<br>#b&#x27;DASCTF&#123;6a4ba557-4fe7-4874-8dad-40e880cb7717&#125;&#x27;<br></code></pre></td></tr></table></figure><h3 id="SNOW"><a href="#SNOW" class="headerlink" title="SNOW"></a>SNOW</h3><p>task.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sourcecode.secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">from</span> snow <span class="hljs-keyword">import</span> * <br><span class="hljs-keyword">import</span> random<br><br>key = [random.getrandbits(<span class="hljs-number">32</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)]<br>iv = [random.getrandbits(<span class="hljs-number">32</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)]<br><br>s = Snow(key,iv)<br><br><br>gift = <span class="hljs-string">b&quot;the quick brown fox jumps over the lazy dog\n&quot;</span><br>plain = gift + flag<br><br>key_stream = s.generate_keystream(<span class="hljs-built_in">len</span>(plain))<br>C = [i^j <span class="hljs-keyword">for</span> i,j <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(plain,key_stream)]<br><span class="hljs-built_in">print</span>(C)<br>s.hack()<br><br><span class="hljs-comment"># [3539094009, 980211684, 2198891016, 905998740, 1595475160, 3962636204, 1199994505, 3190370623, 296595869, 3158272345, 2748985736, 382671580, 2521428409, 248078233, 1528783547, 2729100548, 3426466722, 3192873770, 1337295957, 1431041587, 1607853207, 3998694569, 3160389002, 3728077354, 1120982789, 3443900372, 1811224296, 3102761228, 3296566547, 3724398326, 873334127, 3279785283, 1267844209, 907638672, 2121413959, 3173567371, 4097722407, 844863077, 3114817962, 3619759560, 2198708209, 2363435526, 196774438, 2671749579, 4031688923, 471349633, 778676959, 3608967403, 92491149, 913291948, 3021362116, 1067932129, 999259588, 3190588842, 1828097126, 1450255462, 1305572961, 1341694028, 2350778224, 2932388574, 1204050979, 1294999174, 1921124090, 2342994011, 1941020673, 1191919176, 187588176, 255691701, 274795123, 873091533, 299848364, 870697920, 3387594780, 944072831, 848477078, 447469593, 917439649, 598555627, 3036173079, 3758185777, 4236584984, 4205933999, 1185586113, 3227810954, 2737102694, 3680871868, 4102277292, 378037705]</span><br><span class="hljs-comment"># 834501734,940247165,2078728259,483907438,1102712410,3110955761,3016462560,871310805,1334672645,1102778698</span><br></code></pre></td></tr></table></figure><p>snow.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><br><br><span class="hljs-comment"># 定义 S-box</span><br>sr = np.array([<br>    <span class="hljs-number">0x63</span>, <span class="hljs-number">0x7c</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x7b</span>, <span class="hljs-number">0xf2</span>, <span class="hljs-number">0x6b</span>, <span class="hljs-number">0x6f</span>, <span class="hljs-number">0xc5</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x2b</span>, <span class="hljs-number">0xfe</span>, <span class="hljs-number">0xd7</span>, <span class="hljs-number">0xab</span>, <span class="hljs-number">0x76</span>,<br>    <span class="hljs-number">0xca</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0xc9</span>, <span class="hljs-number">0x7d</span>, <span class="hljs-number">0xfa</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0xf0</span>, <span class="hljs-number">0xad</span>, <span class="hljs-number">0xd4</span>, <span class="hljs-number">0xa2</span>, <span class="hljs-number">0xaf</span>, <span class="hljs-number">0x9c</span>, <span class="hljs-number">0xa4</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xc0</span>,<br>    <span class="hljs-number">0xb7</span>, <span class="hljs-number">0xfd</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x3f</span>, <span class="hljs-number">0xf7</span>, <span class="hljs-number">0xcc</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0xa5</span>, <span class="hljs-number">0xe5</span>, <span class="hljs-number">0xf1</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0xd8</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x15</span>,<br>    <span class="hljs-number">0x04</span>, <span class="hljs-number">0xc7</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0xc3</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x9a</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xe2</span>, <span class="hljs-number">0xeb</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xb2</span>, <span class="hljs-number">0x75</span>,<br>    <span class="hljs-number">0x09</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0x1a</span>, <span class="hljs-number">0x1b</span>, <span class="hljs-number">0x6e</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0xa0</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x3b</span>, <span class="hljs-number">0xd6</span>, <span class="hljs-number">0xb3</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xe3</span>, <span class="hljs-number">0x2f</span>, <span class="hljs-number">0x84</span>,<br>    <span class="hljs-number">0x53</span>, <span class="hljs-number">0xd1</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xed</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xfc</span>, <span class="hljs-number">0xb1</span>, <span class="hljs-number">0x5b</span>, <span class="hljs-number">0x6a</span>, <span class="hljs-number">0xcb</span>, <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x4a</span>, <span class="hljs-number">0x4c</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xcf</span>,<br>    <span class="hljs-number">0xd0</span>, <span class="hljs-number">0xef</span>, <span class="hljs-number">0xaa</span>, <span class="hljs-number">0xfb</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x4d</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0xf9</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x7f</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x3c</span>, <span class="hljs-number">0x9f</span>, <span class="hljs-number">0xa8</span>,<br>    <span class="hljs-number">0x51</span>, <span class="hljs-number">0xa3</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x8f</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x9d</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xf5</span>, <span class="hljs-number">0xbc</span>, <span class="hljs-number">0xb6</span>, <span class="hljs-number">0xda</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0xf3</span>, <span class="hljs-number">0xd2</span>,<br>    <span class="hljs-number">0xcd</span>, <span class="hljs-number">0x0c</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xec</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xc4</span>, <span class="hljs-number">0xa7</span>, <span class="hljs-number">0x7e</span>, <span class="hljs-number">0x3d</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x5d</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x73</span>,<br>    <span class="hljs-number">0x60</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x4f</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x2a</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0xee</span>, <span class="hljs-number">0xb8</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xde</span>, <span class="hljs-number">0x5e</span>, <span class="hljs-number">0x0b</span>, <span class="hljs-number">0xdb</span>,<br>    <span class="hljs-number">0xe0</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x3a</span>, <span class="hljs-number">0x0a</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x5c</span>, <span class="hljs-number">0xc2</span>, <span class="hljs-number">0xd3</span>, <span class="hljs-number">0xac</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xe4</span>, <span class="hljs-number">0x79</span>,<br>    <span class="hljs-number">0xe7</span>, <span class="hljs-number">0xc8</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x6d</span>, <span class="hljs-number">0x8d</span>, <span class="hljs-number">0xd5</span>, <span class="hljs-number">0x4e</span>, <span class="hljs-number">0xa9</span>, <span class="hljs-number">0x6c</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0xf4</span>, <span class="hljs-number">0xea</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x7a</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0x08</span>,<br>    <span class="hljs-number">0xba</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x2e</span>, <span class="hljs-number">0x1c</span>, <span class="hljs-number">0xa6</span>, <span class="hljs-number">0xb4</span>, <span class="hljs-number">0xc6</span>, <span class="hljs-number">0xe8</span>, <span class="hljs-number">0xdd</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x1f</span>, <span class="hljs-number">0x4b</span>, <span class="hljs-number">0xbd</span>, <span class="hljs-number">0x8b</span>, <span class="hljs-number">0x8a</span>,<br>    <span class="hljs-number">0x70</span>, <span class="hljs-number">0x3e</span>, <span class="hljs-number">0xb5</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xf6</span>, <span class="hljs-number">0x0e</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xb9</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0xc1</span>, <span class="hljs-number">0x1d</span>, <span class="hljs-number">0x9e</span>,<br>    <span class="hljs-number">0xe1</span>, <span class="hljs-number">0xf8</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0xd9</span>, <span class="hljs-number">0x8e</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x9b</span>, <span class="hljs-number">0x1e</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0xe9</span>, <span class="hljs-number">0xce</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xdf</span>,<br>    <span class="hljs-number">0x8c</span>, <span class="hljs-number">0xa1</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x0d</span>, <span class="hljs-number">0xbf</span>, <span class="hljs-number">0xe6</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x2d</span>, <span class="hljs-number">0x0f</span>, <span class="hljs-number">0xb0</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0xbb</span>, <span class="hljs-number">0x16</span><br>], dtype=np.uint8)<br><br>sq = np.array([<br>    <span class="hljs-number">0x25</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xd7</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0x5c</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0xa4</span>, <span class="hljs-number">0xee</span>, <span class="hljs-number">0x6e</span>, <span class="hljs-number">0xcb</span>, <span class="hljs-number">0x7d</span>, <span class="hljs-number">0xb5</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0xdb</span>,<br>    <span class="hljs-number">0xe4</span>, <span class="hljs-number">0x8e</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x4f</span>, <span class="hljs-number">0x5d</span>, <span class="hljs-number">0x6a</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xe8</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x5e</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0xe2</span>,<br>    <span class="hljs-number">0xd8</span>, <span class="hljs-number">0xe9</span>, <span class="hljs-number">0xcc</span>, <span class="hljs-number">0xed</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x2f</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xd2</span>, <span class="hljs-number">0xac</span>, <span class="hljs-number">0xe3</span>, <span class="hljs-number">0x4a</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x1b</span>, <span class="hljs-number">0xb9</span>,<br>    <span class="hljs-number">0xb2</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0xa6</span>, <span class="hljs-number">0x2e</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x4b</span>, <span class="hljs-number">0x0e</span>, <span class="hljs-number">0xc1</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0xaa</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xd4</span>,<br>    <span class="hljs-number">0xca</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0xb3</span>, <span class="hljs-number">0xef</span>, <span class="hljs-number">0xdd</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x7b</span>, <span class="hljs-number">0xc2</span>, <span class="hljs-number">0x7f</span>, <span class="hljs-number">0xbe</span>, <span class="hljs-number">0xc3</span>, <span class="hljs-number">0x9f</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x4c</span>, <span class="hljs-number">0x64</span>,<br>    <span class="hljs-number">0x83</span>, <span class="hljs-number">0xa2</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xb4</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0xcd</span>, <span class="hljs-number">0xba</span>, <span class="hljs-number">0xc6</span>, <span class="hljs-number">0xbb</span>, <span class="hljs-number">0x6d</span>, <span class="hljs-number">0x4d</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0xf4</span>,<br>    <span class="hljs-number">0x8d</span>, <span class="hljs-number">0xb0</span>, <span class="hljs-number">0xe5</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0xfe</span>, <span class="hljs-number">0x8f</span>, <span class="hljs-number">0xe6</span>, <span class="hljs-number">0xcf</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0xfa</span>,<br>    <span class="hljs-number">0xbc</span>, <span class="hljs-number">0x0f</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x1d</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x1a</span>, <span class="hljs-number">0xc5</span>, <span class="hljs-number">0x4e</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x7a</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0x5b</span>, <span class="hljs-number">0x5a</span>,<br>    <span class="hljs-number">0xeb</span>, <span class="hljs-number">0x9a</span>, <span class="hljs-number">0x1c</span>, <span class="hljs-number">0xa9</span>, <span class="hljs-number">0xd1</span>, <span class="hljs-number">0x7e</span>, <span class="hljs-number">0x0d</span>, <span class="hljs-number">0xfc</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x8a</span>, <span class="hljs-number">0xb6</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0xf5</span>, <span class="hljs-number">0x0a</span>, <span class="hljs-number">0xf8</span>, <span class="hljs-number">0xdc</span>,<br>    <span class="hljs-number">0x03</span>, <span class="hljs-number">0x3c</span>, <span class="hljs-number">0x0c</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0xf1</span>, <span class="hljs-number">0xb8</span>, <span class="hljs-number">0xf3</span>, <span class="hljs-number">0x3d</span>, <span class="hljs-number">0xf2</span>, <span class="hljs-number">0xd5</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0xa0</span>, <span class="hljs-number">0x00</span>,<br>    <span class="hljs-number">0x06</span>, <span class="hljs-number">0xce</span>, <span class="hljs-number">0xf6</span>, <span class="hljs-number">0xea</span>, <span class="hljs-number">0xb7</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xf7</span>, <span class="hljs-number">0x8c</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0xd6</span>, <span class="hljs-number">0xa7</span>, <span class="hljs-number">0xbf</span>, <span class="hljs-number">0x8b</span>, <span class="hljs-number">0x3f</span>, <span class="hljs-number">0x1f</span>, <span class="hljs-number">0x53</span>,<br>    <span class="hljs-number">0x63</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0xfd</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xd3</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0xa5</span>, <span class="hljs-number">0x7c</span>, <span class="hljs-number">0xa1</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x2d</span>, <span class="hljs-number">0xbd</span>,<br>    <span class="hljs-number">0xd9</span>, <span class="hljs-number">0xc7</span>, <span class="hljs-number">0xaf</span>, <span class="hljs-number">0x6b</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x0b</span>, <span class="hljs-number">0xe0</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0xc8</span>, <span class="hljs-number">0x9d</span>, <span class="hljs-number">0xe7</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xb1</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x9c</span>,<br>    <span class="hljs-number">0xdf</span>, <span class="hljs-number">0x6f</span>, <span class="hljs-number">0xf9</span>, <span class="hljs-number">0xda</span>, <span class="hljs-number">0x2a</span>, <span class="hljs-number">0xc4</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0xab</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x2b</span>,<br>    <span class="hljs-number">0xad</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0xfb</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xec</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0xde</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x3b</span>, <span class="hljs-number">0xc0</span>, <span class="hljs-number">0x9b</span>, <span class="hljs-number">0x3e</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x3a</span>,<br>    <span class="hljs-number">0x56</span>, <span class="hljs-number">0xe1</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0xc9</span>, <span class="hljs-number">0x1e</span>, <span class="hljs-number">0x9e</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xa3</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0xa8</span>, <span class="hljs-number">0x6c</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0xd0</span>, <span class="hljs-number">0xf0</span>, <span class="hljs-number">0x86</span><br>], dtype=np.uint8)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Snow</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, k, iv</span>):<br>        <span class="hljs-variable language_">self</span>.lfsr = np.zeros(<span class="hljs-number">16</span>, dtype=np.uint32)<br>        <span class="hljs-variable language_">self</span>.fsm = np.zeros(<span class="hljs-number">3</span>, dtype=np.uint32)<br>        <span class="hljs-variable language_">self</span>.initialize(k, iv)<br>        <span class="hljs-variable language_">self</span>.S =[]<br>        <span class="hljs-variable language_">self</span>.R1 = []<br>        <span class="hljs-variable language_">self</span>.R2 = []<br>        <span class="hljs-variable language_">self</span>.R3 = []<br>        <br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">mulx</span>(<span class="hljs-params">self, V, c</span>):<br>        <span class="hljs-keyword">if</span> V &amp; <span class="hljs-number">0x80</span>:<br>            <span class="hljs-keyword">return</span> (V &lt;&lt; <span class="hljs-number">1</span>) ^ c<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> V &lt;&lt; <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">mulx_pow</span>(<span class="hljs-params">self, V, i, c</span>):<br>        <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> V<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.mulx(<span class="hljs-variable language_">self</span>.mulx_pow(V, i - <span class="hljs-number">1</span>, c), c)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">s1</span>(<span class="hljs-params">self, w</span>):<br>        w0 = (w &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xff</span><br>        w1 = (w &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xff</span><br>        w2 = (w &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xff</span><br>        w3 = w &amp; <span class="hljs-number">0xff</span><br><br>        r0 = (<span class="hljs-variable language_">self</span>.mulx(sr[w0], <span class="hljs-number">0x1b</span>) ^ sr[w1] ^ sr[w2] ^ <span class="hljs-variable language_">self</span>.mulx(sr[w3], <span class="hljs-number">0x1b</span>) ^ sr[w3]) &amp; <span class="hljs-number">0xff</span><br>        r1 = (<span class="hljs-variable language_">self</span>.mulx(sr[w0], <span class="hljs-number">0x1b</span>) ^ sr[w0] ^ <span class="hljs-variable language_">self</span>.mulx(sr[w1], <span class="hljs-number">0x1b</span>) ^ sr[w2] ^ sr[w3]) &amp; <span class="hljs-number">0xff</span><br>        r2 = (sr[w0] ^ <span class="hljs-variable language_">self</span>.mulx(sr[w1], <span class="hljs-number">0x1b</span>) ^ sr[w1] ^ <span class="hljs-variable language_">self</span>.mulx(sr[w2], <span class="hljs-number">0x1b</span>) ^ sr[w3]) &amp; <span class="hljs-number">0xff</span><br>        r3 = (sr[w0] ^ sr[w1] ^ <span class="hljs-variable language_">self</span>.mulx(sr[w2], <span class="hljs-number">0x1b</span>) ^ sr[w2] ^ <span class="hljs-variable language_">self</span>.mulx(sr[w3], <span class="hljs-number">0x1b</span>)) &amp; <span class="hljs-number">0xff</span><br><br>        <span class="hljs-keyword">return</span> (r0 &lt;&lt; <span class="hljs-number">24</span>) | (r1 &lt;&lt; <span class="hljs-number">16</span>) | (r2 &lt;&lt; <span class="hljs-number">8</span>) | r3<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">s2</span>(<span class="hljs-params">self, w</span>):<br>        w0 = (w &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xff</span><br>        w1 = (w &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xff</span><br>        w2 = (w &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xff</span><br>        w3 = w &amp; <span class="hljs-number">0xff</span><br><br>        r0 = (<span class="hljs-variable language_">self</span>.mulx(sq[w0], <span class="hljs-number">0x69</span>) ^ sq[w1] ^ sq[w2] ^ <span class="hljs-variable language_">self</span>.mulx(sq[w3], <span class="hljs-number">0x69</span>) ^ sq[w3]) &amp; <span class="hljs-number">0xff</span><br>        r1 = (<span class="hljs-variable language_">self</span>.mulx(sq[w0], <span class="hljs-number">0x69</span>) ^ sq[w0] ^ <span class="hljs-variable language_">self</span>.mulx(sq[w1], <span class="hljs-number">0x69</span>) ^ sq[w2] ^ sq[w3]) &amp; <span class="hljs-number">0xff</span><br>        r2 = (sq[w0] ^ <span class="hljs-variable language_">self</span>.mulx(sq[w1], <span class="hljs-number">0x69</span>) ^ sq[w1] ^ <span class="hljs-variable language_">self</span>.mulx(sq[w2], <span class="hljs-number">0x69</span>) ^ sq[w3]) &amp; <span class="hljs-number">0xff</span><br>        r3 = (sq[w0] ^ sq[w1] ^ <span class="hljs-variable language_">self</span>.mulx(sq[w2], <span class="hljs-number">0x69</span>) ^ sq[w2] ^ <span class="hljs-variable language_">self</span>.mulx(sq[w3], <span class="hljs-number">0x69</span>)) &amp; <span class="hljs-number">0xff</span><br>        <span class="hljs-keyword">return</span> (r0 &lt;&lt; <span class="hljs-number">24</span>) | (r1 &lt;&lt; <span class="hljs-number">16</span>) | (r2 &lt;&lt; <span class="hljs-number">8</span>) | r3<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">mul_alpha</span>(<span class="hljs-params">self, c</span>):<br>        r0 = <span class="hljs-variable language_">self</span>.mulx_pow(c, <span class="hljs-number">23</span>, <span class="hljs-number">0xa9</span>) &amp; <span class="hljs-number">0xff</span><br>        r1 = <span class="hljs-variable language_">self</span>.mulx_pow(c, <span class="hljs-number">245</span>, <span class="hljs-number">0xa9</span>) &amp; <span class="hljs-number">0xff</span><br>        r2 = <span class="hljs-variable language_">self</span>.mulx_pow(c, <span class="hljs-number">48</span>, <span class="hljs-number">0xa9</span>) &amp;  <span class="hljs-number">0xff</span><br>        r3 = <span class="hljs-variable language_">self</span>.mulx_pow(c, <span class="hljs-number">239</span>, <span class="hljs-number">0xa9</span>) &amp;  <span class="hljs-number">0xff</span><br>        <span class="hljs-keyword">return</span> (r0 &lt;&lt; <span class="hljs-number">24</span>) | (r1 &lt;&lt; <span class="hljs-number">16</span>) | (r2 &lt;&lt; <span class="hljs-number">8</span>) | r3<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">div_alpha</span>(<span class="hljs-params">self, c</span>):<br>        r0 = <span class="hljs-variable language_">self</span>.mulx_pow(c, <span class="hljs-number">16</span>, <span class="hljs-number">0xa9</span>) &amp;  <span class="hljs-number">0xff</span><br>        r1 = <span class="hljs-variable language_">self</span>.mulx_pow(c, <span class="hljs-number">39</span>, <span class="hljs-number">0xa9</span>) &amp;  <span class="hljs-number">0xff</span><br>        r2 = <span class="hljs-variable language_">self</span>.mulx_pow(c, <span class="hljs-number">6</span>, <span class="hljs-number">0xa9</span>) &amp;  <span class="hljs-number">0xff</span><br>        r3 = <span class="hljs-variable language_">self</span>.mulx_pow(c, <span class="hljs-number">64</span>, <span class="hljs-number">0xa9</span>) &amp;  <span class="hljs-number">0xff</span><br>        <span class="hljs-keyword">return</span> (r0 &lt;&lt; <span class="hljs-number">24</span>) | (r1 &lt;&lt; <span class="hljs-number">16</span>) | (r2 &lt;&lt; <span class="hljs-number">8</span>) | r3<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lfsr_initialization_mode</span>(<span class="hljs-params">self, F</span>):<br>        v = (<span class="hljs-variable language_">self</span>.lfsr[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-number">8</span>) ^ <span class="hljs-variable language_">self</span>.mul_alpha((<span class="hljs-variable language_">self</span>.lfsr[<span class="hljs-number">0</span>] &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xff</span>) ^ <span class="hljs-variable language_">self</span>.lfsr[<span class="hljs-number">2</span>] ^ (<span class="hljs-variable language_">self</span>.lfsr[<span class="hljs-number">11</span>] &gt;&gt; <span class="hljs-number">8</span>) ^ \<br>            <span class="hljs-variable language_">self</span>.div_alpha(<span class="hljs-variable language_">self</span>.lfsr[<span class="hljs-number">11</span>] &amp; <span class="hljs-number">0xff</span>) ^ F<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">15</span>):<br>            <span class="hljs-variable language_">self</span>.lfsr[i] = <span class="hljs-variable language_">self</span>.lfsr[i + <span class="hljs-number">1</span>]<br>        <span class="hljs-variable language_">self</span>.lfsr[<span class="hljs-number">15</span>] = v<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lfsr_keystream_mode</span>(<span class="hljs-params">self</span>):<br>        v = (<span class="hljs-variable language_">self</span>.lfsr[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-number">8</span>) ^ <span class="hljs-variable language_">self</span>.mul_alpha((<span class="hljs-variable language_">self</span>.lfsr[<span class="hljs-number">0</span>] &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xff</span>) ^ <span class="hljs-variable language_">self</span>.lfsr[<span class="hljs-number">2</span>] ^ (<span class="hljs-variable language_">self</span>.lfsr[<span class="hljs-number">11</span>] &gt;&gt; <span class="hljs-number">8</span>) ^ \<br>            <span class="hljs-variable language_">self</span>.div_alpha(<span class="hljs-variable language_">self</span>.lfsr[<span class="hljs-number">11</span>] &amp; <span class="hljs-number">0xff</span>)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">15</span>):<br>            <span class="hljs-variable language_">self</span>.lfsr[i] = <span class="hljs-variable language_">self</span>.lfsr[i + <span class="hljs-number">1</span>]<br>        <span class="hljs-variable language_">self</span>.lfsr[<span class="hljs-number">15</span>] = v<br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">clock_fsm</span>(<span class="hljs-params">self, s15, s5</span>):<br>        F = (s15 + <span class="hljs-variable language_">self</span>.fsm[<span class="hljs-number">0</span>]) ^ <span class="hljs-variable language_">self</span>.fsm[<span class="hljs-number">1</span>]<br>        r = <span class="hljs-variable language_">self</span>.fsm[<span class="hljs-number">1</span>] + (<span class="hljs-variable language_">self</span>.fsm[<span class="hljs-number">2</span>] ^ s5)<br>        <span class="hljs-variable language_">self</span>.fsm[<span class="hljs-number">2</span>] = <span class="hljs-variable language_">self</span>.s2(<span class="hljs-variable language_">self</span>.fsm[<span class="hljs-number">1</span>])<br>        <span class="hljs-variable language_">self</span>.fsm[<span class="hljs-number">1</span>] = <span class="hljs-variable language_">self</span>.s1(<span class="hljs-variable language_">self</span>.fsm[<span class="hljs-number">0</span>])<br>        <span class="hljs-variable language_">self</span>.fsm[<span class="hljs-number">0</span>] = r<br>        <span class="hljs-keyword">return</span> F<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">initialize</span>(<span class="hljs-params">self, k, iv</span>):<br>        <span class="hljs-variable language_">self</span>.lfsr[<span class="hljs-number">0</span>] = k[<span class="hljs-number">0</span>] ^ <span class="hljs-number">0xffffffff</span><br>        <span class="hljs-variable language_">self</span>.lfsr[<span class="hljs-number">1</span>] = k[<span class="hljs-number">1</span>] ^ <span class="hljs-number">0xffffffff</span><br>        <span class="hljs-variable language_">self</span>.lfsr[<span class="hljs-number">2</span>] = k[<span class="hljs-number">2</span>] ^ <span class="hljs-number">0xffffffff</span><br>        <span class="hljs-variable language_">self</span>.lfsr[<span class="hljs-number">3</span>] = k[<span class="hljs-number">3</span>] ^ <span class="hljs-number">0xffffffff</span><br>        <span class="hljs-variable language_">self</span>.lfsr[<span class="hljs-number">4</span>] = k[<span class="hljs-number">0</span>]<br>        <span class="hljs-variable language_">self</span>.lfsr[<span class="hljs-number">5</span>] = k[<span class="hljs-number">1</span>]<br>        <span class="hljs-variable language_">self</span>.lfsr[<span class="hljs-number">6</span>] = k[<span class="hljs-number">2</span>]<br>        <span class="hljs-variable language_">self</span>.lfsr[<span class="hljs-number">7</span>] = k[<span class="hljs-number">3</span>]<br>        <span class="hljs-variable language_">self</span>.lfsr[<span class="hljs-number">8</span>] = k[<span class="hljs-number">0</span>] ^ <span class="hljs-number">0xffffffff</span><br>        <span class="hljs-variable language_">self</span>.lfsr[<span class="hljs-number">9</span>] = k[<span class="hljs-number">1</span>] ^ <span class="hljs-number">0xffffffff</span> ^ iv[<span class="hljs-number">3</span>]<br>        <span class="hljs-variable language_">self</span>.lfsr[<span class="hljs-number">10</span>] = k[<span class="hljs-number">2</span>] ^ <span class="hljs-number">0xffffffff</span> ^ iv[<span class="hljs-number">2</span>]<br>        <span class="hljs-variable language_">self</span>.lfsr[<span class="hljs-number">11</span>] = k[<span class="hljs-number">3</span>] ^ <span class="hljs-number">0xffffffff</span><br>        <span class="hljs-variable language_">self</span>.lfsr[<span class="hljs-number">12</span>] = k[<span class="hljs-number">0</span>] ^ iv[<span class="hljs-number">1</span>]<br>        <span class="hljs-variable language_">self</span>.lfsr[<span class="hljs-number">13</span>] = k[<span class="hljs-number">1</span>]<br>        <span class="hljs-variable language_">self</span>.lfsr[<span class="hljs-number">14</span>] = k[<span class="hljs-number">2</span>]<br>        <span class="hljs-variable language_">self</span>.lfsr[<span class="hljs-number">15</span>] = k[<span class="hljs-number">3</span>] ^ iv[<span class="hljs-number">0</span>]<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>            <span class="hljs-variable language_">self</span>.fsm[i] = <span class="hljs-number">0</span><br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>            F = <span class="hljs-variable language_">self</span>.clock_fsm(<span class="hljs-variable language_">self</span>.lfsr[<span class="hljs-number">15</span>], <span class="hljs-variable language_">self</span>.lfsr[<span class="hljs-number">5</span>])<br>            <span class="hljs-variable language_">self</span>.lfsr_initialization_mode(F)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_keystream</span>(<span class="hljs-params">self, n</span>):<br>        keystream = np.zeros(n, dtype=np.uint32)<br>        <span class="hljs-variable language_">self</span>.clock_fsm(<span class="hljs-variable language_">self</span>.lfsr[<span class="hljs-number">15</span>], <span class="hljs-variable language_">self</span>.lfsr[<span class="hljs-number">5</span>])<br>        <span class="hljs-variable language_">self</span>.lfsr_keystream_mode()<br>        <span class="hljs-variable language_">self</span>.R1.append(<span class="hljs-variable language_">self</span>.fsm[<span class="hljs-number">0</span>])<br>        <span class="hljs-variable language_">self</span>.R2.append(<span class="hljs-variable language_">self</span>.fsm[<span class="hljs-number">1</span>])<br>        <span class="hljs-variable language_">self</span>.R3.append(<span class="hljs-variable language_">self</span>.fsm[<span class="hljs-number">2</span>])<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            F = <span class="hljs-variable language_">self</span>.clock_fsm(<span class="hljs-variable language_">self</span>.lfsr[<span class="hljs-number">15</span>], <span class="hljs-variable language_">self</span>.lfsr[<span class="hljs-number">5</span>])<br>            <span class="hljs-variable language_">self</span>.R1.append(<span class="hljs-variable language_">self</span>.fsm[<span class="hljs-number">0</span>])<br>            <span class="hljs-variable language_">self</span>.R2.append(<span class="hljs-variable language_">self</span>.fsm[<span class="hljs-number">1</span>])<br>            <span class="hljs-variable language_">self</span>.R3.append(<span class="hljs-variable language_">self</span>.fsm[<span class="hljs-number">2</span>])<br>            <span class="hljs-variable language_">self</span>.S.append(<span class="hljs-variable language_">self</span>.lfsr[<span class="hljs-number">0</span>])<br>            keystream[i] = F ^ <span class="hljs-variable language_">self</span>.lfsr[<span class="hljs-number">0</span>]<br>            <span class="hljs-variable language_">self</span>.lfsr_keystream_mode()<br>        <span class="hljs-keyword">return</span> keystream<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">hack</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>.R1[<span class="hljs-number">2</span>],<span class="hljs-variable language_">self</span>.R2[<span class="hljs-number">2</span>],<span class="hljs-variable language_">self</span>.R3[<span class="hljs-number">2</span>],<span class="hljs-variable language_">self</span>.S[<span class="hljs-number">2</span>],<span class="hljs-variable language_">self</span>.S[<span class="hljs-number">3</span>],<span class="hljs-variable language_">self</span>.S[<span class="hljs-number">6</span>],<span class="hljs-variable language_">self</span>.S[<span class="hljs-number">7</span>],<span class="hljs-variable language_">self</span>.S[<span class="hljs-number">8</span>],<span class="hljs-variable language_">self</span>.R1[<span class="hljs-number">5</span>],<span class="hljs-variable language_">self</span>.R1[<span class="hljs-number">7</span>],sep=<span class="hljs-string">&quot;,&quot;</span>)<br></code></pre></td></tr></table></figure><p>我自己在本地跑的时候是需要稍微改一下源码的，不然数据有问题。<br>得把s1和s2改一下，因为sr和sq是int8的，在return的时候会把那个值也转成int8的，只会得到低8位的值，但题目给出的数据明显不是这样的，所以加点int就好了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">s1</span>(<span class="hljs-params">self, w</span>):<br>        w0 = (w &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xff</span><br>        w1 = (w &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xff</span><br>        w2 = (w &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xff</span><br>        w3 = w &amp; <span class="hljs-number">0xff</span><br><br>        r0 = (<span class="hljs-variable language_">self</span>.mulx(sr[w0], <span class="hljs-number">0x1b</span>) ^ sr[w1] ^ sr[w2] ^ <span class="hljs-variable language_">self</span>.mulx(sr[w3], <span class="hljs-number">0x1b</span>) ^ sr[w3]) &amp; <span class="hljs-number">0xff</span><br>        r1 = (<span class="hljs-variable language_">self</span>.mulx(sr[w0], <span class="hljs-number">0x1b</span>) ^ sr[w0] ^ <span class="hljs-variable language_">self</span>.mulx(sr[w1], <span class="hljs-number">0x1b</span>) ^ sr[w2] ^ sr[w3]) &amp; <span class="hljs-number">0xff</span><br>        r2 = (sr[w0] ^ <span class="hljs-variable language_">self</span>.mulx(sr[w1], <span class="hljs-number">0x1b</span>) ^ sr[w1] ^ <span class="hljs-variable language_">self</span>.mulx(sr[w2], <span class="hljs-number">0x1b</span>) ^ sr[w3]) &amp; <span class="hljs-number">0xff</span><br>        r3 = (sr[w0] ^ sr[w1] ^ <span class="hljs-variable language_">self</span>.mulx(sr[w2], <span class="hljs-number">0x1b</span>) ^ sr[w2] ^ <span class="hljs-variable language_">self</span>.mulx(sr[w3], <span class="hljs-number">0x1b</span>)) &amp; <span class="hljs-number">0xff</span><br><br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">int</span>(r0) &lt;&lt; <span class="hljs-number">24</span>) | (<span class="hljs-built_in">int</span>(r1) &lt;&lt; <span class="hljs-number">16</span>) | (<span class="hljs-built_in">int</span>(r2) &lt;&lt; <span class="hljs-number">8</span>) | r3<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">s2</span>(<span class="hljs-params">self, w</span>):<br>        w0 = (w &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xff</span><br>        w1 = (w &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xff</span><br>        w2 = (w &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xff</span><br>        w3 = w &amp; <span class="hljs-number">0xff</span><br><br>        r0 = (<span class="hljs-variable language_">self</span>.mulx(sq[w0], <span class="hljs-number">0x69</span>) ^ sq[w1] ^ sq[w2] ^ <span class="hljs-variable language_">self</span>.mulx(sq[w3], <span class="hljs-number">0x69</span>) ^ sq[w3]) &amp; <span class="hljs-number">0xff</span><br>        r1 = (<span class="hljs-variable language_">self</span>.mulx(sq[w0], <span class="hljs-number">0x69</span>) ^ sq[w0] ^ <span class="hljs-variable language_">self</span>.mulx(sq[w1], <span class="hljs-number">0x69</span>) ^ sq[w2] ^ sq[w3]) &amp; <span class="hljs-number">0xff</span><br>        r2 = (sq[w0] ^ <span class="hljs-variable language_">self</span>.mulx(sq[w1], <span class="hljs-number">0x69</span>) ^ sq[w1] ^ <span class="hljs-variable language_">self</span>.mulx(sq[w2], <span class="hljs-number">0x69</span>) ^ sq[w3]) &amp; <span class="hljs-number">0xff</span><br>        r3 = (sq[w0] ^ sq[w1] ^ <span class="hljs-variable language_">self</span>.mulx(sq[w2], <span class="hljs-number">0x69</span>) ^ sq[w2] ^ <span class="hljs-variable language_">self</span>.mulx(sq[w3], <span class="hljs-number">0x69</span>)) &amp; <span class="hljs-number">0xff</span><br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">int</span>(r0) &lt;&lt; <span class="hljs-number">24</span>) | (<span class="hljs-built_in">int</span>(r1) &lt;&lt; <span class="hljs-number">16</span>) | (<span class="hljs-built_in">int</span>(r2) &lt;&lt; <span class="hljs-number">8</span>) | r3<br></code></pre></td></tr></table></figure><p>先说一下大致的思路，这题我们要拿到flag就要拿到key_stream，而key_stream是由F和lfsr推出来的，F又是由fsm和lfsr推出来的，也就是说我们需要还原fsm和lfsr。所以我们需要去关注一下这两个的推导公式。<br>lfsr:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">lfsr_keystream_mode</span>(<span class="hljs-params">self</span>):<br>    v = (<span class="hljs-variable language_">self</span>.lfsr[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-number">8</span>) ^ <span class="hljs-variable language_">self</span>.mul_alpha((<span class="hljs-variable language_">self</span>.lfsr[<span class="hljs-number">0</span>] &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xff</span>) ^ <span class="hljs-variable language_">self</span>.lfsr[<span class="hljs-number">2</span>] ^ (<span class="hljs-variable language_">self</span>.lfsr[<span class="hljs-number">11</span>] &gt;&gt; <span class="hljs-number">8</span>) ^ \<br>        <span class="hljs-variable language_">self</span>.div_alpha(<span class="hljs-variable language_">self</span>.lfsr[<span class="hljs-number">11</span>] &amp; <span class="hljs-number">0xff</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">15</span>):<br>        <span class="hljs-variable language_">self</span>.lfsr[i] = <span class="hljs-variable language_">self</span>.lfsr[i + <span class="hljs-number">1</span>]<br>    <span class="hljs-variable language_">self</span>.lfsr[<span class="hljs-number">15</span>] = v<br></code></pre></td></tr></table></figure><p>这是一个长15的lfsr，也就是说还原出任意连续15个值，我们就能还原出整个lfsr序列。<br>fsm:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">clock_fsm</span>(<span class="hljs-params">self, s15, s5</span>):<br>        F = (s15 + <span class="hljs-variable language_">self</span>.fsm[<span class="hljs-number">0</span>]) ^ <span class="hljs-variable language_">self</span>.fsm[<span class="hljs-number">1</span>]<br>        r = <span class="hljs-variable language_">self</span>.fsm[<span class="hljs-number">1</span>] + (<span class="hljs-variable language_">self</span>.fsm[<span class="hljs-number">2</span>] ^ s5)<br>        <span class="hljs-variable language_">self</span>.fsm[<span class="hljs-number">2</span>] = <span class="hljs-variable language_">self</span>.s2(<span class="hljs-variable language_">self</span>.fsm[<span class="hljs-number">1</span>])<br>        <span class="hljs-variable language_">self</span>.fsm[<span class="hljs-number">1</span>] = <span class="hljs-variable language_">self</span>.s1(<span class="hljs-variable language_">self</span>.fsm[<span class="hljs-number">0</span>])<br>        <span class="hljs-variable language_">self</span>.fsm[<span class="hljs-number">0</span>] = r<br>        <span class="hljs-keyword">return</span> F<br></code></pre></td></tr></table></figure><p>下一轮的fsm由上一轮的fsm和lfsr共同决定。<br>综上，我们只需要获得连续15个lfsr和这15个对应的最开始的fsm就能还原后面的所有数据。<br>这是我复现时手动还原的思路，实际上只需要不断地检查能否推出新的值就可以了。<del>不用管这些有的没的</del><br>首先正向推下一个数据就不用多说了，源码里都有，直接给你们贴出来了:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">mulx</span>(<span class="hljs-params">V, c</span>):<br>    <span class="hljs-keyword">if</span> V &amp; <span class="hljs-number">0x80</span>:<br>        <span class="hljs-keyword">return</span> (V &lt;&lt; <span class="hljs-number">1</span>) ^ c<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> V &lt;&lt; <span class="hljs-number">1</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mulx_pow</span>(<span class="hljs-params">V, i, c</span>):<br>    <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> V<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> mulx(mulx_pow(V, i - <span class="hljs-number">1</span>, c), c)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mul_alpha</span>(<span class="hljs-params">c</span>):<br>    r0 = mulx_pow(c, <span class="hljs-number">23</span>, <span class="hljs-number">0xa9</span>) &amp; <span class="hljs-number">0xff</span><br>    r1 = mulx_pow(c, <span class="hljs-number">245</span>, <span class="hljs-number">0xa9</span>) &amp; <span class="hljs-number">0xff</span><br>    r2 = mulx_pow(c, <span class="hljs-number">48</span>, <span class="hljs-number">0xa9</span>) &amp;  <span class="hljs-number">0xff</span><br>    r3 = mulx_pow(c, <span class="hljs-number">239</span>, <span class="hljs-number">0xa9</span>) &amp;  <span class="hljs-number">0xff</span><br>    <span class="hljs-keyword">return</span> (r0 &lt;&lt; <span class="hljs-number">24</span>) | (r1 &lt;&lt; <span class="hljs-number">16</span>) | (r2 &lt;&lt; <span class="hljs-number">8</span>) | r3<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">div_alpha</span>(<span class="hljs-params">c</span>):<br>    r0 = mulx_pow(c, <span class="hljs-number">16</span>, <span class="hljs-number">0xa9</span>) &amp;  <span class="hljs-number">0xff</span><br>    r1 = mulx_pow(c, <span class="hljs-number">39</span>, <span class="hljs-number">0xa9</span>) &amp;  <span class="hljs-number">0xff</span><br>    r2 = mulx_pow(c, <span class="hljs-number">6</span>, <span class="hljs-number">0xa9</span>) &amp;  <span class="hljs-number">0xff</span><br>    r3 = mulx_pow(c, <span class="hljs-number">64</span>, <span class="hljs-number">0xa9</span>) &amp;  <span class="hljs-number">0xff</span><br>    <span class="hljs-keyword">return</span> (r0 &lt;&lt; <span class="hljs-number">24</span>) | (r1 &lt;&lt; <span class="hljs-number">16</span>) | (r2 &lt;&lt; <span class="hljs-number">8</span>) | r3<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">s1</span>(<span class="hljs-params">w</span>):<br>    w0 = (w &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xff</span><br>    w1 = (w &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xff</span><br>    w2 = (w &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xff</span><br>    w3 = w &amp; <span class="hljs-number">0xff</span><br><br>    r0 = (mulx(sr[w0], <span class="hljs-number">0x1b</span>) ^ sr[w1] ^ sr[w2] ^ mulx(sr[w3], <span class="hljs-number">0x1b</span>) ^ sr[w3]) &amp; <span class="hljs-number">0xff</span><br>    r1 = (mulx(sr[w0], <span class="hljs-number">0x1b</span>) ^ sr[w0] ^ mulx(sr[w1], <span class="hljs-number">0x1b</span>) ^ sr[w2] ^ sr[w3]) &amp; <span class="hljs-number">0xff</span><br>    r2 = (sr[w0] ^ mulx(sr[w1], <span class="hljs-number">0x1b</span>) ^ sr[w1] ^ mulx(sr[w2], <span class="hljs-number">0x1b</span>) ^ sr[w3]) &amp; <span class="hljs-number">0xff</span><br>    r3 = (sr[w0] ^ sr[w1] ^ mulx(sr[w2], <span class="hljs-number">0x1b</span>) ^ sr[w2] ^ mulx(sr[w3], <span class="hljs-number">0x1b</span>)) &amp; <span class="hljs-number">0xff</span><br><br>    <span class="hljs-keyword">return</span> (<span class="hljs-built_in">int</span>(r0) &lt;&lt; <span class="hljs-number">24</span>) | (<span class="hljs-built_in">int</span>(r1) &lt;&lt; <span class="hljs-number">16</span>) | (<span class="hljs-built_in">int</span>(r2) &lt;&lt; <span class="hljs-number">8</span>) | <span class="hljs-built_in">int</span>(r3)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">s2</span>(<span class="hljs-params">w</span>):<br>    w0 = (w &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xff</span><br>    w1 = (w &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xff</span><br>    w2 = (w &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xff</span><br>    w3 = w &amp; <span class="hljs-number">0xff</span><br><br>    r0 = (mulx(sq[w0], <span class="hljs-number">0x69</span>) ^ sq[w1] ^ sq[w2] ^ mulx(sq[w3], <span class="hljs-number">0x69</span>) ^ sq[w3]) &amp; <span class="hljs-number">0xff</span><br>    r1 = (mulx(sq[w0], <span class="hljs-number">0x69</span>) ^ sq[w0] ^ mulx(sq[w1], <span class="hljs-number">0x69</span>) ^ sq[w2] ^ sq[w3]) &amp; <span class="hljs-number">0xff</span><br>    r2 = (sq[w0] ^ mulx(sq[w1], <span class="hljs-number">0x69</span>) ^ sq[w1] ^ mulx(sq[w2], <span class="hljs-number">0x69</span>) ^ sq[w3]) &amp; <span class="hljs-number">0xff</span><br>    r3 = (sq[w0] ^ sq[w1] ^ mulx(sq[w2], <span class="hljs-number">0x69</span>) ^ sq[w2] ^ mulx(sq[w3], <span class="hljs-number">0x69</span>)) &amp; <span class="hljs-number">0xff</span><br>    <span class="hljs-keyword">return</span> (<span class="hljs-built_in">int</span>(r0) &lt;&lt; <span class="hljs-number">24</span>) | (<span class="hljs-built_in">int</span>(r1) &lt;&lt; <span class="hljs-number">16</span>) | (<span class="hljs-built_in">int</span>(r2) &lt;&lt; <span class="hljs-number">8</span>) | <span class="hljs-built_in">int</span>(r3)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">clock_fsm</span>(<span class="hljs-params">s15, s5</span>):<br>    F = (s15 + fsm[<span class="hljs-number">0</span>]) ^ fsm[<span class="hljs-number">1</span>]<br>    r = fsm[<span class="hljs-number">1</span>] + (fsm[<span class="hljs-number">2</span>] ^ s5)<br>    fsm[<span class="hljs-number">2</span>] = s2(fsm[<span class="hljs-number">1</span>])<br>    fsm[<span class="hljs-number">1</span>] = s1(fsm[<span class="hljs-number">0</span>])<br>    fsm[<span class="hljs-number">0</span>] = r<br>    <span class="hljs-keyword">return</span> F<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lfsr_keystream_mode</span>(<span class="hljs-params">S0,S2,S11</span>):<br>    v = (S0 &lt;&lt; <span class="hljs-number">8</span>) ^ mul_alpha((S0 &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xff</span>) ^ S2 ^ (S11 &gt;&gt; <span class="hljs-number">8</span>) ^ \<br>        div_alpha(S11 &amp; <span class="hljs-number">0xff</span>)<br>    <span class="hljs-keyword">return</span> v<br></code></pre></td></tr></table></figure><p>之后我们就需要来通过下一个值来反推上一个值了。我是用的z3来解的。<br>对于s1，s2，函数内部是有对sr，sq的切片的，并且sr，sq里面每一个值都是唯一的，所以我们直接把这4个切片的值设为未知数，解出来后直接在sr，sq里找对应的索引即可。<br>同时我们需要重新定义一下mulx(AI是说是算术右移和逻辑右移的原因，实际解是需要重新定义的)，直接就在函数里面临时定义了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">de_s1</span>(<span class="hljs-params">s</span>):<br>    r0=(s&gt;&gt;<span class="hljs-number">24</span>)&amp;<span class="hljs-number">0xff</span><br>    r1=(s&gt;&gt;<span class="hljs-number">16</span>)&amp;<span class="hljs-number">0xff</span><br>    r2=(s&gt;&gt;<span class="hljs-number">8</span>)&amp;<span class="hljs-number">0xff</span><br>    r3=s&amp;<span class="hljs-number">0xff</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">mulx</span>(<span class="hljs-params">V, c</span>):<br>        <span class="hljs-keyword">return</span> (V &lt;&lt; <span class="hljs-number">1</span>) ^ (c*LShR(V, <span class="hljs-number">7</span>))&amp; <span class="hljs-number">0xff</span><br>    solver=Solver()<br>    srw0,srw1,srw2,srw3=BitVecs(<span class="hljs-string">&#x27;srw0 srw1 srw2 srw3&#x27;</span>, <span class="hljs-number">8</span>)<br>    solver.add(r0 == (mulx(srw0, <span class="hljs-number">0x1b</span>) ^ srw1 ^ srw2 ^mulx(srw3, <span class="hljs-number">0x1b</span>) ^ srw3) &amp; <span class="hljs-number">0xff</span>)<br>    solver.add(r1 == (mulx(srw0, <span class="hljs-number">0x1b</span>) ^ srw0 ^ mulx(srw1, <span class="hljs-number">0x1b</span>) ^ srw2 ^ srw3) &amp; <span class="hljs-number">0xff</span>)<br>    solver.add(r2 == (srw0 ^ mulx(srw1, <span class="hljs-number">0x1b</span>) ^ srw1 ^ mulx(srw2, <span class="hljs-number">0x1b</span>) ^ srw3) &amp; <span class="hljs-number">0xff</span>)<br>    solver.add(r3 == (srw0 ^ srw1 ^ mulx(srw2, <span class="hljs-number">0x1b</span>) ^ srw2 ^ mulx(srw3, <span class="hljs-number">0x1b</span>)) &amp; <span class="hljs-number">0xff</span>)<br><br>    <span class="hljs-keyword">if</span> solver.check()==sat:<br>        res=solver.model()<br>        __sr=sr.tolist()<br>        w0=__sr.index(res[srw0].py_value())<br>        w1=__sr.index(res[srw1].py_value())<br>        w2=__sr.index(res[srw2].py_value())<br>        w3=__sr.index(res[srw3].py_value())<br>        <span class="hljs-keyword">return</span> (w0 &lt;&lt; <span class="hljs-number">24</span>) | (w1 &lt;&lt; <span class="hljs-number">16</span>) | (w2 &lt;&lt; <span class="hljs-number">8</span>) | w3<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">de_s2</span>(<span class="hljs-params">s</span>):<br>    r0=(s&gt;&gt;<span class="hljs-number">24</span>)&amp;<span class="hljs-number">0xff</span><br>    r1=(s&gt;&gt;<span class="hljs-number">16</span>)&amp;<span class="hljs-number">0xff</span><br>    r2=(s&gt;&gt;<span class="hljs-number">8</span>)&amp;<span class="hljs-number">0xff</span><br>    r3=s&amp;<span class="hljs-number">0xff</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">mulx</span>(<span class="hljs-params">V, c</span>):<br>        <span class="hljs-keyword">return</span> (V &lt;&lt; <span class="hljs-number">1</span>) ^ (c*LShR(V, <span class="hljs-number">7</span>))&amp; <span class="hljs-number">0xff</span><br>    solver=Solver()<br>    sqw0,sqw1,sqw2,sqw3=BitVecs(<span class="hljs-string">&#x27;sqw0 sqw1 sqw2 sqw3&#x27;</span>, <span class="hljs-number">8</span>)<br>    solver.add(r0 == (mulx(sqw0, <span class="hljs-number">0x69</span>) ^ sqw1 ^ sqw2 ^mulx(sqw3, <span class="hljs-number">0x69</span>) ^ sqw3) &amp; <span class="hljs-number">0xff</span>)<br>    solver.add(r1 == (mulx(sqw0, <span class="hljs-number">0x69</span>) ^ sqw0 ^ mulx(sqw1, <span class="hljs-number">0x69</span>) ^ sqw2 ^ sqw3) &amp; <span class="hljs-number">0xff</span>)<br>    solver.add(r2 == (sqw0 ^ mulx(sqw1, <span class="hljs-number">0x69</span>) ^ sqw1 ^ mulx(sqw2, <span class="hljs-number">0x69</span>) ^ sqw3) &amp; <span class="hljs-number">0xff</span>)<br>    solver.add(r3 == (sqw0 ^ sqw1 ^ mulx(sqw2, <span class="hljs-number">0x69</span>) ^ sqw2 ^ mulx(sqw3, <span class="hljs-number">0x69</span>)) &amp; <span class="hljs-number">0xff</span>)<br><br>    <span class="hljs-keyword">if</span> solver.check()==sat:<br>        res=solver.model()<br>        __sq=sq.tolist()<br>        w0=__sq.index(res[sqw0].py_value())<br>        w1=__sq.index(res[sqw1].py_value())<br>        w2=__sq.index(res[sqw2].py_value())<br>        w3=__sq.index(res[sqw3].py_value())<br>        <span class="hljs-keyword">return</span> (w0 &lt;&lt; <span class="hljs-number">24</span>) | (w1 &lt;&lt; <span class="hljs-number">16</span>) | (w2 &lt;&lt; <span class="hljs-number">8</span>) | w3<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>题目中我们可以看到lfsr的值都被添加进S中了，所以可以认为S序列包含了lfsr的各个状态的值(可能最开始的没有，但不重要)。<br>接下来就是对lfsr_keystream_mode的逆向了。lfsr是由前面的3个值来推出下一个值的，也就是说我们需要3个值，剩下的值才能被确定。我同样采取解方程的方式来求解其中任意一个值。但我在实际求解的时候发现S11的值大部分情况求解不对，暂时也不知道是什么的问题。但在最后只需要稍微改动一下就可以避免去用de_lfsr_keystream_mode来求解S11，S11还可以由别的数据来确定。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">de_lfsr_keystream_mode</span>(<span class="hljs-params">S0, S2, S11, S16</span>):<br>    <span class="hljs-keyword">if</span> S0 == <span class="hljs-string">&#x27;&#x27;</span>:<br>        S0 = BitVec(<span class="hljs-string">&#x27;S0&#x27;</span>, <span class="hljs-number">32</span>)<br>    <span class="hljs-keyword">else</span>:<br>        S0 = np.uint32(S0)<br>    <span class="hljs-keyword">if</span> S2 == <span class="hljs-string">&#x27;&#x27;</span>:<br>        S2 = BitVec(<span class="hljs-string">&#x27;S2&#x27;</span>, <span class="hljs-number">32</span>)<br>    <span class="hljs-keyword">else</span>:<br>        S2 = np.uint32(S2)<br>    <span class="hljs-keyword">if</span> S11 == <span class="hljs-string">&#x27;&#x27;</span>:<br>        S11 = BitVec(<span class="hljs-string">&#x27;S11&#x27;</span>, <span class="hljs-number">32</span>)<br>    <span class="hljs-keyword">else</span>:<br>        S11 = np.uint32(S11)<br>    <span class="hljs-keyword">if</span> S16 == <span class="hljs-string">&#x27;&#x27;</span>:<br>        S16 = BitVec(<span class="hljs-string">&#x27;S16&#x27;</span>, <span class="hljs-number">32</span>)<br>    <span class="hljs-keyword">else</span>:<br>        S16 = np.uint32(S16)<br>        <br>    solver = Solver()<br>    solver.add(S16 == lfsr_keystream_mode(S0, S2, S11))<br><br>    <span class="hljs-keyword">if</span> solver.check() == sat:<br>        res = solver.model()<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(S0, BitVecRef):<br>            <span class="hljs-keyword">return</span> res[S0].as_long()<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(S2, BitVecRef):<br>            <span class="hljs-keyword">return</span> res[S2].as_long()<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(S11, BitVecRef):<br>            <span class="hljs-keyword">return</span> res[S11].as_long()<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(S16, BitVecRef):<br>            <span class="hljs-keyword">return</span> res[S16].as_long()<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>写完了这三个函数的逆向求解的函数，我们来理一下fsm,lfsr,S,F,key_stream之间的关系。<br>前面我们提到lfsr的值都被添加进了S，所以可以用S来代替lfsr序列，大致是如下的对应关系。<br><img src="/2025/02/01/2024%E6%B5%99%E6%B1%9F%E7%9C%81%E8%B5%9B/3.png"><br>所以接下来我就用<code>S[i+k]</code>来表示第i+1轮第k+1个lfsr的值，以<code>S[0+0]</code>为第1轮第1个lfsr的值。<br>然后是fsm，fsm的值的推导是在clock_fsm中，在generate_keystream里调用完clock_fsm函数后，R1,R2,R3添加的是第i+2轮的fsm的值，而S添加的是第i+1轮第一个lfsr的值，return的F是第i+1轮的fsm,lfsr的值得出的。但在for循环之前R1,R2,R3先append了一轮，所以每次for循环就类似于下面这种情况:<br><img src="/2025/02/01/2024%E6%B5%99%E6%B1%9F%E7%9C%81%E8%B5%9B/4.png"><br>所以接下来我用<code>fsm[i][k]</code>来表示第<code>i+1</code>轮<code>R(k+1)</code>的值，以<code>fsm[0][0]</code>为第1轮R1的值，也就是<code>R1[0]</code>。<br>那么，各个数据之间的关系就是:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs link">F[i]是S[i+15],fsm[i][0],fsm[i][1]得出的<br>fsm[i+1][2]是fsm[i][1]得出的<br>fsm[i+1][1]是fsm[i][0]得出的<br>fsm[i+1][0]是fsm[i][1],fsm[i][2],S[i+5]得出的<br></code></pre></td></tr></table></figure><p>请牢记这些关系，等下会经常用到。</p><p>我在初始化key_stream,fsm,S,F的时候是用的空字符串来初始化，因为它能在我尝试用未知的值来推别的值时报错，来让我更好的发现错误。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">key_stream=[<span class="hljs-string">&#x27;&#x27;</span>]*<span class="hljs-number">150</span><br>fsm=[[<span class="hljs-string">&#x27;&#x27;</span>]*<span class="hljs-number">3</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">150</span>)]<br>S=[<span class="hljs-string">&#x27;&#x27;</span>]*<span class="hljs-number">150</span><br>F=[<span class="hljs-string">&#x27;&#x27;</span>]*<span class="hljs-number">150</span><br></code></pre></td></tr></table></figure><p>接下来我们来写check函数，顾名思义，就是检查能否推出别的值。<br>首先是S序列，我们可以由任意三个值推出剩下的一个值。所以我们要的数据就是<code>S[i],S[i+2],S[i+11],S[i+15+1]</code>(lfsr序列推出的下一个值是赋S[i+15+1]的，而不是S[i+15]，不懂的再想一下)。<br>checkS:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#检查S序列能否向后推导或者推出前面的某一个值</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">checkS</span>():<br>    flag=<span class="hljs-literal">False</span><span class="hljs-comment">#标记是否有check出新的值</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(S)-<span class="hljs-number">16</span>):<br>        __l=[<span class="hljs-built_in">type</span>(S[i]),<span class="hljs-built_in">type</span>(S[i+<span class="hljs-number">2</span>]),<span class="hljs-built_in">type</span>(S[i+<span class="hljs-number">11</span>]),<span class="hljs-built_in">type</span>(S[i+<span class="hljs-number">15</span>+<span class="hljs-number">1</span>])]<br>        <span class="hljs-keyword">if</span> __l.count(<span class="hljs-built_in">int</span>)==<span class="hljs-number">3</span>:<br>            flag=<span class="hljs-literal">True</span><br>            <span class="hljs-keyword">if</span> __l.index(<span class="hljs-built_in">str</span>)==<span class="hljs-number">3</span>:<br>                S[i+<span class="hljs-number">15</span>+<span class="hljs-number">1</span>]=<span class="hljs-built_in">int</span>(lfsr_keystream_mode(np.uint32(S[i+<span class="hljs-number">0</span>]),np.uint32(S[i+<span class="hljs-number">2</span>]),np.uint32(S[i+<span class="hljs-number">11</span>])))<br>            <span class="hljs-keyword">else</span>:<br>                __index=[i,i+<span class="hljs-number">2</span>,i+<span class="hljs-number">11</span>,i+<span class="hljs-number">15</span>+<span class="hljs-number">1</span>]<br>                S[__index[__l.index(<span class="hljs-built_in">str</span>)]]=de_lfsr_keystream_mode(S[i],S[i+<span class="hljs-number">2</span>],S[i+<span class="hljs-number">11</span>],S[i+<span class="hljs-number">15</span>+<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">return</span> flag<br></code></pre></td></tr></table></figure><p>再提一下，我的de_lfsr_keystream_mode并不能很好的解<code>S[i+11]</code>是未知数的情况，如果你发现了我的de_lfsr_keystream_mode的错误请和我说一下。我们最后只需要更改一下checkS的调用顺序就能避免这种情况，很神奇。</p><p>然后是fsm序列的向前逆向推导和向后推导，对于<code>fsm[i][0]</code>，只要知道其中任意三个值就可以推出剩下的一个值。<br>checkFSM:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#检查fsm能否向前或向后推导</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">checkFSM</span>():<br>    flag=<span class="hljs-literal">False</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(fsm)-<span class="hljs-number">5</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(fsm[i][<span class="hljs-number">1</span>])==<span class="hljs-built_in">int</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(fsm[i+<span class="hljs-number">1</span>][<span class="hljs-number">2</span>])!=<span class="hljs-built_in">int</span>:<span class="hljs-comment">#fsm[i][1] -s2-&gt; fsm[i+1][2]</span><br>            fsm[i+<span class="hljs-number">1</span>][<span class="hljs-number">2</span>]=<span class="hljs-built_in">int</span>(s2(fsm[i][<span class="hljs-number">1</span>]))<br>            flag=<span class="hljs-literal">True</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(fsm[i][<span class="hljs-number">0</span>])==<span class="hljs-built_in">int</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(fsm[i+<span class="hljs-number">1</span>][<span class="hljs-number">1</span>])!=<span class="hljs-built_in">int</span>:<span class="hljs-comment">#fsm[i][0] -s1-&gt; fsm[i+1][1]</span><br>            fsm[i+<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=<span class="hljs-built_in">int</span>(s1(fsm[i][<span class="hljs-number">0</span>]))<br>            flag=<span class="hljs-literal">True</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(fsm[i][<span class="hljs-number">1</span>])!=<span class="hljs-built_in">int</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(fsm[i+<span class="hljs-number">1</span>][<span class="hljs-number">2</span>])==<span class="hljs-built_in">int</span>:<span class="hljs-comment">#fsm[i][1] -de_s2-&gt; fsm[i+1][2]</span><br>            fsm[i][<span class="hljs-number">1</span>]=de_s2(fsm[i+<span class="hljs-number">1</span>][<span class="hljs-number">2</span>])<br>            flag=<span class="hljs-literal">True</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(fsm[i][<span class="hljs-number">0</span>])!=<span class="hljs-built_in">int</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(fsm[i+<span class="hljs-number">1</span>][<span class="hljs-number">1</span>])==<span class="hljs-built_in">int</span>:<span class="hljs-comment">#fsm[i][0] -de_s1-&gt; fsm[i+1][1]</span><br>            fsm[i][<span class="hljs-number">0</span>]=de_s1(fsm[i+<span class="hljs-number">1</span>][<span class="hljs-number">1</span>])<br>            flag=<span class="hljs-literal">True</span><br>        <span class="hljs-comment">#对于fsm[i][0]，只要知道其中任意三个值就可以推出剩下的一个值，所以顺带都写在这了</span><br>        __l=[<span class="hljs-built_in">type</span>(fsm[i][<span class="hljs-number">1</span>]),<span class="hljs-built_in">type</span>(fsm[i][<span class="hljs-number">2</span>]),<span class="hljs-built_in">type</span>(S[i+<span class="hljs-number">5</span>]),<span class="hljs-built_in">type</span>(fsm[i+<span class="hljs-number">1</span>][<span class="hljs-number">0</span>])]<br>        <span class="hljs-keyword">if</span> __l.count(<span class="hljs-built_in">int</span>)==<span class="hljs-number">3</span>:<br>            flag=<span class="hljs-literal">True</span><br>            __=__l.index(<span class="hljs-built_in">str</span>)<br>            <span class="hljs-keyword">if</span> __==<span class="hljs-number">0</span>:<br>                fsm[i][<span class="hljs-number">1</span>]=(fsm[i+<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]-(fsm[i][<span class="hljs-number">2</span>]^S[i+<span class="hljs-number">5</span>]))%<span class="hljs-number">2</span>**<span class="hljs-number">32</span><br>            <span class="hljs-keyword">elif</span> __==<span class="hljs-number">1</span>:<br>                fsm[i][<span class="hljs-number">2</span>]=((fsm[i+<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]-fsm[i][<span class="hljs-number">1</span>])^S[i+<span class="hljs-number">5</span>])%<span class="hljs-number">2</span>**<span class="hljs-number">32</span><br>            <span class="hljs-keyword">elif</span> __==<span class="hljs-number">2</span>:<br>                S[i+<span class="hljs-number">5</span>]=((fsm[i+<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]-fsm[i][<span class="hljs-number">1</span>])^fsm[i][<span class="hljs-number">2</span>])%<span class="hljs-number">2</span>**<span class="hljs-number">32</span><br>            <span class="hljs-keyword">elif</span> __==<span class="hljs-number">3</span>:<br>                fsm[i+<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]=(fsm[i][<span class="hljs-number">1</span>]+(fsm[i][<span class="hljs-number">2</span>]^S[i+<span class="hljs-number">5</span>]))%<span class="hljs-number">2</span>**<span class="hljs-number">32</span><br>    <span class="hljs-keyword">return</span> flag<br></code></pre></td></tr></table></figure><p>在clock_fsm中还有对F的赋值，我们也可以由任意3个值推出剩下的<br>checkFSFSM:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#检查clock_fsm里面的F的推导，只要知道其中任意三个值就可以推出剩下的一个值</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">checkFSFSM</span>():<br>    flag=<span class="hljs-literal">False</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(S)-<span class="hljs-number">15</span>):<br>        __l=[<span class="hljs-built_in">type</span>(fsm[i][<span class="hljs-number">0</span>]),<span class="hljs-built_in">type</span>(fsm[i][<span class="hljs-number">1</span>]),<span class="hljs-built_in">type</span>(F[i]),<span class="hljs-built_in">type</span>(S[i+<span class="hljs-number">15</span>])]<br>        <span class="hljs-keyword">if</span> __l.count(<span class="hljs-built_in">int</span>)==<span class="hljs-number">3</span>:<br>            flag=<span class="hljs-literal">True</span><br>            __=__l.index(<span class="hljs-built_in">str</span>)<br>            <span class="hljs-keyword">if</span> __==<span class="hljs-number">0</span>:<br>                fsm[i][<span class="hljs-number">0</span>]=((F[i]^fsm[i][<span class="hljs-number">1</span>])-S[i+<span class="hljs-number">15</span>])%<span class="hljs-number">2</span>**<span class="hljs-number">32</span><br>            <span class="hljs-keyword">elif</span> __==<span class="hljs-number">1</span>:<br>                fsm[i][<span class="hljs-number">1</span>]=(F[i]^(S[i+<span class="hljs-number">15</span>]+fsm[i][<span class="hljs-number">0</span>]))%<span class="hljs-number">2</span>**<span class="hljs-number">32</span><br>            <span class="hljs-keyword">elif</span> __==<span class="hljs-number">2</span>:<br>                F[i]=((S[i+<span class="hljs-number">15</span>]+fsm[i][<span class="hljs-number">0</span>])^fsm[i][<span class="hljs-number">1</span>])%<span class="hljs-number">2</span>**<span class="hljs-number">32</span><br>            <span class="hljs-keyword">elif</span> __==<span class="hljs-number">3</span>:<br>                S[i+<span class="hljs-number">15</span>]=((F[i]^fsm[i][<span class="hljs-number">1</span>])-fsm[i][<span class="hljs-number">0</span>])%<span class="hljs-number">2</span>**<span class="hljs-number">32</span><br>    <span class="hljs-keyword">return</span> flag<br></code></pre></td></tr></table></figure><p>最后就是key_stream了，知道key_stream,F,S(也就是lfsr)任意2个可以推出剩下的一个<br>checkFSSTREAM:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#检查F,S,key_stream的互相之间的推导，知道任意2个可以推出剩下的一个</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">checkFSSTREAM</span>():<br>    flag=<span class="hljs-literal">False</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(key_stream)):<br>        __l=[<span class="hljs-built_in">type</span>(key_stream[i]),<span class="hljs-built_in">type</span>(F[i]),<span class="hljs-built_in">type</span>(S[i])]<br>        <span class="hljs-keyword">if</span> __l.count(<span class="hljs-built_in">int</span>)==<span class="hljs-number">2</span>:<br>            flag=<span class="hljs-literal">True</span><br>            __=__l.index(<span class="hljs-built_in">str</span>)<br>            <span class="hljs-keyword">if</span> __==<span class="hljs-number">0</span>:<br>                key_stream[i]=F[i]^S[i]<br>            <span class="hljs-keyword">elif</span> __==<span class="hljs-number">1</span>:<br>                F[i]=key_stream[i]^S[i]<br>            <span class="hljs-keyword">elif</span> __==<span class="hljs-number">2</span>:<br>                S[i]=key_stream[i]^F[i]<br>    <span class="hljs-keyword">return</span> flag<br></code></pre></td></tr></table></figure><p>最后把这些函数全丢进一个函数里调用就好了，我本地调试时加了一个checkCORRECT来检验正确性。<br>因为我de_lfsr_keystream_mode的问题，所以把checkS尽量在后面调用。<br>checkALL():</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">checkALL</span>():<br>    flag=checkFSM()<br>    flag=flag <span class="hljs-keyword">or</span> checkFSFSM()<br>    flag=flag <span class="hljs-keyword">or</span> checkFSSTREAM()<br>    flag=flag <span class="hljs-keyword">or</span> checkS()<br>    checkCORRECT()<br>    <span class="hljs-keyword">return</span> flag<br></code></pre></td></tr></table></figure><p>只需要不断调用checkALL直到返回值是False即可。<br>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># 定义 S-box</span><br>sr = np.array([<br>    <span class="hljs-number">0x63</span>, <span class="hljs-number">0x7c</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x7b</span>, <span class="hljs-number">0xf2</span>, <span class="hljs-number">0x6b</span>, <span class="hljs-number">0x6f</span>, <span class="hljs-number">0xc5</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x2b</span>, <span class="hljs-number">0xfe</span>, <span class="hljs-number">0xd7</span>, <span class="hljs-number">0xab</span>, <span class="hljs-number">0x76</span>,<br>    <span class="hljs-number">0xca</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0xc9</span>, <span class="hljs-number">0x7d</span>, <span class="hljs-number">0xfa</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0xf0</span>, <span class="hljs-number">0xad</span>, <span class="hljs-number">0xd4</span>, <span class="hljs-number">0xa2</span>, <span class="hljs-number">0xaf</span>, <span class="hljs-number">0x9c</span>, <span class="hljs-number">0xa4</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xc0</span>,<br>    <span class="hljs-number">0xb7</span>, <span class="hljs-number">0xfd</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x3f</span>, <span class="hljs-number">0xf7</span>, <span class="hljs-number">0xcc</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0xa5</span>, <span class="hljs-number">0xe5</span>, <span class="hljs-number">0xf1</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0xd8</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x15</span>,<br>    <span class="hljs-number">0x04</span>, <span class="hljs-number">0xc7</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0xc3</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x9a</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xe2</span>, <span class="hljs-number">0xeb</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xb2</span>, <span class="hljs-number">0x75</span>,<br>    <span class="hljs-number">0x09</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0x1a</span>, <span class="hljs-number">0x1b</span>, <span class="hljs-number">0x6e</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0xa0</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x3b</span>, <span class="hljs-number">0xd6</span>, <span class="hljs-number">0xb3</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xe3</span>, <span class="hljs-number">0x2f</span>, <span class="hljs-number">0x84</span>,<br>    <span class="hljs-number">0x53</span>, <span class="hljs-number">0xd1</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xed</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xfc</span>, <span class="hljs-number">0xb1</span>, <span class="hljs-number">0x5b</span>, <span class="hljs-number">0x6a</span>, <span class="hljs-number">0xcb</span>, <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x4a</span>, <span class="hljs-number">0x4c</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xcf</span>,<br>    <span class="hljs-number">0xd0</span>, <span class="hljs-number">0xef</span>, <span class="hljs-number">0xaa</span>, <span class="hljs-number">0xfb</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x4d</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0xf9</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x7f</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x3c</span>, <span class="hljs-number">0x9f</span>, <span class="hljs-number">0xa8</span>,<br>    <span class="hljs-number">0x51</span>, <span class="hljs-number">0xa3</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x8f</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x9d</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xf5</span>, <span class="hljs-number">0xbc</span>, <span class="hljs-number">0xb6</span>, <span class="hljs-number">0xda</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0xf3</span>, <span class="hljs-number">0xd2</span>,<br>    <span class="hljs-number">0xcd</span>, <span class="hljs-number">0x0c</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xec</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xc4</span>, <span class="hljs-number">0xa7</span>, <span class="hljs-number">0x7e</span>, <span class="hljs-number">0x3d</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x5d</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x73</span>,<br>    <span class="hljs-number">0x60</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x4f</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x2a</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0xee</span>, <span class="hljs-number">0xb8</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xde</span>, <span class="hljs-number">0x5e</span>, <span class="hljs-number">0x0b</span>, <span class="hljs-number">0xdb</span>,<br>    <span class="hljs-number">0xe0</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x3a</span>, <span class="hljs-number">0x0a</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x5c</span>, <span class="hljs-number">0xc2</span>, <span class="hljs-number">0xd3</span>, <span class="hljs-number">0xac</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xe4</span>, <span class="hljs-number">0x79</span>,<br>    <span class="hljs-number">0xe7</span>, <span class="hljs-number">0xc8</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x6d</span>, <span class="hljs-number">0x8d</span>, <span class="hljs-number">0xd5</span>, <span class="hljs-number">0x4e</span>, <span class="hljs-number">0xa9</span>, <span class="hljs-number">0x6c</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0xf4</span>, <span class="hljs-number">0xea</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x7a</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0x08</span>,<br>    <span class="hljs-number">0xba</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x2e</span>, <span class="hljs-number">0x1c</span>, <span class="hljs-number">0xa6</span>, <span class="hljs-number">0xb4</span>, <span class="hljs-number">0xc6</span>, <span class="hljs-number">0xe8</span>, <span class="hljs-number">0xdd</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x1f</span>, <span class="hljs-number">0x4b</span>, <span class="hljs-number">0xbd</span>, <span class="hljs-number">0x8b</span>, <span class="hljs-number">0x8a</span>,<br>    <span class="hljs-number">0x70</span>, <span class="hljs-number">0x3e</span>, <span class="hljs-number">0xb5</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xf6</span>, <span class="hljs-number">0x0e</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xb9</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0xc1</span>, <span class="hljs-number">0x1d</span>, <span class="hljs-number">0x9e</span>,<br>    <span class="hljs-number">0xe1</span>, <span class="hljs-number">0xf8</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0xd9</span>, <span class="hljs-number">0x8e</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x9b</span>, <span class="hljs-number">0x1e</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0xe9</span>, <span class="hljs-number">0xce</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xdf</span>,<br>    <span class="hljs-number">0x8c</span>, <span class="hljs-number">0xa1</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x0d</span>, <span class="hljs-number">0xbf</span>, <span class="hljs-number">0xe6</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x2d</span>, <span class="hljs-number">0x0f</span>, <span class="hljs-number">0xb0</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0xbb</span>, <span class="hljs-number">0x16</span><br>], dtype=np.uint8)<br><br>sq = np.array([<br>    <span class="hljs-number">0x25</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xd7</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0x5c</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0xa4</span>, <span class="hljs-number">0xee</span>, <span class="hljs-number">0x6e</span>, <span class="hljs-number">0xcb</span>, <span class="hljs-number">0x7d</span>, <span class="hljs-number">0xb5</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0xdb</span>,<br>    <span class="hljs-number">0xe4</span>, <span class="hljs-number">0x8e</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x4f</span>, <span class="hljs-number">0x5d</span>, <span class="hljs-number">0x6a</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xe8</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x5e</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0xe2</span>,<br>    <span class="hljs-number">0xd8</span>, <span class="hljs-number">0xe9</span>, <span class="hljs-number">0xcc</span>, <span class="hljs-number">0xed</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x2f</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xd2</span>, <span class="hljs-number">0xac</span>, <span class="hljs-number">0xe3</span>, <span class="hljs-number">0x4a</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x1b</span>, <span class="hljs-number">0xb9</span>,<br>    <span class="hljs-number">0xb2</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0xa6</span>, <span class="hljs-number">0x2e</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x4b</span>, <span class="hljs-number">0x0e</span>, <span class="hljs-number">0xc1</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0xaa</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xd4</span>,<br>    <span class="hljs-number">0xca</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0xb3</span>, <span class="hljs-number">0xef</span>, <span class="hljs-number">0xdd</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x7b</span>, <span class="hljs-number">0xc2</span>, <span class="hljs-number">0x7f</span>, <span class="hljs-number">0xbe</span>, <span class="hljs-number">0xc3</span>, <span class="hljs-number">0x9f</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x4c</span>, <span class="hljs-number">0x64</span>,<br>    <span class="hljs-number">0x83</span>, <span class="hljs-number">0xa2</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xb4</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0xcd</span>, <span class="hljs-number">0xba</span>, <span class="hljs-number">0xc6</span>, <span class="hljs-number">0xbb</span>, <span class="hljs-number">0x6d</span>, <span class="hljs-number">0x4d</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0xf4</span>,<br>    <span class="hljs-number">0x8d</span>, <span class="hljs-number">0xb0</span>, <span class="hljs-number">0xe5</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0xfe</span>, <span class="hljs-number">0x8f</span>, <span class="hljs-number">0xe6</span>, <span class="hljs-number">0xcf</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0xfa</span>,<br>    <span class="hljs-number">0xbc</span>, <span class="hljs-number">0x0f</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x1d</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x1a</span>, <span class="hljs-number">0xc5</span>, <span class="hljs-number">0x4e</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x7a</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0x5b</span>, <span class="hljs-number">0x5a</span>,<br>    <span class="hljs-number">0xeb</span>, <span class="hljs-number">0x9a</span>, <span class="hljs-number">0x1c</span>, <span class="hljs-number">0xa9</span>, <span class="hljs-number">0xd1</span>, <span class="hljs-number">0x7e</span>, <span class="hljs-number">0x0d</span>, <span class="hljs-number">0xfc</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x8a</span>, <span class="hljs-number">0xb6</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0xf5</span>, <span class="hljs-number">0x0a</span>, <span class="hljs-number">0xf8</span>, <span class="hljs-number">0xdc</span>,<br>    <span class="hljs-number">0x03</span>, <span class="hljs-number">0x3c</span>, <span class="hljs-number">0x0c</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0xf1</span>, <span class="hljs-number">0xb8</span>, <span class="hljs-number">0xf3</span>, <span class="hljs-number">0x3d</span>, <span class="hljs-number">0xf2</span>, <span class="hljs-number">0xd5</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0xa0</span>, <span class="hljs-number">0x00</span>,<br>    <span class="hljs-number">0x06</span>, <span class="hljs-number">0xce</span>, <span class="hljs-number">0xf6</span>, <span class="hljs-number">0xea</span>, <span class="hljs-number">0xb7</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xf7</span>, <span class="hljs-number">0x8c</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0xd6</span>, <span class="hljs-number">0xa7</span>, <span class="hljs-number">0xbf</span>, <span class="hljs-number">0x8b</span>, <span class="hljs-number">0x3f</span>, <span class="hljs-number">0x1f</span>, <span class="hljs-number">0x53</span>,<br>    <span class="hljs-number">0x63</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0xfd</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xd3</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0xa5</span>, <span class="hljs-number">0x7c</span>, <span class="hljs-number">0xa1</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x2d</span>, <span class="hljs-number">0xbd</span>,<br>    <span class="hljs-number">0xd9</span>, <span class="hljs-number">0xc7</span>, <span class="hljs-number">0xaf</span>, <span class="hljs-number">0x6b</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x0b</span>, <span class="hljs-number">0xe0</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0xc8</span>, <span class="hljs-number">0x9d</span>, <span class="hljs-number">0xe7</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xb1</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x9c</span>,<br>    <span class="hljs-number">0xdf</span>, <span class="hljs-number">0x6f</span>, <span class="hljs-number">0xf9</span>, <span class="hljs-number">0xda</span>, <span class="hljs-number">0x2a</span>, <span class="hljs-number">0xc4</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0xab</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x2b</span>,<br>    <span class="hljs-number">0xad</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0xfb</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xec</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0xde</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x3b</span>, <span class="hljs-number">0xc0</span>, <span class="hljs-number">0x9b</span>, <span class="hljs-number">0x3e</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x3a</span>,<br>    <span class="hljs-number">0x56</span>, <span class="hljs-number">0xe1</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0xc9</span>, <span class="hljs-number">0x1e</span>, <span class="hljs-number">0x9e</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xa3</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0xa8</span>, <span class="hljs-number">0x6c</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0xd0</span>, <span class="hljs-number">0xf0</span>, <span class="hljs-number">0x86</span><br>], dtype=np.uint8)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mulx</span>(<span class="hljs-params">V, c</span>):<br>    <span class="hljs-keyword">return</span> (V &lt;&lt; <span class="hljs-number">1</span>) ^ (c*((V&amp;<span class="hljs-number">0x80</span>)&gt;&gt;<span class="hljs-number">7</span>))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mulx_pow</span>(<span class="hljs-params">V, i, c</span>):<br>    <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> V<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> mulx(mulx_pow(V, i - <span class="hljs-number">1</span>, c), c)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mul_alpha</span>(<span class="hljs-params">c</span>):<br>    r0 = mulx_pow(c, <span class="hljs-number">23</span>, <span class="hljs-number">0xa9</span>) &amp; <span class="hljs-number">0xff</span><br>    r1 = mulx_pow(c, <span class="hljs-number">245</span>, <span class="hljs-number">0xa9</span>) &amp; <span class="hljs-number">0xff</span><br>    r2 = mulx_pow(c, <span class="hljs-number">48</span>, <span class="hljs-number">0xa9</span>) &amp;  <span class="hljs-number">0xff</span><br>    r3 = mulx_pow(c, <span class="hljs-number">239</span>, <span class="hljs-number">0xa9</span>) &amp;  <span class="hljs-number">0xff</span><br>    <span class="hljs-keyword">return</span> (r0 &lt;&lt; <span class="hljs-number">24</span>) | (r1 &lt;&lt; <span class="hljs-number">16</span>) | (r2 &lt;&lt; <span class="hljs-number">8</span>) | r3<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">div_alpha</span>(<span class="hljs-params">c</span>):<br>    r0 = mulx_pow(c, <span class="hljs-number">16</span>, <span class="hljs-number">0xa9</span>) &amp;  <span class="hljs-number">0xff</span><br>    r1 = mulx_pow(c, <span class="hljs-number">39</span>, <span class="hljs-number">0xa9</span>) &amp;  <span class="hljs-number">0xff</span><br>    r2 = mulx_pow(c, <span class="hljs-number">6</span>, <span class="hljs-number">0xa9</span>) &amp;  <span class="hljs-number">0xff</span><br>    r3 = mulx_pow(c, <span class="hljs-number">64</span>, <span class="hljs-number">0xa9</span>) &amp;  <span class="hljs-number">0xff</span><br>    <span class="hljs-keyword">return</span> (r0 &lt;&lt; <span class="hljs-number">24</span>) | (r1 &lt;&lt; <span class="hljs-number">16</span>) | (r2 &lt;&lt; <span class="hljs-number">8</span>) | r3<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">s1</span>(<span class="hljs-params">w</span>):<br>    w0 = (w &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xff</span><br>    w1 = (w &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xff</span><br>    w2 = (w &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xff</span><br>    w3 = w &amp; <span class="hljs-number">0xff</span><br><br>    r0 = (mulx(sr[w0], <span class="hljs-number">0x1b</span>) ^ sr[w1] ^ sr[w2] ^ mulx(sr[w3], <span class="hljs-number">0x1b</span>) ^ sr[w3]) &amp; <span class="hljs-number">0xff</span><br>    r1 = (mulx(sr[w0], <span class="hljs-number">0x1b</span>) ^ sr[w0] ^ mulx(sr[w1], <span class="hljs-number">0x1b</span>) ^ sr[w2] ^ sr[w3]) &amp; <span class="hljs-number">0xff</span><br>    r2 = (sr[w0] ^ mulx(sr[w1], <span class="hljs-number">0x1b</span>) ^ sr[w1] ^ mulx(sr[w2], <span class="hljs-number">0x1b</span>) ^ sr[w3]) &amp; <span class="hljs-number">0xff</span><br>    r3 = (sr[w0] ^ sr[w1] ^ mulx(sr[w2], <span class="hljs-number">0x1b</span>) ^ sr[w2] ^ mulx(sr[w3], <span class="hljs-number">0x1b</span>)) &amp; <span class="hljs-number">0xff</span><br><br>    <span class="hljs-keyword">return</span> (<span class="hljs-built_in">int</span>(r0) &lt;&lt; <span class="hljs-number">24</span>) | (<span class="hljs-built_in">int</span>(r1) &lt;&lt; <span class="hljs-number">16</span>) | (<span class="hljs-built_in">int</span>(r2) &lt;&lt; <span class="hljs-number">8</span>) | <span class="hljs-built_in">int</span>(r3)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">s2</span>(<span class="hljs-params">w</span>):<br>    w0 = (w &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xff</span><br>    w1 = (w &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xff</span><br>    w2 = (w &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xff</span><br>    w3 = w &amp; <span class="hljs-number">0xff</span><br><br>    r0 = (mulx(sq[w0], <span class="hljs-number">0x69</span>) ^ sq[w1] ^ sq[w2] ^ mulx(sq[w3], <span class="hljs-number">0x69</span>) ^ sq[w3]) &amp; <span class="hljs-number">0xff</span><br>    r1 = (mulx(sq[w0], <span class="hljs-number">0x69</span>) ^ sq[w0] ^ mulx(sq[w1], <span class="hljs-number">0x69</span>) ^ sq[w2] ^ sq[w3]) &amp; <span class="hljs-number">0xff</span><br>    r2 = (sq[w0] ^ mulx(sq[w1], <span class="hljs-number">0x69</span>) ^ sq[w1] ^ mulx(sq[w2], <span class="hljs-number">0x69</span>) ^ sq[w3]) &amp; <span class="hljs-number">0xff</span><br>    r3 = (sq[w0] ^ sq[w1] ^ mulx(sq[w2], <span class="hljs-number">0x69</span>) ^ sq[w2] ^ mulx(sq[w3], <span class="hljs-number">0x69</span>)) &amp; <span class="hljs-number">0xff</span><br>    <span class="hljs-keyword">return</span> (<span class="hljs-built_in">int</span>(r0) &lt;&lt; <span class="hljs-number">24</span>) | (<span class="hljs-built_in">int</span>(r1) &lt;&lt; <span class="hljs-number">16</span>) | (<span class="hljs-built_in">int</span>(r2) &lt;&lt; <span class="hljs-number">8</span>) | <span class="hljs-built_in">int</span>(r3)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">clock_fsm</span>(<span class="hljs-params">s15, s5</span>):<br>    F = (s15 + fsm[<span class="hljs-number">0</span>]) ^ fsm[<span class="hljs-number">1</span>]<br>    r = fsm[<span class="hljs-number">1</span>] + (fsm[<span class="hljs-number">2</span>] ^ s5)<br>    fsm[<span class="hljs-number">2</span>] = s2(fsm[<span class="hljs-number">1</span>])<br>    fsm[<span class="hljs-number">1</span>] = s1(fsm[<span class="hljs-number">0</span>])<br>    fsm[<span class="hljs-number">0</span>] = r<br>    <span class="hljs-keyword">return</span> F<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lfsr_keystream_mode</span>(<span class="hljs-params">S0,S2,S11</span>):<br>    v = (S0 &lt;&lt; <span class="hljs-number">8</span>) ^ mul_alpha((S0 &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xff</span>) ^ S2 ^ (S11 &gt;&gt; <span class="hljs-number">8</span>) ^ \<br>        div_alpha(S11 &amp; <span class="hljs-number">0xff</span>)<br>    <span class="hljs-keyword">return</span> v<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">de_lfsr_keystream_mode</span>(<span class="hljs-params">S0, S2, S11, S16</span>):<br>    <span class="hljs-keyword">if</span> S0 == <span class="hljs-string">&#x27;&#x27;</span>:<br>        S0 = BitVec(<span class="hljs-string">&#x27;S0&#x27;</span>, <span class="hljs-number">32</span>)<br>    <span class="hljs-keyword">else</span>:<br>        S0 = np.uint32(S0)<br>    <span class="hljs-keyword">if</span> S2 == <span class="hljs-string">&#x27;&#x27;</span>:<br>        S2 = BitVec(<span class="hljs-string">&#x27;S2&#x27;</span>, <span class="hljs-number">32</span>)<br>    <span class="hljs-keyword">else</span>:<br>        S2 = np.uint32(S2)<br>    <span class="hljs-keyword">if</span> S11 == <span class="hljs-string">&#x27;&#x27;</span>:<br>        S11 = BitVec(<span class="hljs-string">&#x27;S11&#x27;</span>, <span class="hljs-number">32</span>)<br>    <span class="hljs-keyword">else</span>:<br>        S11 = np.uint32(S11)<br>    <span class="hljs-keyword">if</span> S16 == <span class="hljs-string">&#x27;&#x27;</span>:<br>        S16 = BitVec(<span class="hljs-string">&#x27;S16&#x27;</span>, <span class="hljs-number">32</span>)<br>    <span class="hljs-keyword">else</span>:<br>        S16 = np.uint32(S16)<br>        <br>    solver = Solver()<br>    solver.add(S16 == lfsr_keystream_mode(S0, S2, S11))<br><br>    <span class="hljs-keyword">if</span> solver.check() == sat:<br>        res = solver.model()<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(S0, BitVecRef):<br>            <span class="hljs-keyword">return</span> res[S0].as_long()<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(S2, BitVecRef):<br>            <span class="hljs-keyword">return</span> res[S2].as_long()<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(S11, BitVecRef):<br>            <span class="hljs-keyword">return</span> res[S11].as_long()<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(S16, BitVecRef):<br>            <span class="hljs-keyword">return</span> res[S16].as_long()<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">de_s1</span>(<span class="hljs-params">s</span>):<br>    r0=(s&gt;&gt;<span class="hljs-number">24</span>)&amp;<span class="hljs-number">0xff</span><br>    r1=(s&gt;&gt;<span class="hljs-number">16</span>)&amp;<span class="hljs-number">0xff</span><br>    r2=(s&gt;&gt;<span class="hljs-number">8</span>)&amp;<span class="hljs-number">0xff</span><br>    r3=s&amp;<span class="hljs-number">0xff</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">mulx</span>(<span class="hljs-params">V, c</span>):<br>        <span class="hljs-keyword">return</span> (V &lt;&lt; <span class="hljs-number">1</span>) ^ (c*LShR(V, <span class="hljs-number">7</span>))&amp; <span class="hljs-number">0xff</span><br>    solver=Solver()<br>    srw0,srw1,srw2,srw3=BitVecs(<span class="hljs-string">&#x27;srw0 srw1 srw2 srw3&#x27;</span>, <span class="hljs-number">8</span>)<br>    solver.add(r0 == (mulx(srw0, <span class="hljs-number">0x1b</span>) ^ srw1 ^ srw2 ^mulx(srw3, <span class="hljs-number">0x1b</span>) ^ srw3) &amp; <span class="hljs-number">0xff</span>)<br>    solver.add(r1 == (mulx(srw0, <span class="hljs-number">0x1b</span>) ^ srw0 ^ mulx(srw1, <span class="hljs-number">0x1b</span>) ^ srw2 ^ srw3) &amp; <span class="hljs-number">0xff</span>)<br>    solver.add(r2 == (srw0 ^ mulx(srw1, <span class="hljs-number">0x1b</span>) ^ srw1 ^ mulx(srw2, <span class="hljs-number">0x1b</span>) ^ srw3) &amp; <span class="hljs-number">0xff</span>)<br>    solver.add(r3 == (srw0 ^ srw1 ^ mulx(srw2, <span class="hljs-number">0x1b</span>) ^ srw2 ^ mulx(srw3, <span class="hljs-number">0x1b</span>)) &amp; <span class="hljs-number">0xff</span>)<br><br>    <span class="hljs-keyword">if</span> solver.check()==sat:<br>        res=solver.model()<br>        __sr=sr.tolist()<br>        w0=__sr.index(res[srw0].py_value())<br>        w1=__sr.index(res[srw1].py_value())<br>        w2=__sr.index(res[srw2].py_value())<br>        w3=__sr.index(res[srw3].py_value())<br>        <span class="hljs-keyword">return</span> (w0 &lt;&lt; <span class="hljs-number">24</span>) | (w1 &lt;&lt; <span class="hljs-number">16</span>) | (w2 &lt;&lt; <span class="hljs-number">8</span>) | w3<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">de_s2</span>(<span class="hljs-params">s</span>):<br>    r0=(s&gt;&gt;<span class="hljs-number">24</span>)&amp;<span class="hljs-number">0xff</span><br>    r1=(s&gt;&gt;<span class="hljs-number">16</span>)&amp;<span class="hljs-number">0xff</span><br>    r2=(s&gt;&gt;<span class="hljs-number">8</span>)&amp;<span class="hljs-number">0xff</span><br>    r3=s&amp;<span class="hljs-number">0xff</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">mulx</span>(<span class="hljs-params">V, c</span>):<br>        <span class="hljs-keyword">return</span> (V &lt;&lt; <span class="hljs-number">1</span>) ^ (c*LShR(V, <span class="hljs-number">7</span>))&amp; <span class="hljs-number">0xff</span><br>    solver=Solver()<br>    sqw0,sqw1,sqw2,sqw3=BitVecs(<span class="hljs-string">&#x27;sqw0 sqw1 sqw2 sqw3&#x27;</span>, <span class="hljs-number">8</span>)<br>    solver.add(r0 == (mulx(sqw0, <span class="hljs-number">0x69</span>) ^ sqw1 ^ sqw2 ^mulx(sqw3, <span class="hljs-number">0x69</span>) ^ sqw3) &amp; <span class="hljs-number">0xff</span>)<br>    solver.add(r1 == (mulx(sqw0, <span class="hljs-number">0x69</span>) ^ sqw0 ^ mulx(sqw1, <span class="hljs-number">0x69</span>) ^ sqw2 ^ sqw3) &amp; <span class="hljs-number">0xff</span>)<br>    solver.add(r2 == (sqw0 ^ mulx(sqw1, <span class="hljs-number">0x69</span>) ^ sqw1 ^ mulx(sqw2, <span class="hljs-number">0x69</span>) ^ sqw3) &amp; <span class="hljs-number">0xff</span>)<br>    solver.add(r3 == (sqw0 ^ sqw1 ^ mulx(sqw2, <span class="hljs-number">0x69</span>) ^ sqw2 ^ mulx(sqw3, <span class="hljs-number">0x69</span>)) &amp; <span class="hljs-number">0xff</span>)<br><br>    <span class="hljs-keyword">if</span> solver.check()==sat:<br>        res=solver.model()<br>        __sq=sq.tolist()<br>        w0=__sq.index(res[sqw0].py_value())<br>        w1=__sq.index(res[sqw1].py_value())<br>        w2=__sq.index(res[sqw2].py_value())<br>        w3=__sq.index(res[sqw3].py_value())<br>        <span class="hljs-keyword">return</span> (w0 &lt;&lt; <span class="hljs-number">24</span>) | (w1 &lt;&lt; <span class="hljs-number">16</span>) | (w2 &lt;&lt; <span class="hljs-number">8</span>) | w3<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><span class="hljs-comment">#检查S序列能否向后推导或者推出前面的某一个值</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">checkS</span>():<br>    flag=<span class="hljs-literal">False</span><span class="hljs-comment">#标记是否有check出新的值</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(S)-<span class="hljs-number">16</span>):<br>        __l=[<span class="hljs-built_in">type</span>(S[i]),<span class="hljs-built_in">type</span>(S[i+<span class="hljs-number">2</span>]),<span class="hljs-built_in">type</span>(S[i+<span class="hljs-number">11</span>]),<span class="hljs-built_in">type</span>(S[i+<span class="hljs-number">15</span>+<span class="hljs-number">1</span>])]<br>        <span class="hljs-keyword">if</span> __l.count(<span class="hljs-built_in">int</span>)==<span class="hljs-number">3</span>:<br>            flag=<span class="hljs-literal">True</span><br>            <span class="hljs-keyword">if</span> __l.index(<span class="hljs-built_in">str</span>)==<span class="hljs-number">3</span>:<br>                S[i+<span class="hljs-number">15</span>+<span class="hljs-number">1</span>]=<span class="hljs-built_in">int</span>(lfsr_keystream_mode(np.uint32(S[i+<span class="hljs-number">0</span>]),np.uint32(S[i+<span class="hljs-number">2</span>]),np.uint32(S[i+<span class="hljs-number">11</span>])))<br>            <span class="hljs-keyword">else</span>:<br>                __index=[i,i+<span class="hljs-number">2</span>,i+<span class="hljs-number">11</span>,i+<span class="hljs-number">15</span>+<span class="hljs-number">1</span>]<br>                S[__index[__l.index(<span class="hljs-built_in">str</span>)]]=de_lfsr_keystream_mode(S[i],S[i+<span class="hljs-number">2</span>],S[i+<span class="hljs-number">11</span>],S[i+<span class="hljs-number">15</span>+<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">return</span> flag<br><br><span class="hljs-comment">#检查fsm能否向前或向后推导</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">checkFSM</span>():<br>    flag=<span class="hljs-literal">False</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(fsm)-<span class="hljs-number">5</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(fsm[i][<span class="hljs-number">1</span>])==<span class="hljs-built_in">int</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(fsm[i+<span class="hljs-number">1</span>][<span class="hljs-number">2</span>])!=<span class="hljs-built_in">int</span>:<span class="hljs-comment">#fsm[i][1] -s2-&gt; fsm[i+1][2]</span><br>            fsm[i+<span class="hljs-number">1</span>][<span class="hljs-number">2</span>]=<span class="hljs-built_in">int</span>(s2(fsm[i][<span class="hljs-number">1</span>]))<br>            flag=<span class="hljs-literal">True</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(fsm[i][<span class="hljs-number">0</span>])==<span class="hljs-built_in">int</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(fsm[i+<span class="hljs-number">1</span>][<span class="hljs-number">1</span>])!=<span class="hljs-built_in">int</span>:<span class="hljs-comment">#fsm[i][0] -s1-&gt; fsm[i+1][1]</span><br>            fsm[i+<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=<span class="hljs-built_in">int</span>(s1(fsm[i][<span class="hljs-number">0</span>]))<br>            flag=<span class="hljs-literal">True</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(fsm[i][<span class="hljs-number">1</span>])!=<span class="hljs-built_in">int</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(fsm[i+<span class="hljs-number">1</span>][<span class="hljs-number">2</span>])==<span class="hljs-built_in">int</span>:<span class="hljs-comment">#fsm[i][1] -de_s2-&gt; fsm[i+1][2]</span><br>            fsm[i][<span class="hljs-number">1</span>]=de_s2(fsm[i+<span class="hljs-number">1</span>][<span class="hljs-number">2</span>])<br>            flag=<span class="hljs-literal">True</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(fsm[i][<span class="hljs-number">0</span>])!=<span class="hljs-built_in">int</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(fsm[i+<span class="hljs-number">1</span>][<span class="hljs-number">1</span>])==<span class="hljs-built_in">int</span>:<span class="hljs-comment">#fsm[i][0] -de_s1-&gt; fsm[i+1][1]</span><br>            fsm[i][<span class="hljs-number">0</span>]=de_s1(fsm[i+<span class="hljs-number">1</span>][<span class="hljs-number">1</span>])<br>            flag=<span class="hljs-literal">True</span><br>        <span class="hljs-comment">#对于fsm[i][0]，只要知道其中任意三个值就可以推出剩下的一个值，所以顺带都写在这了</span><br>        __l=[<span class="hljs-built_in">type</span>(fsm[i][<span class="hljs-number">1</span>]),<span class="hljs-built_in">type</span>(fsm[i][<span class="hljs-number">2</span>]),<span class="hljs-built_in">type</span>(S[i+<span class="hljs-number">5</span>]),<span class="hljs-built_in">type</span>(fsm[i+<span class="hljs-number">1</span>][<span class="hljs-number">0</span>])]<br>        <span class="hljs-keyword">if</span> __l.count(<span class="hljs-built_in">int</span>)==<span class="hljs-number">3</span>:<br>            flag=<span class="hljs-literal">True</span><br>            __=__l.index(<span class="hljs-built_in">str</span>)<br>            <span class="hljs-keyword">if</span> __==<span class="hljs-number">0</span>:<br>                fsm[i][<span class="hljs-number">1</span>]=(fsm[i+<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]-(fsm[i][<span class="hljs-number">2</span>]^S[i+<span class="hljs-number">5</span>]))%<span class="hljs-number">2</span>**<span class="hljs-number">32</span><br>            <span class="hljs-keyword">elif</span> __==<span class="hljs-number">1</span>:<br>                fsm[i][<span class="hljs-number">2</span>]=((fsm[i+<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]-fsm[i][<span class="hljs-number">1</span>])^S[i+<span class="hljs-number">5</span>])%<span class="hljs-number">2</span>**<span class="hljs-number">32</span><br>            <span class="hljs-keyword">elif</span> __==<span class="hljs-number">2</span>:<br>                S[i+<span class="hljs-number">5</span>]=((fsm[i+<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]-fsm[i][<span class="hljs-number">1</span>])^fsm[i][<span class="hljs-number">2</span>])%<span class="hljs-number">2</span>**<span class="hljs-number">32</span><br>            <span class="hljs-keyword">elif</span> __==<span class="hljs-number">3</span>:<br>                fsm[i+<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]=(fsm[i][<span class="hljs-number">1</span>]+(fsm[i][<span class="hljs-number">2</span>]^S[i+<span class="hljs-number">5</span>]))%<span class="hljs-number">2</span>**<span class="hljs-number">32</span><br>    <span class="hljs-keyword">return</span> flag<br><span class="hljs-comment">#检查clock_fsm里面的F的推导，只要知道其中任意三个值就可以推出剩下的一个值</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">checkFSFSM</span>():<br>    flag=<span class="hljs-literal">False</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(S)-<span class="hljs-number">15</span>):<br>        __l=[<span class="hljs-built_in">type</span>(fsm[i][<span class="hljs-number">0</span>]),<span class="hljs-built_in">type</span>(fsm[i][<span class="hljs-number">1</span>]),<span class="hljs-built_in">type</span>(F[i]),<span class="hljs-built_in">type</span>(S[i+<span class="hljs-number">15</span>])]<br>        <span class="hljs-keyword">if</span> __l.count(<span class="hljs-built_in">int</span>)==<span class="hljs-number">3</span>:<br>            flag=<span class="hljs-literal">True</span><br>            __=__l.index(<span class="hljs-built_in">str</span>)<br>            <span class="hljs-keyword">if</span> __==<span class="hljs-number">0</span>:<br>                fsm[i][<span class="hljs-number">0</span>]=((F[i]^fsm[i][<span class="hljs-number">1</span>])-S[i+<span class="hljs-number">15</span>])%<span class="hljs-number">2</span>**<span class="hljs-number">32</span><br>            <span class="hljs-keyword">elif</span> __==<span class="hljs-number">1</span>:<br>                fsm[i][<span class="hljs-number">1</span>]=(F[i]^(S[i+<span class="hljs-number">15</span>]+fsm[i][<span class="hljs-number">0</span>]))%<span class="hljs-number">2</span>**<span class="hljs-number">32</span><br>            <span class="hljs-keyword">elif</span> __==<span class="hljs-number">2</span>:<br>                F[i]=((S[i+<span class="hljs-number">15</span>]+fsm[i][<span class="hljs-number">0</span>])^fsm[i][<span class="hljs-number">1</span>])%<span class="hljs-number">2</span>**<span class="hljs-number">32</span><br>            <span class="hljs-keyword">elif</span> __==<span class="hljs-number">3</span>:<br>                S[i+<span class="hljs-number">15</span>]=((F[i]^fsm[i][<span class="hljs-number">1</span>])-fsm[i][<span class="hljs-number">0</span>])%<span class="hljs-number">2</span>**<span class="hljs-number">32</span><br>    <span class="hljs-keyword">return</span> flag<br><br><span class="hljs-comment">#检查F,S,key_stream的互相之间的推导，知道任意2个可以推出剩下的一个</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">checkFSSTREAM</span>():<br>    flag=<span class="hljs-literal">False</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(key_stream)):<br>        __l=[<span class="hljs-built_in">type</span>(key_stream[i]),<span class="hljs-built_in">type</span>(F[i]),<span class="hljs-built_in">type</span>(S[i])]<br>        <span class="hljs-keyword">if</span> __l.count(<span class="hljs-built_in">int</span>)==<span class="hljs-number">2</span>:<br>            flag=<span class="hljs-literal">True</span><br>            __=__l.index(<span class="hljs-built_in">str</span>)<br>            <span class="hljs-keyword">if</span> __==<span class="hljs-number">0</span>:<br>                key_stream[i]=F[i]^S[i]<br>            <span class="hljs-keyword">elif</span> __==<span class="hljs-number">1</span>:<br>                F[i]=key_stream[i]^S[i]<br>            <span class="hljs-keyword">elif</span> __==<span class="hljs-number">2</span>:<br>                S[i]=key_stream[i]^F[i]<br>    <span class="hljs-keyword">return</span> flag<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">checkALL</span>():<br>    flag=checkFSM()<br>    flag=flag <span class="hljs-keyword">or</span> checkFSFSM()<br>    flag=flag <span class="hljs-keyword">or</span> checkFSSTREAM()<br>    flag=flag <span class="hljs-keyword">or</span> checkS()<br>    <span class="hljs-comment">#checkCORRECT()</span><br>    <span class="hljs-keyword">return</span> flag<br><br>    <br><span class="hljs-comment">#测试用函数===================================================================================</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">checkCORRECT</span>():<br>    t_S=[<span class="hljs-number">3728967755</span>, <span class="hljs-number">3495356165</span>, <span class="hljs-number">472187142</span>, <span class="hljs-number">886943789</span>, <span class="hljs-number">4084678986</span>, <span class="hljs-number">114208514</span>, <span class="hljs-number">4079807976</span>, <span class="hljs-number">4275161248</span>, <span class="hljs-number">3282638664</span>, <span class="hljs-number">2076006597</span>, <span class="hljs-number">3373805671</span>, <span class="hljs-number">2974123815</span>, <span class="hljs-number">3847446102</span>, <span class="hljs-number">2029449241</span>, <span class="hljs-number">1167248190</span>, <span class="hljs-number">3124340476</span>, <span class="hljs-number">2413002776</span>, <span class="hljs-number">3447953474</span>, <span class="hljs-number">4266587847</span>, <span class="hljs-number">4175396429</span>, <span class="hljs-number">4131847277</span>, <span class="hljs-number">1684661431</span>, <span class="hljs-number">2541104664</span>, <span class="hljs-number">2037740470</span>, <span class="hljs-number">2396869767</span>, <span class="hljs-number">4221185578</span>, <span class="hljs-number">3017606363</span>, <span class="hljs-number">2068083020</span>, <span class="hljs-number">2267507878</span>, <span class="hljs-number">3591283476</span>, <span class="hljs-number">2686059627</span>, <span class="hljs-number">1351965579</span>, <span class="hljs-number">545189806</span>, <span class="hljs-number">3529654008</span>, <span class="hljs-number">795261281</span>, <span class="hljs-number">3336159413</span>, <span class="hljs-number">55920688</span>, <span class="hljs-number">3640778187</span>, <span class="hljs-number">10677684</span>, <span class="hljs-number">2992943598</span>, <span class="hljs-number">1690983591</span>, <span class="hljs-number">1929655536</span>, <span class="hljs-number">858855436</span>, <span class="hljs-number">3516290525</span>, <span class="hljs-number">208822826</span>, <span class="hljs-number">1790432759</span>, <span class="hljs-number">1090329888</span>, <span class="hljs-number">3311895372</span>, <span class="hljs-number">2442868764</span>, <span class="hljs-number">525297149</span>, <span class="hljs-number">1581426865</span>, <span class="hljs-number">2535702230</span>, <span class="hljs-number">3690055020</span>, <span class="hljs-number">2897748567</span>, <span class="hljs-number">1087734291</span>, <span class="hljs-number">2968696404</span>, <span class="hljs-number">790180987</span>, <span class="hljs-number">1067508412</span>, <span class="hljs-number">1812069970</span>]<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(t_S)):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(S[i])==<span class="hljs-built_in">int</span>:<br>            <span class="hljs-keyword">if</span> S[i]!=t_S[i]:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;S:&#x27;</span>,i)<br>    t_r1=[<span class="hljs-number">4288109169</span>, <span class="hljs-number">566438029</span>, <span class="hljs-number">3252420959</span>, <span class="hljs-number">310114661</span>, <span class="hljs-number">405113667</span>, <span class="hljs-number">42168638</span>, <span class="hljs-number">426348252</span>, <span class="hljs-number">2217508059</span>, <span class="hljs-number">2364527128</span>, <span class="hljs-number">2513670487</span>, <span class="hljs-number">4258403922</span>, <span class="hljs-number">1344762431</span>, <span class="hljs-number">3259421801</span>, <span class="hljs-number">2290768410</span>, <span class="hljs-number">3562266277</span>, <span class="hljs-number">3034556817</span>, <span class="hljs-number">2874338847</span>, <span class="hljs-number">2207755823</span>, <span class="hljs-number">3434078908</span>, <span class="hljs-number">3673270886</span>, <span class="hljs-number">3634307680</span>, <span class="hljs-number">887505320</span>, <span class="hljs-number">3272180482</span>, <span class="hljs-number">3182178649</span>, <span class="hljs-number">2463707393</span>, <span class="hljs-number">3945361442</span>, <span class="hljs-number">532203740</span>, <span class="hljs-number">3515575884</span>, <span class="hljs-number">2670224373</span>, <span class="hljs-number">219742259</span>, <span class="hljs-number">3138161244</span>, <span class="hljs-number">1504798987</span>, <span class="hljs-number">3549858809</span>, <span class="hljs-number">1036509647</span>, <span class="hljs-number">2256657537</span>, <span class="hljs-number">4291048480</span>, <span class="hljs-number">3146309710</span>, <span class="hljs-number">1353304775</span>, <span class="hljs-number">3251573430</span>, <span class="hljs-number">278650815</span>, <span class="hljs-number">2240592460</span>, <span class="hljs-number">2202855101</span>, <span class="hljs-number">3645670807</span>, <span class="hljs-number">2183393958</span>, <span class="hljs-number">1051616755</span>, <span class="hljs-number">3920219094</span>, <span class="hljs-number">3655214575</span>, <span class="hljs-number">2766578751</span>, <span class="hljs-number">1372178632</span>, <span class="hljs-number">1819972070</span>, <span class="hljs-number">4032746236</span>, <span class="hljs-number">3996865332</span>, <span class="hljs-number">2470546560</span>, <span class="hljs-number">2521538742</span>, <span class="hljs-number">562444771</span>, <span class="hljs-number">2248808042</span>, <span class="hljs-number">3424030997</span>, <span class="hljs-number">638968787</span>, <span class="hljs-number">1996261738</span>, <span class="hljs-number">2006370108</span>]<br><br>    t_r2=[<span class="hljs-number">1355885794</span>, <span class="hljs-number">3828109594</span>, <span class="hljs-number">472496693</span>, <span class="hljs-number">1076682495</span>, <span class="hljs-number">3872837314</span>, <span class="hljs-number">1840614625</span>, <span class="hljs-number">1816901402</span>, <span class="hljs-number">3255922705</span>, <span class="hljs-number">262821239</span>, <span class="hljs-number">1309786686</span>, <span class="hljs-number">1583923810</span>, <span class="hljs-number">1523195432</span>, <span class="hljs-number">3041126837</span>, <span class="hljs-number">1214947918</span>, <span class="hljs-number">2931262268</span>, <span class="hljs-number">1778538638</span>, <span class="hljs-number">3573090404</span>, <span class="hljs-number">3075404417</span>, <span class="hljs-number">2429921657</span>, <span class="hljs-number">3637677643</span>, <span class="hljs-number">4131381119</span>, <span class="hljs-number">3779984047</span>, <span class="hljs-number">1617841815</span>, <span class="hljs-number">686529006</span>, <span class="hljs-number">3837496372</span>, <span class="hljs-number">3892378064</span>, <span class="hljs-number">2477993090</span>, <span class="hljs-number">2397911448</span>, <span class="hljs-number">2777576939</span>, <span class="hljs-number">1392741422</span>, <span class="hljs-number">1550955835</span>, <span class="hljs-number">2448835842</span>, <span class="hljs-number">3240053317</span>, <span class="hljs-number">3509923480</span>, <span class="hljs-number">4119599101</span>, <span class="hljs-number">375278529</span>, <span class="hljs-number">3937252695</span>, <span class="hljs-number">2608352072</span>, <span class="hljs-number">1358566283</span>, <span class="hljs-number">1627404846</span>, <span class="hljs-number">503044471</span>, <span class="hljs-number">3736592806</span>, <span class="hljs-number">3934907064</span>, <span class="hljs-number">1460859829</span>, <span class="hljs-number">3855897853</span>, <span class="hljs-number">3244167835</span>, <span class="hljs-number">4051089435</span>, <span class="hljs-number">847623116</span>, <span class="hljs-number">3403687926</span>, <span class="hljs-number">2949222116</span>, <span class="hljs-number">1917891093</span>, <span class="hljs-number">624600427</span>, <span class="hljs-number">2001915094</span>, <span class="hljs-number">147539826</span>, <span class="hljs-number">3128478596</span>, <span class="hljs-number">2224489645</span>, <span class="hljs-number">2923913710</span>, <span class="hljs-number">3146498598</span>, <span class="hljs-number">398940241</span>, <span class="hljs-number">1637262462</span>]<br><br>    t_r3=[<span class="hljs-number">3594474665</span>, <span class="hljs-number">780361133</span>, <span class="hljs-number">142866320</span>, <span class="hljs-number">340900620</span>, <span class="hljs-number">1611791033</span>, <span class="hljs-number">1655452060</span>, <span class="hljs-number">2795848422</span>, <span class="hljs-number">797785169</span>, <span class="hljs-number">4276079609</span>, <span class="hljs-number">3931283242</span>, <span class="hljs-number">1267140897</span>, <span class="hljs-number">3903796825</span>, <span class="hljs-number">516286503</span>, <span class="hljs-number">1973930640</span>, <span class="hljs-number">4277622808</span>, <span class="hljs-number">3071699452</span>, <span class="hljs-number">3405201788</span>, <span class="hljs-number">2182536739</span>, <span class="hljs-number">862548827</span>, <span class="hljs-number">1896988818</span>, <span class="hljs-number">3309063171</span>, <span class="hljs-number">1382452360</span>, <span class="hljs-number">645501838</span>, <span class="hljs-number">4006280117</span>, <span class="hljs-number">3496165626</span>, <span class="hljs-number">2544749415</span>, <span class="hljs-number">1833769537</span>, <span class="hljs-number">809879027</span>, <span class="hljs-number">3051926704</span>, <span class="hljs-number">1198409551</span>, <span class="hljs-number">1004958565</span>, <span class="hljs-number">1123356359</span>, <span class="hljs-number">2779335233</span>, <span class="hljs-number">3052290141</span>, <span class="hljs-number">3093081549</span>, <span class="hljs-number">3252733994</span>, <span class="hljs-number">385360256</span>, <span class="hljs-number">359128930</span>, <span class="hljs-number">1849137641</span>, <span class="hljs-number">687792692</span>, <span class="hljs-number">266786993</span>, <span class="hljs-number">3127492305</span>, <span class="hljs-number">1392346274</span>, <span class="hljs-number">1979730466</span>, <span class="hljs-number">479859492</span>, <span class="hljs-number">1187167205</span>, <span class="hljs-number">608981746</span>, <span class="hljs-number">3300250000</span>, <span class="hljs-number">220351399</span>, <span class="hljs-number">4245003</span>, <span class="hljs-number">3407353675</span>, <span class="hljs-number">1092604782</span>, <span class="hljs-number">559427932</span>, <span class="hljs-number">1958415395</span>, <span class="hljs-number">2773555934</span>, <span class="hljs-number">1261361337</span>, <span class="hljs-number">1619553922</span>, <span class="hljs-number">3312946173</span>, <span class="hljs-number">3589284217</span>, <span class="hljs-number">4259352522</span>]<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(t_r1)):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(fsm[i][<span class="hljs-number">0</span>])==<span class="hljs-built_in">int</span> <span class="hljs-keyword">and</span> fsm[i][<span class="hljs-number">0</span>]!=t_r1[i]:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;R1:&#x27;</span>,i,<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(fsm[i][<span class="hljs-number">1</span>])==<span class="hljs-built_in">int</span> <span class="hljs-keyword">and</span> fsm[i][<span class="hljs-number">1</span>]!=t_r2[i]:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;R2:&#x27;</span>,i,<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(fsm[i][<span class="hljs-number">2</span>])==<span class="hljs-built_in">int</span> <span class="hljs-keyword">and</span> fsm[i][<span class="hljs-number">2</span>]!=t_r3[i]:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;R3:&#x27;</span>,i,<span class="hljs-number">2</span>)<br>    t_F=[<span class="hljs-number">3909102991</span>, <span class="hljs-number">1438316991</span>, <span class="hljs-number">2473993108</span>, <span class="hljs-number">1357262547</span>, <span class="hljs-number">4157851474</span>, <span class="hljs-number">2508185930</span>, <span class="hljs-number">295224457</span>, <span class="hljs-number">3652442850</span>, <span class="hljs-number">164565177</span>, <span class="hljs-number">1788946400</span>, <span class="hljs-number">2802091550</span>, <span class="hljs-number">1590585650</span>, <span class="hljs-number">2294852608</span>, <span class="hljs-number">1205560462</span>, <span class="hljs-number">81068677</span>, <span class="hljs-number">1056699762</span>, <span class="hljs-number">789660110</span>, <span class="hljs-number">324562780</span>, <span class="hljs-number">264734925</span>, <span class="hljs-number">3532320140</span>, <span class="hljs-number">1766276202</span>, <span class="hljs-number">3648418679</span>, <span class="hljs-number">4234489434</span>, <span class="hljs-number">2527364835</span>, <span class="hljs-number">2709941979</span>, <span class="hljs-number">2817733913</span>, <span class="hljs-number">17813838</span>, <span class="hljs-number">2320613312</span>, <span class="hljs-number">3576745017</span>, <span class="hljs-number">1250487923</span>, <span class="hljs-number">2041959784</span>, <span class="hljs-number">190366505</span>, <span class="hljs-number">1507935488</span>, <span class="hljs-number">508966771</span>, <span class="hljs-number">1348294019</span>, <span class="hljs-number">1213765392</span>, <span class="hljs-number">3087084147</span>, <span class="hljs-number">3085163387</span>, <span class="hljs-number">1048389254</span>, <span class="hljs-number">812735484</span>, <span class="hljs-number">730114519</span>, <span class="hljs-number">1825700510</span>, <span class="hljs-number">4066673387</span>, <span class="hljs-number">3107390285</span>, <span class="hljs-number">1220207318</span>, <span class="hljs-number">883241532</span>, <span class="hljs-number">5483853</span>, <span class="hljs-number">275268404</span>, <span class="hljs-number">384384940</span>, <span class="hljs-number">2648392877</span>, <span class="hljs-number">2643780042</span>, <span class="hljs-number">2388170262</span>, <span class="hljs-number">704314697</span>, <span class="hljs-number">1113445259</span>, <span class="hljs-number">3645689675</span>, <span class="hljs-number">4150313002</span>, <span class="hljs-number">1649850319</span>, <span class="hljs-number">77719709</span>, <span class="hljs-number">1803356974</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(t_F)):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(F[i])==<span class="hljs-built_in">int</span> <span class="hljs-keyword">and</span> F[i]!=t_F[i]:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;F:&#x27;</span>,i)<br><span class="hljs-comment">#测试用函数===================================================================================</span><br><br><br>key_stream=[<span class="hljs-string">&#x27;&#x27;</span>]*<span class="hljs-number">150</span><br>gift=<span class="hljs-string">b&quot;the quick brown fox jumps over the lazy dog\n&quot;</span><br>C=[<span class="hljs-number">3539094009</span>, <span class="hljs-number">980211684</span>, <span class="hljs-number">2198891016</span>, <span class="hljs-number">905998740</span>, <span class="hljs-number">1595475160</span>, <span class="hljs-number">3962636204</span>, <span class="hljs-number">1199994505</span>, <span class="hljs-number">3190370623</span>, <span class="hljs-number">296595869</span>, <span class="hljs-number">3158272345</span>, <span class="hljs-number">2748985736</span>, <span class="hljs-number">382671580</span>, <span class="hljs-number">2521428409</span>, <span class="hljs-number">248078233</span>, <span class="hljs-number">1528783547</span>, <span class="hljs-number">2729100548</span>, <span class="hljs-number">3426466722</span>, <span class="hljs-number">3192873770</span>, <span class="hljs-number">1337295957</span>, <span class="hljs-number">1431041587</span>, <span class="hljs-number">1607853207</span>, <span class="hljs-number">3998694569</span>, <span class="hljs-number">3160389002</span>, <span class="hljs-number">3728077354</span>, <span class="hljs-number">1120982789</span>, <span class="hljs-number">3443900372</span>, <span class="hljs-number">1811224296</span>, <span class="hljs-number">3102761228</span>, <span class="hljs-number">3296566547</span>, <span class="hljs-number">3724398326</span>, <span class="hljs-number">873334127</span>, <span class="hljs-number">3279785283</span>, <span class="hljs-number">1267844209</span>, <span class="hljs-number">907638672</span>, <span class="hljs-number">2121413959</span>, <span class="hljs-number">3173567371</span>, <span class="hljs-number">4097722407</span>, <span class="hljs-number">844863077</span>, <span class="hljs-number">3114817962</span>, <span class="hljs-number">3619759560</span>, <span class="hljs-number">2198708209</span>, <span class="hljs-number">2363435526</span>, <span class="hljs-number">196774438</span>, <span class="hljs-number">2671749579</span>, <span class="hljs-number">4031688923</span>, <span class="hljs-number">471349633</span>, <span class="hljs-number">778676959</span>, <span class="hljs-number">3608967403</span>, <span class="hljs-number">92491149</span>, <span class="hljs-number">913291948</span>, <span class="hljs-number">3021362116</span>, <span class="hljs-number">1067932129</span>, <span class="hljs-number">999259588</span>, <span class="hljs-number">3190588842</span>, <span class="hljs-number">1828097126</span>, <span class="hljs-number">1450255462</span>, <span class="hljs-number">1305572961</span>, <span class="hljs-number">1341694028</span>, <span class="hljs-number">2350778224</span>, <span class="hljs-number">2932388574</span>, <span class="hljs-number">1204050979</span>, <span class="hljs-number">1294999174</span>, <span class="hljs-number">1921124090</span>, <span class="hljs-number">2342994011</span>, <span class="hljs-number">1941020673</span>, <span class="hljs-number">1191919176</span>, <span class="hljs-number">187588176</span>, <span class="hljs-number">255691701</span>, <span class="hljs-number">274795123</span>, <span class="hljs-number">873091533</span>, <span class="hljs-number">299848364</span>, <span class="hljs-number">870697920</span>, <span class="hljs-number">3387594780</span>, <span class="hljs-number">944072831</span>, <span class="hljs-number">848477078</span>, <span class="hljs-number">447469593</span>, <span class="hljs-number">917439649</span>, <span class="hljs-number">598555627</span>, <span class="hljs-number">3036173079</span>, <span class="hljs-number">3758185777</span>, <span class="hljs-number">4236584984</span>, <span class="hljs-number">4205933999</span>, <span class="hljs-number">1185586113</span>, <span class="hljs-number">3227810954</span>, <span class="hljs-number">2737102694</span>, <span class="hljs-number">3680871868</span>, <span class="hljs-number">4102277292</span>, <span class="hljs-number">378037705</span>]<br><br>hack=[<span class="hljs-number">834501734</span>,<span class="hljs-number">940247165</span>,<span class="hljs-number">2078728259</span>,<span class="hljs-number">483907438</span>,<span class="hljs-number">1102712410</span>,<span class="hljs-number">3110955761</span>,<span class="hljs-number">3016462560</span>,<span class="hljs-number">871310805</span>,<span class="hljs-number">1334672645</span>,<span class="hljs-number">1102778698</span>]<br><br><br>fsm=[[<span class="hljs-string">&#x27;&#x27;</span>]*<span class="hljs-number">3</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">150</span>)]<br>S=[<span class="hljs-string">&#x27;&#x27;</span>]*<span class="hljs-number">150</span><br>F=[<span class="hljs-string">&#x27;&#x27;</span>]*<span class="hljs-number">150</span><br><br><span class="hljs-comment">#填一下已知数据</span><br>fsm[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>]=hack[<span class="hljs-number">0</span>]<br>fsm[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>]=hack[<span class="hljs-number">1</span>]<br>fsm[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>]=hack[<span class="hljs-number">2</span>]<br>S[<span class="hljs-number">2</span>]=hack[<span class="hljs-number">3</span>]<br>S[<span class="hljs-number">3</span>]=hack[<span class="hljs-number">4</span>]<br>S[<span class="hljs-number">6</span>]=hack[<span class="hljs-number">5</span>]<br>S[<span class="hljs-number">7</span>]=hack[<span class="hljs-number">6</span>]<br>S[<span class="hljs-number">8</span>]=hack[<span class="hljs-number">7</span>]<br>fsm[<span class="hljs-number">5</span>][<span class="hljs-number">0</span>]=hack[<span class="hljs-number">8</span>]<br>fsm[<span class="hljs-number">7</span>][<span class="hljs-number">0</span>]=hack[<span class="hljs-number">9</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(gift)):<br>    key_stream[i]=C[i]^gift[i]<br><br>F[<span class="hljs-number">2</span>]=S[<span class="hljs-number">2</span>]^key_stream[<span class="hljs-number">2</span>]<br>F[<span class="hljs-number">3</span>]=S[<span class="hljs-number">3</span>]^key_stream[<span class="hljs-number">3</span>]<br>F[<span class="hljs-number">6</span>]=S[<span class="hljs-number">6</span>]^key_stream[<span class="hljs-number">6</span>]<br>F[<span class="hljs-number">7</span>]=S[<span class="hljs-number">7</span>]^key_stream[<span class="hljs-number">7</span>]<br>F[<span class="hljs-number">8</span>]=S[<span class="hljs-number">8</span>]^key_stream[<span class="hljs-number">8</span>]<br><br><span class="hljs-keyword">while</span> checkALL():<br>    <span class="hljs-literal">None</span><br><br>plain=<span class="hljs-string">b&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(C)):<br>    plain+=long_to_bytes(key_stream[i]^C[i])<br><span class="hljs-built_in">print</span>(plain)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs result">b&#x27;the quick brown fox jumps over the lazy dog\nDASCTF&#123;2bfc1bd3-740e-4b3f-ab9f-9587b1d47209&#125;&#x27;<br></code></pre></td></tr></table></figure><p>那么预赛也是全复现完了，我是没找到预赛的密码的wp，那么就这样吧。<br>发现我的de_lfsr_keystream_mode的错误了请和我说一下哦。<br><img src="/2025/02/01/2024%E6%B5%99%E6%B1%9F%E7%9C%81%E8%B5%9B/1.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>crypto</category>
      
      <category>DASCTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
      <tag>RSA</tag>
      
      <tag>DASCTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2025.1.18 DASCTF</title>
    <link href="/2025/01/22/2025.1.18DASCTF/"/>
    <url>/2025/01/22/2025.1.18DASCTF/</url>
    
    <content type="html"><![CDATA[<h1 id="2025-1-18西湖论剑"><a href="#2025-1-18西湖论剑" class="headerlink" title="2025.1.18西湖论剑"></a>2025.1.18西湖论剑</h1><p>是 <strong>2025.1.18西湖论剑</strong> 哒！</p><h2 id="matrixRSA"><a href="#matrixRSA" class="headerlink" title="matrixRSA"></a>matrixRSA</h2><p>先看题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br>ext_len = <span class="hljs-number">9</span>*<span class="hljs-number">23</span> - <span class="hljs-built_in">len</span>(flag)<br>flag += <span class="hljs-string">&#x27;&#x27;</span>.join(random.choice(string.printable) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ext_len))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_rsa_encrypt</span>():<br>    p = getPrime(<span class="hljs-number">512</span>)<br>    q = getPrime(<span class="hljs-number">512</span>)<br>    n = p * q<br>    data = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>        data.append(bytes_to_long(flag[<span class="hljs-number">23</span>*i:<span class="hljs-number">23</span>*(i+<span class="hljs-number">1</span>)].encode()))<br>    M = Matrix(Zmod(n), [data[i:i+<span class="hljs-number">3</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(data), <span class="hljs-number">3</span>)])<br>    e = <span class="hljs-number">65537</span><br>    C = M**e<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p =&quot;</span>, p &gt;&gt; <span class="hljs-number">100</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n =&quot;</span>, n)<br>    <span class="hljs-keyword">return</span> C<br>C = my_rsa_encrypt()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;C =&quot;</span>, C)<br></code></pre></td></tr></table></figure><p>题目将矩阵用RSA的方式进行了加密<br>然后给出了p的高412位,n,和C</p><p>直接上coppersmith即可解出p</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sage">p=9707529668721508094878754383636813058761407528950189013789315732447048631740849315894253576415843631107370002912949379757275<br>n=132298777672085547096511087266255066285502135020124093900452138262993155381766816424955849796168059204379325075568094431259877923353664926875986223020472585645919414821322880213299188157427622804140996898685564075484754918339670099806186873974594139182324884620018780943630196754736972805036038798946726414009<br>p=p&lt;&lt;100<br>bit=100<br>R.&lt;x&gt;=PolynomialRing(Zmod(n))<br>f=p+x<br>f=f.monic()<br>roots=f.small_roots(X=2^bit,beta=0.4,epsilon=0.01)<br>print(roots)<br></code></pre></td></tr></table></figure><blockquote><p>[386875690473242360543194849663]</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">p=<span class="hljs-number">12305755811288164655681709252717258015229295989302934566212712319314835335461946241491177972870130171728224502716603340551354171940107285908105124549960063</span><br>q=<span class="hljs-number">10750967246621849802090386055921679114516122704252330881722100331526757637044067492444912824266860574267360247681890637480406758188129451052986858429875143</span><br></code></pre></td></tr></table></figure><p>刚开始先试试phi&#x3D;(p-1)*(q-1)<br>按正常RSA来解发现结果不对<br>上网搜索（搜索引擎yyds）<br>发现这道题其实是论文复现<br>基本是原题了，<a href="https://latallvia-d.github.io/2024/07/02/%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0%EF%BC%9AA%20Matrix%20Extension%20of%20the%20RSA%20Cryptosystem/">这是原文</a> <del>他博客主题怎么跟我一样（小声）</del></p><p><img src="/2025/01/22/2025.1.18DASCTF/1.png"><br>那么把phi用(p**2-1)*(p**2-p)*(q**2-1)*(q**2-q)代掉即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>C = [[<span class="hljs-number">130700952989014311434434028098810412089294728270156705618326733322297465714495704072159530618655340096705383710304658044991149662060657745933090473082775425812641300964472543605460360640675949447837208449794830578184968528547366608180085787382376536622136035364815331037493098283462540849880674541138443271941</span>,<span class="hljs-number">71108771421281691064141020659106224750236412635914570166893031318860027728093402453305986361330527563506168063047627979831630830003190075818824767924892107148560048725155587353683119195901991465464478196049173060097561821877061015587704803006499153902855903286456023726638247758665778434728734461065079337757</span>,<span class="hljs-number">67999998657112350704927993584783146575182096185020115836188544590466205688442741039622382576899587857972463337900200038021257164640987281308471100297698062626107380871262596623736773815445544153508352926374272336154553916204320257697068627063236060520725376727528604938949588845448940836430120015498687885615</span>],<br>[ <span class="hljs-number">23893343854815011808020457237095285782125931083991537368666368653089096539223297567339111502968295914745423286070638369517207554770793304994639155083818859208362057394004419565231389473766857235749279110546079776040193183912062870294579472815588333047561915280189529367474392709554971446978468118280633281993</span>,<span class="hljs-number">9711323829269829751519177755915164402658693668631868499383945203627197171508441332211907278473276713066275283973856513580205808517918096017699122954464305556795300874005627001464297760413897074044080665941802588680926430030715299713241442313300920463145903399054123967914968894345491958980945927764454159601</span>,<span class="hljs-number">44904507975955275578858125671789564568591470104141872573541481508697254621798834910263012676346204850278744732796211742615531019931085695420000582627144871996018850098958417750918177991375489106531511894991744745328626887250694950153424439172667977623425955725695498585224383607063387876414273539268016177401</span>],<br>[ <span class="hljs-number">67805732998935098446255672500407441801838056284635701147853683333480924477835278030145327818330916280792499177503535618310624546400536573924729837478349680007368781306805363621196573313903080315513952415535369016620873765493531188596985587834408434835281527678166509365418905214174034794683785063802543354572</span>,<span class="hljs-number">13486048723056269216825615499052563411132892702727634833280269923882908676944418624902325737619945647093190397919828623788245644333036340084254490542292357044974139884304715033710988658109160936809398722070125690919829906642273377982021120160702344103998315875166038849942426382506293976662337161520494820727</span>,<span class="hljs-number">95932690738697024519546289135992512776877884741458439242887603021792409575448192508456813215486904392440772808083658410285088451086298418303987628634150431725794904656250453314950126433260613949819432633322599879072805834951478466009343397728711205498602927752917834774516505262381463414617797291857077444676</span>]]<br><br>n=<span class="hljs-number">132298777672085547096511087266255066285502135020124093900452138262993155381766816424955849796168059204379325075568094431259877923353664926875986223020472585645919414821322880213299188157427622804140996898685564075484754918339670099806186873974594139182324884620018780943630196754736972805036038798946726414009</span><br>p=<span class="hljs-number">12305755811288164655681709252717258015229295989302934566212712319314835335461946241491177972870130171728224502716603340551354171940107285908105124549960063</span><br>q=<span class="hljs-number">10750967246621849802090386055921679114516122704252330881722100331526757637044067492444912824266860574267360247681890637480406758188129451052986858429875143</span><br>e=<span class="hljs-number">65537</span><br>phi=(p**<span class="hljs-number">2</span>-<span class="hljs-number">1</span>)*(p**<span class="hljs-number">2</span>-p)*(q**<span class="hljs-number">2</span>-<span class="hljs-number">1</span>)*(q**<span class="hljs-number">2</span>-q)<br>d=inverse(e,phi)<br>B=Matrix(Zmod(n),C)<br>B=B**d<br>flag=<span class="hljs-string">b&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        flag+=long_to_bytes(<span class="hljs-built_in">int</span>(B[i][j]))<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>最后得出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">b&#x27;DASCTF&#123;48ccbfd88061d7ff3d5325148ec55d11&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="已悟"><a href="#已悟" class="headerlink" title="已悟"></a>已悟</h2><p>题目给了两个py文件</p><p>task:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> line_profiler <span class="hljs-keyword">import</span> LineProfiler<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> get_key<br><span class="hljs-keyword">from</span> license <span class="hljs-keyword">import</span> RicKV<br><span class="hljs-keyword">import</span> os<br><br>flag = os.getenv(<span class="hljs-string">&#x27;DASFLAG&#x27;</span>)<br>smoke_key = get_key() <span class="hljs-comment"># the key just printable, this function is to make all users key different</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">password</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(password) != <span class="hljs-built_in">len</span>(smoke_key):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(password)):<br>        <span class="hljs-keyword">if</span> password[i] != smoke_key[i]:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_password</span>(<span class="hljs-params">user_input,pro=<span class="hljs-literal">False</span></span>):<br>    profiler = LineProfiler()<br>    profiler.add_function(login)<br>    profiler.enable_by_count()<br>    is_valid = login(user_input)<br>    profiler.disable_by_count()<br>    x = profiler.get_stats().timings<br>    hacker,hacker_pro = [],[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> x:<br>         <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> x[i]:<br>              hacker.append((j[<span class="hljs-number">0</span>],j[-<span class="hljs-number">1</span>]))<br>              hacker_pro.append(j)<br>    <span class="hljs-built_in">print</span>(hacker)<br>    <span class="hljs-keyword">return</span> is_valid, hacker_pro <span class="hljs-keyword">if</span> pro <span class="hljs-keyword">else</span> hacker<br><br>banner = <span class="hljs-string">&quot;🏞️ ⚔️ 2️⃣ 0️⃣ 2️⃣ 5️⃣ 👋 😊&quot;</span><br><br>MEUN = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1️⃣ ✨ 🔑 🚩</span><br><span class="hljs-string">2️⃣ ✨ 🛍️ ⚡️💨5️⃣</span><br><span class="hljs-string">3️⃣ ✨ ➡️ 🍐🍬</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-built_in">print</span>(banner)<br>    pro = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-built_in">print</span>(MEUN)<br>            choice = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt; &quot;</span>)[<span class="hljs-number">0</span>])<br>            <span class="hljs-keyword">if</span> choice == <span class="hljs-number">3</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;🏔️🐑❄️🐆🦦🦊🐹👩🏔️&quot;</span>)<br>                exit(<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">elif</span> choice == <span class="hljs-number">1</span>:<br>                 password = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;🔑 &gt; &quot;</span>).strip()<br>                 success,X = check_password(password,pro)<br>                 <span class="hljs-keyword">if</span> success:<br>                      <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;1️⃣ ❗5️⃣ ❗👴💨⚡️💨5️⃣&quot;</span>)<br>                      <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;🚩 <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>                      exit(<span class="hljs-number">0</span>)<br>                 <span class="hljs-keyword">else</span>:<br>                      <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;🤔 💨 <span class="hljs-subst">&#123;X&#125;</span> 💨&quot;</span>)<br>            <span class="hljs-keyword">elif</span> choice == <span class="hljs-number">2</span>:<br>                 <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">                 怎么获取秘钥？</span><br><span class="hljs-string"></span><br><span class="hljs-string">                 您可以使用 CTF 的一把梭工具,或者给我一支锐克。</span><br><span class="hljs-string">                 Maybe you noob ctfer can go to xianyu or ask friend for help.</span><br><span class="hljs-string">                 ざっこの方は、xianyu に行くか、友達に助けを求めるといいかもしれません。ざっこ！ざっこ！🤭🤭🤭</span><br><span class="hljs-string">                 མདོག་འདོད་འདི་ CTF གནོད་པའི་ལག་ཆོད་ལས་ ཧིན་ཨིའུ་ཡིན་ལུང་ འོག་ལུ་ལོངས་སྐད་ཁུངས་ལུ་འཛུལ་བ་འདི་འདོད་མི་འབད་ཡོད་མི་འདུག་。</span><br><span class="hljs-string"></span><br><span class="hljs-string">                 &quot;&quot;&quot;</span><br>                 license_key = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;🔑 &gt; &quot;</span>).strip()<br>                 license = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;📜 &gt; &quot;</span>).strip()<br>                 rick = RicKV(license_key)<br>                 <span class="hljs-keyword">if</span> rick.check(license):<br>                      pro = <span class="hljs-literal">True</span><br>                 <span class="hljs-keyword">else</span>:<br>                      <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;👵🏻👵🏻🤰👶&quot;</span>)<br></code></pre></td></tr></table></figure><p>license:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> hashlib<br><br>Xor= <span class="hljs-keyword">lambda</span> v: reduce(<span class="hljs-keyword">lambda</span> res, x: res ^ x, v, <span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RicKV</span>:<br>    <span class="hljs-built_in">round</span> = <span class="hljs-number">15</span><br>    S1 = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<br>    S2 = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, key</span>):<br>        key = hashlib.sha256(<span class="hljs-built_in">str</span>(key).encode(<span class="hljs-string">&quot;utf-8&quot;</span>)).digest()<br>        random.seed(key)<br>        <span class="hljs-variable language_">self</span>.roundkey = <span class="hljs-built_in">int</span>(key.<span class="hljs-built_in">hex</span>(), <span class="hljs-number">16</span>)<br>        <span class="hljs-variable language_">self</span>.subkeys = [<br>            [<br>                ((<span class="hljs-built_in">int</span>(<span class="hljs-built_in">bin</span>(<span class="hljs-variable language_">self</span>.roundkey)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">16</span> * (<span class="hljs-variable language_">self</span>.<span class="hljs-built_in">round</span>+ <span class="hljs-number">1</span>))[<span class="hljs-number">16</span> * j + i]) &amp; <span class="hljs-number">1</span>) - <span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xf</span><br>                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)<br>            ]<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-variable language_">self</span>.<span class="hljs-built_in">round</span> + <span class="hljs-number">1</span>)<br>        ]<br>        random.shuffle(<span class="hljs-variable language_">self</span>.S1)<br>        random.shuffle(<span class="hljs-variable language_">self</span>.S2)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add_round</span>(<span class="hljs-params">self, s, k</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>                s[i*<span class="hljs-number">4</span>+j] ^= k[i]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sub</span>(<span class="hljs-params">self,s</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>            index = <span class="hljs-variable language_">self</span>.S2[i]  <br>            temp = s[index]     <br>            s[i] = <span class="hljs-variable language_">self</span>.S1[temp]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">mix_1</span>(<span class="hljs-params">self,s,r</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>            s[i] = s[i] ^ <span class="hljs-variable language_">self</span>.subkeys[i][r]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">mix_2</span>(<span class="hljs-params">self,s,x</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">16</span>,<span class="hljs-number">4</span>):<br>            x[i//<span class="hljs-number">4</span>] = Xor(s[i:i + <span class="hljs-number">4</span>])<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">flip</span>(<span class="hljs-params">self, plaintext</span>):<br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(plaintext) == <span class="hljs-number">8</span><br>        S = [<span class="hljs-built_in">int</span>(_, <span class="hljs-number">16</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>(plaintext.<span class="hljs-built_in">hex</span>())]<br>        X = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)]<br>        <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-variable language_">self</span>.<span class="hljs-built_in">round</span>):<br>            <span class="hljs-variable language_">self</span>.mix_1(S,r)<br>            <span class="hljs-variable language_">self</span>.sub(S)<br>            <span class="hljs-variable language_">self</span>.mix_2(S,X)<br>            <span class="hljs-variable language_">self</span>.add_round(S,X)<br><br>        S = [S[i] ^ <span class="hljs-variable language_">self</span>.subkeys[<span class="hljs-variable language_">self</span>.<span class="hljs-built_in">round</span>][i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-string">&quot;&#123;:x&#125;&quot;</span>.<span class="hljs-built_in">format</span>(_) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> S))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">self,liscense</span>):<br>        liscense= base64.b64decode(liscense)<br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(liscense) % <span class="hljs-number">8</span> == <span class="hljs-number">0</span><br>        l = <span class="hljs-string">b&quot;\x00&quot;</span> * <span class="hljs-number">8</span>  <br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(liscense),<span class="hljs-number">8</span>):<br>            l = <span class="hljs-built_in">bytes</span>(d^j <span class="hljs-keyword">for</span> d,j <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(l,liscense[i:i+<span class="hljs-number">8</span>]))<br>            l = <span class="hljs-variable language_">self</span>.flip(l)<br>            l = <span class="hljs-built_in">bytes</span>(d^j <span class="hljs-keyword">for</span> d,j <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(l,liscense[i:i+<span class="hljs-number">8</span>]))<br>        <span class="hljs-built_in">print</span>(l)<br>        <span class="hljs-keyword">return</span>  <span class="hljs-keyword">not</span> <span class="hljs-built_in">any</span>(l)<br></code></pre></td></tr></table></figure><p>先看task<br>login函数判断输入是否与smkoe_key相同，不同则立刻返回False<br>check_password调用login并返回login执行的细节，包括执行了哪一行，执行次数，执行时间<br>但如果pro是False，我们是拿不到执行次数的<br>license则是对输入进行一个判断</p><p>所以我们需要在2中提及一个满足条件的license，然后就可以开始针对执行次数攻击<br>在license中有一句assert len(liscense) % 8 &#x3D;&#x3D; 0，此时如果len(liscense)为0也是满足的，并且not any(l)是True<br>所以我们直接提交一个空license即可</p><p>然后稍微爆破一下smoke_key的长度，再逐个爆破即可拿到flag<br>exp(稍微有点丑陋):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> string<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send1</span>(<span class="hljs-params">s</span>):<br>    out=r.recvuntil(<span class="hljs-string">b&#x27;&gt; &#x27;</span>)<br>    r.sendline(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    out+=r.recvuntil(<span class="hljs-string">b&#x27;&gt; &#x27;</span>)<br><br>    r.sendline(s.encode())<br>    out+=r.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    out+=r.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    <span class="hljs-keyword">return</span> out.decode()<br><br>context(os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><br>HOST=<span class="hljs-string">&#x27;139.155.126.78&#x27;</span><br>PORT=<span class="hljs-number">18806</span><br><br>r=remote(HOST,PORT)<br>out=r.recv(<span class="hljs-number">400</span>)<br><br><span class="hljs-comment">#提交空license</span><br>r.sendline(<span class="hljs-string">b&#x27;2&#x27;</span>)<br>out=r.recv(<span class="hljs-number">400</span>)<br><br>r.sendline(<span class="hljs-string">b&#x27;123456&#x27;</span>)<br>out=r.recv(<span class="hljs-number">400</span>)<br><br>r.sendline(<span class="hljs-string">b&#x27;&#x27;</span>)<br>out=r.recv(<span class="hljs-number">800</span>)<br><span class="hljs-built_in">print</span>(out.decode())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;=========&#x27;</span>)<br><br><span class="hljs-comment">#这里之前有爆过长度，节省时间从22开始爆，每次连接的smoke_key长度的不固定的</span><br>length=<span class="hljs-number">22</span><br>out=send1(<span class="hljs-string">&#x27;1&#x27;</span>*length)<br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;12&#x27;</span> <span class="hljs-keyword">in</span> out:<span class="hljs-comment">#如果执行了if len(password) != len(smoke_key):后面的return False</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">30</span>):<br>        out=send1(<span class="hljs-string">&#x27;1&#x27;</span>*(length+i))<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;12&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> out:<br>            length=length+i<br>            <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(length)<br><br>key=<span class="hljs-string">&#x27;&#x27;</span><br>st=string.printable[:-<span class="hljs-number">5</span>]<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length):<br>    <span class="hljs-built_in">print</span>(j)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> st:<br>        out=send1(<span class="hljs-string">r&#x27;&#x27;</span>+key+i+<span class="hljs-string">&#x27;0&#x27;</span>*(length-<span class="hljs-number">1</span>-j))<br>        left=out.find(<span class="hljs-string">&#x27;[&#x27;</span>)<br>        right=out.find(<span class="hljs-string">&#x27;]&#x27;</span>)<br>        <span class="hljs-keyword">if</span> left!=-<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> right!=-<span class="hljs-number">1</span>:<br>            l1=<span class="hljs-built_in">eval</span>(out[left:right+<span class="hljs-number">1</span>])<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(l1)&gt;<span class="hljs-number">2</span>:<br>                <span class="hljs-keyword">if</span> l1[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]&gt;j+<span class="hljs-number">1</span>:<br>                    <span class="hljs-built_in">print</span>(l1)<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;success&#x27;</span>)<br>                    key+=i<br>                    <span class="hljs-built_in">print</span>(key)<br>                    <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;over&#x27;</span>)<br>            <span class="hljs-built_in">print</span>(out)<br></code></pre></td></tr></table></figure><p>然后成功拿到flag</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">DASCTF</span>&#123;<span class="hljs-number">82027784803625989128426726039406</span>&#125;<br></code></pre></td></tr></table></figure><p>题目没有对空license进行一个判断，这也就成了一个突破点</p><hr><p>嗯，就先这两题吧~。剩下两题，一题zuc不是很想做，另一题我题目都不想看。就先到这吧。<br><img src="/2025/01/22/2025.1.18DASCTF/2.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>crypto</category>
      
      <category>DASCTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
      <tag>RSA</tag>
      
      <tag>DASCTF</tag>
      
      <tag>matrix</tag>
      
      <tag>矩阵</tag>
      
      <tag>论文复现</tag>
      
      <tag>靶机</tag>
      
      <tag>侧信道攻击</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>换电脑啦</title>
    <link href="/2025/01/22/%E6%8D%A2%E7%94%B5%E8%84%91%E5%95%A6/"/>
    <url>/2025/01/22/%E6%8D%A2%E7%94%B5%E8%84%91%E5%95%A6/</url>
    
    <content type="html"><![CDATA[<p>换了台电脑，git提交没问题了，要开始更新博客啦<br><img src="/2025/01/22/%E6%8D%A2%E7%94%B5%E8%84%91%E5%95%A6/1.jpg" alt="当当当当"></p><p>之后大概就是会比赛的题目出一篇博客，密码出一篇博客，所以可能会有点重复。嗯。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>池塘里的小石子</title>
    <link href="/2025/01/20/pictures/"/>
    <url>/2025/01/20/pictures/</url>
    
    <content type="html"><![CDATA[<h1 id="池塘里的小石子"><a href="#池塘里的小石子" class="headerlink" title="池塘里的小石子"></a>池塘里的小石子</h1><p>会有一些小故事</p><h3 id="明日方舟"><a href="#明日方舟" class="headerlink" title="明日方舟"></a>明日方舟</h3><p><img src="/pictures/19.png" alt="1"><br><img src="/pictures/20.png" alt="2"><br><img src="/pictures/21.png" alt="3"><br><img src="/pictures/22.png" alt="4"><br><img src="/pictures/23.png" alt="5"><br><img src="/pictures/24.png" alt="6"><br><img src="/pictures/25.png" alt="7"></p>]]></content>
    
    
    
    <tags>
      
      <tag>明日方舟</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
