<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2025.2.3hgame</title>
    <link href="/2025/02/21/2025-2-3hgame/"/>
    <url>/2025/02/21/2025-2-3hgame/</url>
    
    <content type="html"><![CDATA[<h1 id="2025-2-3hgame"><a href="#2025-2-3hgame" class="headerlink" title="2025.2.3hgame"></a>2025.2.3hgame</h1><p>是 <strong>2025.2.3hgame</strong> 哒！</p><h2 id="week1"><a href="#week1" class="headerlink" title="week1"></a>week1</h2><h3 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h3><h4 id="suprimeRSA"><a href="#suprimeRSA" class="headerlink" title="suprimeRSA"></a>suprimeRSA</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> prime<br><br>FLAG=<span class="hljs-string">b&#x27;hgame&#123;xxxxxxxxxxxxxxxxxx&#125;&#x27;</span><br>e=<span class="hljs-number">0x10001</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">primorial</span>(<span class="hljs-params">num</span>):<br>    result = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, num + <span class="hljs-number">1</span>):<br>        result *= prime(i)<br>    <span class="hljs-keyword">return</span> result<br>M=primorial(random.choice([<span class="hljs-number">39</span>,<span class="hljs-number">71</span>,<span class="hljs-number">126</span>]))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_key</span>():<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        k = getPrime(random.randint(<span class="hljs-number">20</span>,<span class="hljs-number">40</span>))<br>        a = getPrime(random.randint(<span class="hljs-number">20</span>,<span class="hljs-number">60</span>))<br>        p = k * M + <span class="hljs-built_in">pow</span>(e, a, M)<br>        <span class="hljs-keyword">if</span> isPrime(p):<br>            <span class="hljs-keyword">return</span> p<br><br>p,q=gen_key(),gen_key()<br>n=p*q<br>m=bytes_to_long(FLAG)<br>enc=<span class="hljs-built_in">pow</span>(m,e,n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;n=&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;enc=&#125;</span>&#x27;</span>)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">n=787190064146025392337631797277972559696758830083248285626115725258876808514690830730702705056550628756290183000265129340257928314614351263713241</span><br><span class="hljs-string">enc=365164788284364079752299551355267634718233656769290285760796137651769990253028664857272749598268110892426683253579840758552222893644373690398408</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>直接上ROCA<br>我是照着这篇博客来的<br><a href="https://blog.csdn.net/qq_51999772/article/details/123146784">GKCTF2020_Crypto_复现</a><br>这里也贴一下博客里的脚本<br>脚本里的M_prime不需要换成题目里的M</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs sage"><br>from sage.all import *<br>from tqdm import tqdm<br><br>def solve(M, n, a, m):<br>    # I need to import it in the function otherwise multiprocessing doesn&#x27;t find it in its context<br>    from sage_functions import coppersmith_howgrave_univariate<br><br>    base = int(65537)<br>    # the known part of p: 65537^a * M^-1 (mod N)<br>    known = int(pow(base, a, M) * inverse_mod(M, n))<br>    # Create the polynom f(x)<br>    F = PolynomialRing(Zmod(n), implementation=&#x27;NTL&#x27;, names=(&#x27;x&#x27;,))<br>    (x,) = F._first_ngens(1)<br>    pol = x + known<br>    beta = 0.1<br>    t = m+1<br>    # Upper bound for the small root x0<br>    XX = floor(2 * n**0.5 / M)<br>    # Find a small root (x0 = k) using Coppersmith&#x27;s algorithm<br>    roots = coppersmith_howgrave_univariate(pol, n, beta, m, t, XX)<br>    # There will be no roots for an incorrect guess of a.<br>    for k in roots:<br>        # reconstruct p from the recovered k<br>        p = int(k*M + pow(base, a, M))<br>        if n%p == 0:<br>            return p, n//p<br><br>def roca(n):<br><br>    keySize = n.bit_length()<br><br>    if keySize &lt;= 960:<br>        M_prime = 0x1b3e6c9433a7735fa5fc479ffe4027e13bea<br>        m = 5<br><br>    elif 992 &lt;= keySize &lt;= 1952:<br>        M_prime = 0x24683144f41188c2b1d6a217f81f12888e4e6513c43f3f60e72af8bd9728807483425d1e<br>        m = 4<br>        print(&quot;Have you several days/months to spend on this ?&quot;)<br><br>    elif 1984 &lt;= keySize &lt;= 3936:<br>        M_prime = 0x16928dc3e47b44daf289a60e80e1fc6bd7648d7ef60d1890f3e0a9455efe0abdb7a748131413cebd2e36a76a355c1b664be462e115ac330f9c13344f8f3d1034a02c23396e6<br>        m = 7<br>        print(&quot;You&#x27;ll change computer before this scripts ends...&quot;)<br><br>    elif 3968 &lt;= keySize &lt;= 4096:<br>        print(&quot;Just no.&quot;)<br>        return None<br><br>    else:<br>        print(&quot;Invalid key size: &#123;&#125;&quot;.format(keySize))<br>        return None<br><br>    a3 = Zmod(M_prime)(n).log(65537)<br>    order = Zmod(M_prime)(65537).multiplicative_order()<br>    inf = a3 // 2<br>    sup = (a3 + order) // 2<br><br>    # Search 10 000 values at a time, using multiprocess<br>    # too big chunks is slower, too small chunks also<br>    chunk_size = 10000<br>    for inf_a in tqdm(range(inf, sup, chunk_size)):<br>        # create an array with the parameter for the solve function<br>        inputs = [((M_prime, n, a, m), &#123;&#125;) for a in range(inf_a, inf_a+chunk_size)]<br>        # the sage builtin multiprocessing stuff<br>        from sage.parallel.multiprocessing_sage import parallel_iter<br>        from multiprocessing import cpu_count<br><br>        for k, val in parallel_iter(cpu_count(), solve, inputs):<br>            if val:<br>                p = val[0]<br>                q = val[1]<br>                print(&quot;found factorization:\np=&#123;&#125;\nq=&#123;&#125;&quot;.format(p, q))<br>                return val<br><br>if __name__ == &quot;__main__&quot;:<br>    # Normal values<br>    #p = 88311034938730298582578660387891056695070863074513276159180199367175300923113<br>    #q = 122706669547814628745942441166902931145718723658826773278715872626636030375109<br>    #a = 551658, interval = [475706, 1076306]<br>    # won&#x27;t find if beta=0.5<br>    # p = 80688738291820833650844741016523373313635060001251156496219948915457811770063<br>    # q = 69288134094572876629045028069371975574660226148748274586674507084213286357069<br>    # #a = 176170, interval = [171312, 771912]<br>    # n = p*q<br>    n = 15518961041625074876182404585394098781487141059285455927024321276783831122168745076359780343078011216480587575072479784829258678691739<br>    # For the test values chosen, a is quite close to the minimal value so the search is not too long<br>    roca(n)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs sage"><br>from sage.all_cmdline import *<br><br>def coppersmith_howgrave_univariate(pol, modulus, beta, mm, tt, XX):<br>    &quot;&quot;&quot;<br>    Taken from https://github.com/mimoo/RSA-and-LLL-attacks/blob/master/coppersmith.sage<br>    Coppersmith revisited by Howgrave-Graham<br><br>    finds a solution if:<br>    * b|modulus, b &gt;= modulus^beta , 0 &lt; beta &lt;= 1<br>    * |x| &lt; XX<br>    More tunable than sage&#x27;s builtin coppersmith method, pol.small_roots()<br>    &quot;&quot;&quot;<br>    #<br>    # init<br>    #<br>    dd = pol.degree()<br>    nn = dd * mm + tt<br><br>    #<br>    # checks<br>    #<br>    if not 0 &lt; beta &lt;= 1:<br>        raise ValueError(&quot;beta should belongs in [0, 1]&quot;)<br><br>    if not pol.is_monic():<br>        raise ArithmeticError(&quot;Polynomial must be monic.&quot;)<br><br>    #<br>    # calculate bounds and display them<br>    #<br>    &quot;&quot;&quot;<br>    * we want to find g(x) such that ||g(xX)|| &lt;= b^m / sqrt(n)<br><br>    * we know LLL will give us a short vector v such that:<br>    ||v|| &lt;= 2^((n - 1)/4) * det(L)^(1/n)<br><br>    * we will use that vector as a coefficient vector for our g(x)<br><br>    * so we want to satisfy:<br>    2^((n - 1)/4) * det(L)^(1/n) &lt; N^(beta*m) / sqrt(n)<br><br>    so we can obtain ||v|| &lt; N^(beta*m) / sqrt(n) &lt;= b^m / sqrt(n)<br>    (it&#x27;s important to use N because we might not know b)<br>    &quot;&quot;&quot;<br>    #<br>    # Coppersmith revisited algo for univariate<br>    #<br><br>    # change ring of pol and x<br>    polZ = pol.change_ring(ZZ)<br>    x = polZ.parent().gen()<br><br>    # compute polynomials<br>    gg = []<br>    for ii in range(mm):<br>        for jj in range(dd):<br>            gg.append((x * XX) ** jj * modulus ** (mm - ii) * polZ(x * XX) ** ii)<br>    for ii in range(tt):<br>        gg.append((x * XX) ** ii * polZ(x * XX) ** mm)<br><br>    # construct lattice B<br>    BB = Matrix(ZZ, nn)<br><br>    for ii in range(nn):<br>        for jj in range(ii + 1):<br>            BB[ii, jj] = gg[ii][jj]<br><br>    BB = BB.LLL()<br><br>    # transform shortest vector in polynomial<br>    new_pol = 0<br>    for ii in range(nn):<br>        new_pol += x ** ii * BB[0, ii] / XX ** ii<br><br>    # factor polynomial<br>    potential_roots = new_pol.roots()<br><br>    # test roots<br>    roots = []<br>    for root in potential_roots:<br>        if root[0].is_integer():<br>            result = polZ(ZZ(root[0]))<br>            if gcd(modulus, result) &gt;= modulus ** beta:<br>                roots.append(ZZ(root[0]))<br>    return roots<br></code></pre></td></tr></table></figure><p>分解出p,q后直接正常RSA解密即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs flag">hgame&#123;ROCA_ROCK_and_ROll!&#125;<br></code></pre></td></tr></table></figure><h4 id="ezBag"><a href="#ezBag" class="headerlink" title="ezBag"></a>ezBag</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br><span class="hljs-keyword">from</span> secrets <span class="hljs-keyword">import</span> flag<br><br><span class="hljs-built_in">list</span> = []<br>bag = []<br>p=random.getrandbits(<span class="hljs-number">64</span>)<br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">bin</span>(p)[<span class="hljs-number">2</span>:])==<span class="hljs-number">64</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    t = p<br>    a=[getPrime(<span class="hljs-number">32</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>)]<br>    b=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>        temp=t%<span class="hljs-number">2</span><br>        b+=temp*i<br>        t=t&gt;&gt;<span class="hljs-number">1</span><br>    <span class="hljs-built_in">list</span>.append(a)<br>    bag.append(b)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;list=<span class="hljs-subst">&#123;<span class="hljs-built_in">list</span>&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;bag=<span class="hljs-subst">&#123;bag&#125;</span>&#x27;</span>)<br><br>key = hashlib.sha256(<span class="hljs-built_in">str</span>(p).encode()).digest()<br>cipher = AES.new(key, AES.MODE_ECB)<br>flag = pad(flag,<span class="hljs-number">16</span>)<br>ciphertext = cipher.encrypt(flag)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;ciphertext=<span class="hljs-subst">&#123;ciphertext&#125;</span>&quot;</span>)<br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">list=[[2826962231, 3385780583, 3492076631, 3387360133, 2955228863, 2289302839, 2243420737, 4129435549, 4249730059, 3553886213, 3506411549, 3658342997, 3701237861, 4279828309, 2791229339, 4234587439, 3870221273, 2989000187, 2638446521, 3589355327, 3480013811, 3581260537, 2347978027, 3160283047, 2416622491, 2349924443, 3505689469, 2641360481, 3832581799, 2977968451, 4014818999, 3989322037, 4129732829, 2339590901, 2342044303, 3001936603, 2280479471, 3957883273, 3883572877, 3337404269, 2665725899, 3705443933, 2588458577, 4003429009, 2251498177, 2781146657, 2654566039, 2426941147, 2266273523, 3210546259, 4225393481, 2304357101, 2707182253, 2552285221, 2337482071, 3096745679, 2391352387, 2437693507, 3004289807, 3857153537, 3278380013, 3953239151, 3486836107, 4053147071], [2241199309, 3658417261, 3032816659, 3069112363, 4279647403, 3244237531, 2683855087, 2980525657, 3519354793, 3290544091, 2939387147, 3669562427, 2985644621, 2961261073, 2403815549, 3737348917, 2672190887, 2363609431, 3342906361, 3298900981, 3874372373, 4287595129, 2154181787, 3475235893, 2223142793, 2871366073, 3443274743, 3162062369, 2260958543, 3814269959, 2429223151, 3363270901, 2623150861, 2424081661, 2533866931, 4087230569, 2937330469, 3846105271, 3805499729, 4188683131, 2804029297, 2707569353, 4099160981, 3491097719, 3917272979, 2888646377, 3277908071, 2892072971, 2817846821, 2453222423, 3023690689, 3533440091, 3737441353, 3941979749, 2903000761, 3845768239, 2986446259, 3630291517, 3494430073, 2199813137, 2199875113, 3794307871, 2249222681, 2797072793], [4263404657, 3176466407, 3364259291, 4201329877, 3092993861, 2771210963, 3662055773, 3124386037, 2719229677, 3049601453, 2441740487, 3404893109, 3327463897, 3742132553, 2833749769, 2661740833, 3676735241, 2612560213, 3863890813, 3792138377, 3317100499, 2967600989, 2256580343, 2471417173, 2855972923, 2335151887, 3942865523, 2521523309, 3183574087, 2956241693, 2969535607, 2867142053, 2792698229, 3058509043, 3359416111, 3375802039, 2859136043, 3453019013, 3817650721, 2357302273, 3522135839, 2997389687, 3344465713, 2223415097, 2327459153, 3383532121, 3960285331, 3287780827, 4227379109, 3679756219, 2501304959, 4184540251, 3918238627, 3253307467, 3543627671, 3975361669, 3910013423, 3283337633, 2796578957, 2724872291, 2876476727, 4095420767, 3011805113, 2620098961], [2844773681, 3852689429, 4187117513, 3608448149, 2782221329, 4100198897, 3705084667, 2753126641, 3477472717, 3202664393, 3422548799, 3078632299, 3685474021, 3707208223, 2626532549, 3444664807, 4207188437, 3422586733, 2573008943, 2992551343, 3465105079, 4260210347, 3108329821, 3488033819, 4092543859, 4184505881, 3742701763, 3957436129, 4275123371, 3307261673, 2871806527, 3307283633, 2813167853, 2319911773, 3454612333, 4199830417, 3309047869, 2506520867, 3260706133, 2969837513, 4056392609, 3819612583, 3520501211, 2949984967, 4234928149, 2690359687, 3052841873, 4196264491, 3493099081, 3774594497, 4283835373, 2753384371, 2215041107, 4054564757, 4074850229, 2936529709, 2399732833, 3078232933, 2922467927, 3832061581, 3871240591, 3526620683, 2304071411, 3679560821]]</span><br><span class="hljs-string">bag=[123342809734, 118191282440, 119799979406, 128273451872]</span><br><span class="hljs-string">ciphertext=b&#x27;\x1d6\xcc&#125;\x07\xfa7G\xbd\x01\xf0P4^Q&quot;\x85\x9f\xac\x98\x8f#\xb2\x12\xf4+\x05`\x80\x1a\xfa !\x9b\xa5\xc7g\xa8b\x89\x93\x1e\xedz\xd2M;\xa2&#x27;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>很明显的背包问题的多子集和变式，照着A Gentle Tutorial for Lattice-Based Cryptanalysis这篇论文来即可，主要就是在矩阵的右边再增加n列的 子集以及背包容量<br>官方题解中给每个 子集以及背包容量 乘以了2^10这么个系数，然后LLL即可求解<br>或者不乘系数直接用BKZ也是可以的<br>exp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs sage">B=[[0 for i in range(len(list[0])+5)] for i in range(len(list[0])+1)]<br>de=2<br>for i in range(len(list[0])):<br>    B[i][i]=de<br>    B[i][len(list[0])+ 1]=list[0][i]<br>    B[i][len(list[0])+ 2]=list[1][i]<br>    B[i][len(list[0])+ 3]=list[2][i]<br>    B[i][len(list[0])+ 4]=list[3][i]<br>    B[len(list[0])][i]=de/2<br>B[-1][-1]=bag[-1]<br>B[-1][-2]=bag[-2]<br>B[-1][-3]=bag[-3]<br>B[-1][-4]=bag[-4]<br>B[-1][len(list[0])]=de/2<br>B=matrix(ZZ,B)<br>B_=B.BKZ()<br>for i in range(len(list[0]) + 1):<br>    M = B_.row(i).list()<br>    flag = True<br>    for m in M[:-5]:<br>        if m != de/2 and m != -de/2:<br>            flag = False<br>            break<br>    if flag:<br>        print(M)<br>a=[1, 1, 1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, 1, 1, 1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, 1, 1][::-1]<br>c=&#x27;&#x27;<br>for i in a:<br>    if i==-1:<br>        c+=&#x27;0&#x27;<br>    else:<br>        c+=&#x27;1&#x27;<br><br>        <br>p=int(c,2)<br>#17739748707559623655<br>p=17739748707559623655<br>key = hashlib.sha256(str(p).encode()).digest()<br>cipher = AES.new(key, AES.MODE_ECB)<br>print(cipher.decrypt(ciphertext))<br></code></pre></td></tr></table></figure><p>flag:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs flag">hgame&#123;A_S1mple_Modul@r_Subset_Sum_Problem&#125;<br></code></pre></td></tr></table></figure><h4 id="sieve"><a href="#sieve" class="headerlink" title="sieve"></a>sieve</h4><p>两种不同孔径的筛子，才能筛干净</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sage">from Crypto.Util.number import bytes_to_long<br>from sympy import nextprime<br><br>FLAG = b&#x27;hgame&#123;xxxxxxxxxxxxxxxxxxxxxx&#125;&#x27;<br>m = bytes_to_long(FLAG)<br><br>def trick(k):<br>    if k &gt; 1:<br>        mul = prod(range(1,k)) <br>        if k - mul % k - 1 == 0:<br>            return euler_phi(k) + trick(k-1) + 1<br>        else:<br>            return euler_phi(k) + trick(k-1)<br>    else:<br>        return 1<br><br>e = 65537<br>p = q = nextprime(trick(e^2//6)&lt;&lt;128)<br>n = p * q<br>enc = pow(m,e,n)<br>print(f&#x27;&#123;enc=&#125;&#x27;)<br>#enc=2449294097474714136530140099784592732766444481665278038069484466665506153967851063209402336025065476172617376546<br></code></pre></td></tr></table></figure><p>题目是要我们求n之前的数的欧拉函数和，如果是素数再额外+1<br>官方wp是用了两种筛，但单一个线性筛其实就可以完成题目的要求<br>在线性筛筛到素数时多加个1即可<br>官方exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#筛1（也可以⽤sage内置的prime_pi()）</span><br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">count_primes_optimized_sieve</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    is_prime = [<span class="hljs-literal">True</span>] * (n + <span class="hljs-number">1</span>)<br>    is_prime[<span class="hljs-number">0</span>], is_prime[<span class="hljs-number">1</span>] = <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-built_in">int</span>(n**<span class="hljs-number">0.5</span>) + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> is_prime[i]:<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i*i, n + <span class="hljs-number">1</span>, i):<br>                is_prime[j] = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>(is_prime)<br>count_primes_optimized_sieve(<span class="hljs-number">65537</span>^<span class="hljs-number">2</span>//<span class="hljs-number">6</span>)<br><span class="hljs-comment">#37030583</span><br><span class="hljs-comment">#筛2 </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">linear_sieve_phi</span>(<span class="hljs-params">m</span>):<br>    phi = [<span class="hljs-number">0</span>] * (m + <span class="hljs-number">1</span>)<br>    is_prime = [<span class="hljs-literal">True</span>] * (m + <span class="hljs-number">1</span>)<br>    primes = []<br>    phi[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, m + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> is_prime[i]:<br>            primes.append(i)<br>            phi[i] = i - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> primes:<br>            <span class="hljs-keyword">if</span> i * p &gt; m:<br>                <span class="hljs-keyword">break</span><br>            is_prime[i * p] = <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">if</span> i % p == <span class="hljs-number">0</span>:<br>                phi[i * p] = phi[i] * p<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">else</span>:<br>                phi[i * p] = phi[i] * (p - <span class="hljs-number">1</span>)<br>    pre_s = [<span class="hljs-number">0</span>] * (m + <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>):<br>        pre_s[i] = pre_s[i - <span class="hljs-number">1</span>] + phi[i]<br>    <span class="hljs-keyword">return</span> phi, pre_s<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">EulerSumSolver</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, m=<span class="hljs-number">10</span>**<span class="hljs-number">6</span></span>):<br>        <span class="hljs-variable language_">self</span>.m = m<br>        <span class="hljs-variable language_">self</span>.phi, <span class="hljs-variable language_">self</span>.pre_s = linear_sieve_phi(m)<br>        <span class="hljs-variable language_">self</span>.cache = &#123;&#125;<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">S</span>(<span class="hljs-params">self, n</span>):<br>        <span class="hljs-keyword">if</span> n &lt;= <span class="hljs-variable language_">self</span>.m:<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.pre_s[n]<br>        <span class="hljs-keyword">if</span> n <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.cache:<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.cache[n]<br>        res = n * (n + <span class="hljs-number">1</span>) // <span class="hljs-number">2</span><br>        v = <span class="hljs-built_in">int</span>(n ** <span class="hljs-number">0.5</span>)<br>        sum1 = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, v + <span class="hljs-number">1</span>):<br>            sum1 += <span class="hljs-variable language_">self</span>.S(n // i)<br>        u = n // (v + <span class="hljs-number">1</span>)<br>        sum2 = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, u + <span class="hljs-number">1</span>):<br>            sum2 += <span class="hljs-variable language_">self</span>.S(k) * (n // k - n // (k + <span class="hljs-number">1</span>))<br>        res -= (sum1 + sum2)<br>        <span class="hljs-variable language_">self</span>.cache[n] = res<br>        <span class="hljs-keyword">return</span> res<br>solver = EulerSumSolver(m=<span class="hljs-number">10</span>**<span class="hljs-number">6</span>)<br><span class="hljs-built_in">print</span>(slover.S(<span class="hljs-number">65537</span>^<span class="hljs-number">2</span>//<span class="hljs-number">6</span>))<br><span class="hljs-comment">#155763335194435672</span><br></code></pre></td></tr></table></figure><p>单线性筛，大约需要17G以上的内存，内存不够可能会有点慢<br>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> nextprime<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sieve_phi</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">global</span> phi,prime,__<span class="hljs-built_in">sum</span><br>    __<span class="hljs-built_in">sum</span>=<span class="hljs-number">1</span><br>    phi = [<span class="hljs-number">0</span>] * (n + <span class="hljs-number">1</span>)<br>    prime = []<br>    phi[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, n + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> i%<span class="hljs-number">100000</span>==<span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(i,<span class="hljs-string">&#x27;/&#x27;</span>,n,<span class="hljs-string">&#x27;|&#x27;</span>,i/n)<br>        <span class="hljs-keyword">if</span> phi[i] == <span class="hljs-number">0</span>:<br>            __<span class="hljs-built_in">sum</span>+=<span class="hljs-number">1</span><br>            phi[i] = i - <span class="hljs-number">1</span><br>            prime.append(i)<br>        <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> prime:<br>            <span class="hljs-keyword">if</span> i * p &gt; n:<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> i%p==<span class="hljs-number">0</span>:<br>                phi[p*i]=phi[i]*p<br>                <span class="hljs-keyword">break</span><br>            phi[p*i]=phi[i]*(p-<span class="hljs-number">1</span>)<br>        __<span class="hljs-built_in">sum</span>+=phi[i]<br>    <span class="hljs-keyword">return</span> __<span class="hljs-built_in">sum</span><br><br>e = <span class="hljs-number">65537</span><br>n=e**<span class="hljs-number">2</span>//<span class="hljs-number">6</span><br>c=<span class="hljs-number">2449294097474714136530140099784592732766444481665278038069484466665506153967851063209402336025065476172617376546</span><br><br>start=time.time()<br>result=sieve_phi(n)<br>ed=time.time()<br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment">#155763335447735055</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;用时:&#x27;</span>,ed-start)<br>p=nextprime(result&lt;&lt;<span class="hljs-number">128</span>)<br>n=p**<span class="hljs-number">2</span><br>phi=p**<span class="hljs-number">2</span>-p<br>d=inverse(e,phi)<br>plain=<span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(long_to_bytes(plain))<br></code></pre></td></tr></table></figure><p>flag:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs flag">#hgame&#123;sieve_is_n0t_that_HArd&#125;<br></code></pre></td></tr></table></figure><h3 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h3><p>在CTF的征途上，我选择让思维稍作休憩。Misc领域的每一次奇技巧思，都值得被更深度地内化与沉淀。当解题的快感褪去后，我意识到过度聚焦于文档的堆砌，或许会稀释技术探索的纯粹性。此刻更愿将精力投入实战推演的复盘中，待未来的某个节点，以更精炼的方式呈现解题的密钥。知识的重组需要发酵的时间，正如隐写术的像素需要耐心校准，才能显现完整的图景。<br>省流：懒~</p><h2 id="week2"><a href="#week2" class="headerlink" title="week2"></a>week2</h2><h3 id="crypto-1"><a href="#crypto-1" class="headerlink" title="crypto"></a>crypto</h3><h4 id="Ancient-Recall"><a href="#Ancient-Recall" class="headerlink" title="Ancient Recall"></a>Ancient Recall</h4><p>命运之轮逆转了原本的厄运，请准确还原最初抽中的牌面组合，使既定命数回归其本应遵循的轨迹</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><br>Major_Arcana = [<span class="hljs-string">&quot;The Fool&quot;</span>, <span class="hljs-string">&quot;The Magician&quot;</span>, <span class="hljs-string">&quot;The High Priestess&quot;</span>,<span class="hljs-string">&quot;The Empress&quot;</span>, <span class="hljs-string">&quot;The Emperor&quot;</span>, <span class="hljs-string">&quot;The Hierophant&quot;</span>,<span class="hljs-string">&quot;The Lovers&quot;</span>, <span class="hljs-string">&quot;The Chariot&quot;</span>, <span class="hljs-string">&quot;Strength&quot;</span>,<span class="hljs-string">&quot;The Hermit&quot;</span>, <span class="hljs-string">&quot;Wheel of Fortune&quot;</span>, <span class="hljs-string">&quot;Justice&quot;</span>,<span class="hljs-string">&quot;The Hanged Man&quot;</span>, <span class="hljs-string">&quot;Death&quot;</span>, <span class="hljs-string">&quot;Temperance&quot;</span>,<span class="hljs-string">&quot;The Devil&quot;</span>, <span class="hljs-string">&quot;The Tower&quot;</span>, <span class="hljs-string">&quot;The Star&quot;</span>,<span class="hljs-string">&quot;The Moon&quot;</span>, <span class="hljs-string">&quot;The Sun&quot;</span>, <span class="hljs-string">&quot;Judgement&quot;</span>,<span class="hljs-string">&quot;The World&quot;</span>]<br>wands = [<span class="hljs-string">&quot;Ace of Wands&quot;</span>, <span class="hljs-string">&quot;Two of Wands&quot;</span>, <span class="hljs-string">&quot;Three of Wands&quot;</span>, <span class="hljs-string">&quot;Four of Wands&quot;</span>, <span class="hljs-string">&quot;Five of Wands&quot;</span>, <span class="hljs-string">&quot;Six of Wands&quot;</span>, <span class="hljs-string">&quot;Seven of Wands&quot;</span>, <span class="hljs-string">&quot;Eight of Wands&quot;</span>, <span class="hljs-string">&quot;Nine of Wands&quot;</span>, <span class="hljs-string">&quot;Ten of Wands&quot;</span>, <span class="hljs-string">&quot;Page of Wands&quot;</span>, <span class="hljs-string">&quot;Knight of Wands&quot;</span>, <span class="hljs-string">&quot;Queen of Wands&quot;</span>, <span class="hljs-string">&quot;King of Wands&quot;</span>]<br>cups = [<span class="hljs-string">&quot;Ace of Cups&quot;</span>, <span class="hljs-string">&quot;Two of Cups&quot;</span>, <span class="hljs-string">&quot;Three of Cups&quot;</span>, <span class="hljs-string">&quot;Four of Cups&quot;</span>, <span class="hljs-string">&quot;Five of Cups&quot;</span>, <span class="hljs-string">&quot;Six of Cups&quot;</span>, <span class="hljs-string">&quot;Seven of Cups&quot;</span>, <span class="hljs-string">&quot;Eight of Cups&quot;</span>, <span class="hljs-string">&quot;Nine of Cups&quot;</span>, <span class="hljs-string">&quot;Ten of Cups&quot;</span>, <span class="hljs-string">&quot;Page of Cups&quot;</span>, <span class="hljs-string">&quot;Knight of Cups&quot;</span>, <span class="hljs-string">&quot;Queen of Cups&quot;</span>, <span class="hljs-string">&quot;King of Cups&quot;</span>]<br>swords = [<span class="hljs-string">&quot;Ace of Swords&quot;</span>, <span class="hljs-string">&quot;Two of Swords&quot;</span>, <span class="hljs-string">&quot;Three of Swords&quot;</span>, <span class="hljs-string">&quot;Four of Swords&quot;</span>, <span class="hljs-string">&quot;Five of Swords&quot;</span>, <span class="hljs-string">&quot;Six of Swords&quot;</span>, <span class="hljs-string">&quot;Seven of Swords&quot;</span>, <span class="hljs-string">&quot;Eight of Swords&quot;</span>, <span class="hljs-string">&quot;Nine of Swords&quot;</span>, <span class="hljs-string">&quot;Ten of Swords&quot;</span>, <span class="hljs-string">&quot;Page of Swords&quot;</span>, <span class="hljs-string">&quot;Knight of Swords&quot;</span>, <span class="hljs-string">&quot;Queen of Swords&quot;</span>, <span class="hljs-string">&quot;King of Swords&quot;</span>]<br>pentacles = [<span class="hljs-string">&quot;Ace of Pentacles&quot;</span>, <span class="hljs-string">&quot;Two of Pentacles&quot;</span>, <span class="hljs-string">&quot;Three of Pentacles&quot;</span>, <span class="hljs-string">&quot;Four of Pentacles&quot;</span>, <span class="hljs-string">&quot;Five of Pentacles&quot;</span>, <span class="hljs-string">&quot;Six of Pentacles&quot;</span>, <span class="hljs-string">&quot;Seven of Pentacles&quot;</span>, <span class="hljs-string">&quot;Eight of Pentacles&quot;</span>, <span class="hljs-string">&quot;Nine of Pentacles&quot;</span>, <span class="hljs-string">&quot;Ten of Pentacles&quot;</span>, <span class="hljs-string">&quot;Page of Pentacles&quot;</span>, <span class="hljs-string">&quot;Knight of Pentacles&quot;</span>, <span class="hljs-string">&quot;Queen of Pentacles&quot;</span>, <span class="hljs-string">&quot;King of Pentacles&quot;</span>]<br>Minor_Arcana = wands + cups + swords + pentacles<br>tarot = Major_Arcana + Minor_Arcana<br>reversals = [<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>]<br><br>Value = []<br>cards = []<br>YOUR_initial_FATE = []<br><span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(YOUR_initial_FATE)&lt;<span class="hljs-number">5</span>:<br>    card = random.choice(tarot)<br>    <span class="hljs-keyword">if</span> card <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> cards:<br>        cards.append(card)<br>        <span class="hljs-keyword">if</span> card <span class="hljs-keyword">in</span> Major_Arcana:<br>            k = random.choice(reversals)<br>            Value.append(tarot.index(card)^k)<br>            <span class="hljs-keyword">if</span> k == -<span class="hljs-number">1</span>:<br>                YOUR_initial_FATE.append(<span class="hljs-string">&quot;re-&quot;</span>+card)<br>            <span class="hljs-keyword">else</span>:<br>                YOUR_initial_FATE.append(card)<br>        <span class="hljs-keyword">else</span>:<br>            Value.append(tarot.index(card))<br>            YOUR_initial_FATE.append(card)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">continue</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Oops!lets reverse 1T!&quot;</span>)<br><br>FLAG=(<span class="hljs-string">&quot;hgame&#123;&quot;</span>+<span class="hljs-string">&quot;&amp;&quot;</span>.join(YOUR_initial_FATE)+<span class="hljs-string">&quot;&#125;&quot;</span>).replace(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-string">&quot;_&quot;</span>)<br><br>YOUR_final_Value = Value<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Fortune_wheel</span>(<span class="hljs-params">FATE</span>):<br>    FATEd = [FATE[i]+FATE[(i+<span class="hljs-number">1</span>)%<span class="hljs-number">5</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(FATE))]<br>    <span class="hljs-keyword">return</span> FATEd<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">250</span>):<br>    YOUR_final_Value = Fortune_wheel(YOUR_final_Value)<br><span class="hljs-built_in">print</span>(YOUR_final_Value)<br>YOUR_final_FATE = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> YOUR_final_Value:<br>    YOUR_final_FATE.append(tarot[i%<span class="hljs-number">78</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Your destiny changed!\n&quot;</span>,<span class="hljs-string">&quot;,&quot;</span>.join(YOUR_final_FATE))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;oh,now you GET th3 GOOd lU&gt;k,^^&quot;</span>)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Oops!lets reverse 1T!</span><br><span class="hljs-string">[2532951952066291774890498369114195917240794704918210520571067085311474675019, 2532951952066291774890327666074100357898023013105443178881294700381509795270, 2532951952066291774890554459287276604903130315859258544173068376967072335730, 2532951952066291774890865328241532885391510162611534514014409174284299139015, 2532951952066291774890830662608134156017946376309989934175833913921142609334]</span><br><span class="hljs-string">Your destiny changed!</span><br><span class="hljs-string"> Eight of Cups,Ace of Cups,Strength,The Chariot,Five of Swords</span><br><span class="hljs-string">oh,now you GET th3 GOOd lU&gt;k,^^</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>题目要求还原出YOUR_initial_FATE，那么对YOUR_final_FATE进行250次Fortune_wheel的逆变换再取值即可<br>对于Fortune_wheel的逆变换<br>设<code>FATE=[a,b,c,d,e]</code><br>一次变换后<code>FATE1=[a+b,b+c,c+d,d+e,e+a]</code><br>那么<code>a=(FATE1[0]+FATE1[2]+FATE1[4]-FATE1[1]-FATE1[3])//2</code><br>官方wp中是设了5个未知数，对这5个未知数进行250次Fortune_wheel的变换，然后乘以系数矩阵的逆矩阵即可得到a,b,c,e,d<br>官方exp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs sage">R.&lt;a, b, c, d, e&gt; = PolynomialRing(QQ, 5)<br> def Fortune_wheel(FATE):<br> FATEd = [FATE[i]+FATE[(i+1)%5] for i in range(5)]<br> return FATEd<br> #<br>获取系数矩阵<br> <br>fate = [a,b,c,d,e]<br> for i in range(250):<br> fate = Fortune_wheel(fate)<br> v = vector(list(fate[0].dict().values()))#<br>得到系数向量<br> <br>C = matrix(5, 5, lambda i, j: v[(j - i) % 5])#<br>系数循环<br> <br>print(C.rank()==5)<br>#True<br><br>FATE=vector([2532951952066291774890498369114195917240794704918210520571067085311474675019, 2532951952066291774890327666074100357898023013105443178881294700381509795270, 2532951952066291774890554459287276604903130315859258544173068376967072335730, 2532951952066291774890865328241532885391510162611534514014409174284299139015, 2532951952066291774890830662608134156017946376309989934175833913921142609334])<br>E=[[0,0,0,0,0] for _ in range(5)]<br>for i in range(5):<br>    E[i][i]=1<br>real_FATE = [vector(E[i])*C.inverse()*FATE for i in range(5)]<br>print(real_FATE)<br>#[-19, -20, 20, -15, 41]<br><br>value=[-19, -20, 20, -15, 41]<br>#这里省略其他赋值<br>YOUR_final_FATE=[]<br>for i in value:<br>    if i&lt;0:<br>        YOUR_final_FATE.append(&#x27;re-&#x27;+tarot[i^(-1)])<br>    else:<br>        YOUR_final_FATE.append(tarot[i])<br>FLAG=(&quot;hgame&#123;&quot;+&quot;&amp;&quot;.join(YOUR_final_FATE)+&quot;&#125;&quot;).replace(&quot; &quot;,&quot;_&quot;)<br>print(FLAG)<br>#hgame&#123;re-The_Moon&amp;re-The_Sun&amp;Judgement&amp;re-Temperance&amp;Six_of_Cups&#125;<br></code></pre></td></tr></table></figure><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python">YOUR_final_Value=[<span class="hljs-number">2532951952066291774890498369114195917240794704918210520571067085311474675019</span>, <span class="hljs-number">2532951952066291774890327666074100357898023013105443178881294700381509795270</span>, <span class="hljs-number">2532951952066291774890554459287276604903130315859258544173068376967072335730</span>, <span class="hljs-number">2532951952066291774890865328241532885391510162611534514014409174284299139015</span>, <span class="hljs-number">2532951952066291774890830662608134156017946376309989934175833913921142609334</span>]<br><br>Major_Arcana = [<span class="hljs-string">&quot;The Fool&quot;</span>, <span class="hljs-string">&quot;The Magician&quot;</span>, <span class="hljs-string">&quot;The High Priestess&quot;</span>,<span class="hljs-string">&quot;The Empress&quot;</span>, <span class="hljs-string">&quot;The Emperor&quot;</span>, <span class="hljs-string">&quot;The Hierophant&quot;</span>,<span class="hljs-string">&quot;The Lovers&quot;</span>, <span class="hljs-string">&quot;The Chariot&quot;</span>, <span class="hljs-string">&quot;Strength&quot;</span>,<span class="hljs-string">&quot;The Hermit&quot;</span>, <span class="hljs-string">&quot;Wheel of Fortune&quot;</span>, <span class="hljs-string">&quot;Justice&quot;</span>,<span class="hljs-string">&quot;The Hanged Man&quot;</span>, <span class="hljs-string">&quot;Death&quot;</span>, <span class="hljs-string">&quot;Temperance&quot;</span>,<span class="hljs-string">&quot;The Devil&quot;</span>, <span class="hljs-string">&quot;The Tower&quot;</span>, <span class="hljs-string">&quot;The Star&quot;</span>,<span class="hljs-string">&quot;The Moon&quot;</span>, <span class="hljs-string">&quot;The Sun&quot;</span>, <span class="hljs-string">&quot;Judgement&quot;</span>,<span class="hljs-string">&quot;The World&quot;</span>]<br>wands = [<span class="hljs-string">&quot;Ace of Wands&quot;</span>, <span class="hljs-string">&quot;Two of Wands&quot;</span>, <span class="hljs-string">&quot;Three of Wands&quot;</span>, <span class="hljs-string">&quot;Four of Wands&quot;</span>, <span class="hljs-string">&quot;Five of Wands&quot;</span>, <span class="hljs-string">&quot;Six of Wands&quot;</span>, <span class="hljs-string">&quot;Seven of Wands&quot;</span>, <span class="hljs-string">&quot;Eight of Wands&quot;</span>, <span class="hljs-string">&quot;Nine of Wands&quot;</span>, <span class="hljs-string">&quot;Ten of Wands&quot;</span>, <span class="hljs-string">&quot;Page of Wands&quot;</span>, <span class="hljs-string">&quot;Knight of Wands&quot;</span>, <span class="hljs-string">&quot;Queen of Wands&quot;</span>, <span class="hljs-string">&quot;King of Wands&quot;</span>]<br>cups = [<span class="hljs-string">&quot;Ace of Cups&quot;</span>, <span class="hljs-string">&quot;Two of Cups&quot;</span>, <span class="hljs-string">&quot;Three of Cups&quot;</span>, <span class="hljs-string">&quot;Four of Cups&quot;</span>, <span class="hljs-string">&quot;Five of Cups&quot;</span>, <span class="hljs-string">&quot;Six of Cups&quot;</span>, <span class="hljs-string">&quot;Seven of Cups&quot;</span>, <span class="hljs-string">&quot;Eight of Cups&quot;</span>, <span class="hljs-string">&quot;Nine of Cups&quot;</span>, <span class="hljs-string">&quot;Ten of Cups&quot;</span>, <span class="hljs-string">&quot;Page of Cups&quot;</span>, <span class="hljs-string">&quot;Knight of Cups&quot;</span>, <span class="hljs-string">&quot;Queen of Cups&quot;</span>, <span class="hljs-string">&quot;King of Cups&quot;</span>]<br>swords = [<span class="hljs-string">&quot;Ace of Swords&quot;</span>, <span class="hljs-string">&quot;Two of Swords&quot;</span>, <span class="hljs-string">&quot;Three of Swords&quot;</span>, <span class="hljs-string">&quot;Four of Swords&quot;</span>, <span class="hljs-string">&quot;Five of Swords&quot;</span>, <span class="hljs-string">&quot;Six of Swords&quot;</span>, <span class="hljs-string">&quot;Seven of Swords&quot;</span>, <span class="hljs-string">&quot;Eight of Swords&quot;</span>, <span class="hljs-string">&quot;Nine of Swords&quot;</span>, <span class="hljs-string">&quot;Ten of Swords&quot;</span>, <span class="hljs-string">&quot;Page of Swords&quot;</span>, <span class="hljs-string">&quot;Knight of Swords&quot;</span>, <span class="hljs-string">&quot;Queen of Swords&quot;</span>, <span class="hljs-string">&quot;King of Swords&quot;</span>]<br>pentacles = [<span class="hljs-string">&quot;Ace of Pentacles&quot;</span>, <span class="hljs-string">&quot;Two of Pentacles&quot;</span>, <span class="hljs-string">&quot;Three of Pentacles&quot;</span>, <span class="hljs-string">&quot;Four of Pentacles&quot;</span>, <span class="hljs-string">&quot;Five of Pentacles&quot;</span>, <span class="hljs-string">&quot;Six of Pentacles&quot;</span>, <span class="hljs-string">&quot;Seven of Pentacles&quot;</span>, <span class="hljs-string">&quot;Eight of Pentacles&quot;</span>, <span class="hljs-string">&quot;Nine of Pentacles&quot;</span>, <span class="hljs-string">&quot;Ten of Pentacles&quot;</span>, <span class="hljs-string">&quot;Page of Pentacles&quot;</span>, <span class="hljs-string">&quot;Knight of Pentacles&quot;</span>, <span class="hljs-string">&quot;Queen of Pentacles&quot;</span>, <span class="hljs-string">&quot;King of Pentacles&quot;</span>]<br>Minor_Arcana = wands + cups + swords + pentacles<br>tarot = Major_Arcana + Minor_Arcana<br>reversals = [<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">de_Fortune_wheel</span>(<span class="hljs-params">FATE</span>):<br>    ol=[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)]<br>    a_2=FATE[<span class="hljs-number">0</span>]+FATE[<span class="hljs-number">2</span>]+FATE[<span class="hljs-number">4</span>]-FATE[<span class="hljs-number">1</span>]-FATE[<span class="hljs-number">3</span>]<br>    a=a_2//<span class="hljs-number">2</span><br>    ol[<span class="hljs-number">0</span>]=a<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>):<br>        ol[i]=FATE[i-<span class="hljs-number">1</span>]-ol[i-<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">return</span> ol<br>Value=YOUR_final_Value[:]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">250</span>):<br>    Value=de_Fortune_wheel(Value)<br><br>ini=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Value:<br>    <span class="hljs-keyword">if</span> i&lt;<span class="hljs-number">0</span>:<br>        i=i^-<span class="hljs-number">1</span><br>        ini+=[<span class="hljs-string">&#x27;re-&#x27;</span>+tarot[i]]<br>    <span class="hljs-keyword">else</span>:<br>        ini+=[tarot[i]]<br></code></pre></td></tr></table></figure><p>flag:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs flag">hgame&#123;re-The_Moon&amp;re-The_Sun&amp;Judgement&amp;re-Temperance&amp;Six_of_Cups&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>crypto</category>
      
      <category>hgame</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
      <tag>RSA</tag>
      
      <tag>misc</tag>
      
      <tag>web</tag>
      
      <tag>reverse</tag>
      
      <tag>格密码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>crypto的小池塘</title>
    <link href="/2025/02/01/crypto%E7%9A%84%E5%B0%8F%E6%B1%A0%E5%A1%98/"/>
    <url>/2025/02/01/crypto%E7%9A%84%E5%B0%8F%E6%B1%A0%E5%A1%98/</url>
    
    <content type="html"><![CDATA[<h1 id="crypto的小池塘"><a href="#crypto的小池塘" class="headerlink" title="crypto的小池塘"></a>crypto的小池塘</h1><p>是 <strong>crypto的小池塘</strong> 哒！</p><p>crypto内容持续更新中！</p><h2 id="古典密码和其他"><a href="#古典密码和其他" class="headerlink" title="古典密码和其他"></a>古典密码和其他</h2><h3 id="凯撒密码"><a href="#凯撒密码" class="headerlink" title="凯撒密码"></a>凯撒密码</h3><p>凯撒密码有一个变种，即偏移量在原来的基础上会逐渐递增或递减，如：</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-variable">_dX</span>]pZT]VOUZNSh<br></code></pre></td></tr></table></figure><p>根据flag的开头猜出第一个字母的偏移量然后再解即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">c=<span class="hljs-string">&#x27;_dX]pZT]VOUZNSh&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>,<span class="hljs-number">7</span>+<span class="hljs-built_in">len</span>(c)):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(c[i-<span class="hljs-number">7</span>])+i),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-comment">#flag&#123;fake_flag&#125;</span><br></code></pre></td></tr></table></figure><h3 id="rot密码"><a href="#rot密码" class="headerlink" title="rot密码"></a>rot密码</h3><p>跟凯撒差不多，但rot会对数字、字母和符号采用不同的偏移量</p><h3 id="维吉尼亚"><a href="#维吉尼亚" class="headerlink" title="维吉尼亚"></a>维吉尼亚</h3><p>这种一般都会有大段的英文组成，解出来后会有一段英文，在里面找到flag即可<sub>偶尔看看这些英文文章或许不错？</sub><br>网站一把梭<br><a href="https://www.guballa.de/vigenere-solver">维吉尼亚</a><br><a href="https://quipqiup.com/">字频分析</a></p><h3 id="栅栏密码"><a href="#栅栏密码" class="headerlink" title="栅栏密码"></a>栅栏密码</h3><p>有普通的栅栏密码和W型栅栏密码，以及其他的，但目前只遇到这两个<br>一般来说比较明显，可以一眼看出是打乱了顺序的flag<br>直接工具一把梭就好</p><h3 id="burros-wheeler变换"><a href="#burros-wheeler变换" class="headerlink" title="burros wheeler变换"></a>burros wheeler变换</h3><p>和栅栏密码有点类似<br>网站一把梭<br><a href="https://www.dcode.fr/burrows-wheeler-transform#">burros wheeler变换</a></p><h3 id="base家族"><a href="#base家族" class="headerlink" title="base家族"></a>base家族</h3><p>生活习性一般为群居，有较少的个体会单独出现<br>工具一把梭</p><h3 id="rabbit加密"><a href="#rabbit加密" class="headerlink" title="rabbit加密"></a>rabbit加密</h3><p>和base64有点像，但不是<br>特点就是rabbit加密的密文开头一定是U2FsdGVkX1</p><h3 id="摩斯密码"><a href="#摩斯密码" class="headerlink" title="摩斯密码"></a>摩斯密码</h3><p>无需多盐<br>有的时候可以考虑取倒序再解</p><h3 id="各种奇怪的编码"><a href="#各种奇怪的编码" class="headerlink" title="各种奇怪的编码"></a>各种奇怪的编码</h3><p>一般会给提示，把提示里的名词&#x2F;名词的英文+“加密”然后去网上搜搜看有没有<br>稍微整合一下遇到过的<br>1.unicode(开头带\u的)<br>2.hill密码<br>3.云影密码<br>4.阴阳怪气密码<br>5.Ook密码(只会出现.!?)<br>6….</p><h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2><h3 id="N比较小"><a href="#N比较小" class="headerlink" title="N比较小"></a>N比较小</h3><p>yafu分解或者<a href="http://www.factordb.com/index.php">factordb</a>上去查</p><h3 id="p-q比较接近"><a href="#p-q比较接近" class="headerlink" title="p,q比较接近"></a>p,q比较接近</h3><p>yafu分解<br>如果q是p的下一个素数可以直接开根然后取下一个素数<br>如果没那么接近可以尝试费马分解</p><h3 id="已知p的高位-或低位"><a href="#已知p的高位-或低位" class="headerlink" title="已知p的高位(或低位)"></a>已知p的高位(或低位)</h3><p>需要知道p一半多一点的位<br>然后可以使用coppersmith来求出未知的部分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>p=getPrime(<span class="hljs-number">512</span>)<br>q=getPrime(<span class="hljs-number">512</span>)<br>n=p*q<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;n=&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;p=&#x27;</span>,p&gt;&gt;<span class="hljs-number">200</span>)<br><span class="hljs-comment">#n=112504979083712229531952757191194732828499706371472784719813972405778703417247176790237513106376618450306935577929225321894114864615650356115078192433412933614500196557250554235973290182450168320807821949691618499503517524567476630509814549179909620880384733611969002850838245795773226688747995514766739694723</span><br><span class="hljs-comment">#p= 6523821383236155809139380148039921541898396152483777060219989822945258930310576045651663651099</span><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sage">n=112504979083712229531952757191194732828499706371472784719813972405778703417247176790237513106376618450306935577929225321894114864615650356115078192433412933614500196557250554235973290182450168320807821949691618499503517524567476630509814549179909620880384733611969002850838245795773226688747995514766739694723<br>p= 6523821383236155809139380148039921541898396152483777060219989822945258930310576045651663651099<br>p=p&lt;&lt;200<br><br>R.&lt;x&gt;=PolynomialRing(Zmod(n))<br>f=p+x<br>roots=f.small_roots(X=2^200,beta=0.4)<br>print(roots)<br>#[1021435571904691551547239506034919073476937520743412292671445]<br>p=p+roots[0]<br></code></pre></td></tr></table></figure><p>已知低位也是一样的<br>需要注意一下这时方程x的系数不是1，所以要再加一句<code>f=f.monic()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>p=getPrime(<span class="hljs-number">512</span>)<br>q=getPrime(<span class="hljs-number">512</span>)<br>n=p*q<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;n=&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;p=&#x27;</span>,p%<span class="hljs-number">2</span>**<span class="hljs-number">312</span>)<br><span class="hljs-comment">#n=89820736169682478448552519628218400705135210973260509778007045831883668969527110280533187547246617801981864105163972853781185965361518351893786764486150702831984065217897337271844754064100947812093154222574318035632483431419851762377108959021951925201490503252582574906016560633323642437493362618007712135887</span><br><span class="hljs-comment">#p= 5503879275028571598277317489624851891721566574579555947545006824124736548319357887871362651269</span><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sage">n=89820736169682478448552519628218400705135210973260509778007045831883668969527110280533187547246617801981864105163972853781185965361518351893786764486150702831984065217897337271844754064100947812093154222574318035632483431419851762377108959021951925201490503252582574906016560633323642437493362618007712135887<br>p= 5503879275028571598277317489624851891721566574579555947545006824124736548319357887871362651269<br><br>R.&lt;x&gt;=PolynomialRing(Zmod(n))<br>f=p+x*2**312<br>f=f.monic()<br>roots=f.small_roots(X=2^200,beta=0.4)<br>print(roots)<br>#[1005017440926667857292176627451616359396335830870171531975062]<br></code></pre></td></tr></table></figure><p>如果已知p的低位，那么q的低位也可以求出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">x=<span class="hljs-number">100</span><br>px=p%<span class="hljs-number">2</span>**x<br>qx=q%<span class="hljs-number">2</span>**x<br>nx=n%<span class="hljs-number">2</span>**x<br>px*qx%<span class="hljs-number">2</span>**x==nx<br><span class="hljs-comment">#True</span><br></code></pre></td></tr></table></figure><p>只需要在2^x上求出px的逆元然后乘nx即可<br>可以在已知q的高位，p的低位的时候用然后求出q</p><p>另外在别的地方看到了应该是coppersmith的具体实现，所以记录一下，平常用sagemath里自带的small_roots即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> subprocess <span class="hljs-keyword">import</span> check_output<br><span class="hljs-keyword">from</span> re <span class="hljs-keyword">import</span> findall<br><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">flatter</span>(<span class="hljs-params">M</span>):  <span class="hljs-comment"># flatter</span><br>    z = <span class="hljs-string">&quot;[[&quot;</span> + <span class="hljs-string">&quot;]\n[&quot;</span>.join(<span class="hljs-string">&quot; &quot;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>, row)) <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> M) + <span class="hljs-string">&quot;]]&quot;</span><br>    ret = check_output([<span class="hljs-string">&quot;flatter&quot;</span>], <span class="hljs-built_in">input</span>=z.encode())<br>    <span class="hljs-keyword">return</span> matrix(M.nrows(), M.ncols(), <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, findall(<span class="hljs-string">b&quot;-?\\d+&quot;</span>, ret)))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">matrix_overview</span>(<span class="hljs-params">BB</span>):  <span class="hljs-comment"># see the shape of matrix</span><br>    <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(BB.dimensions()[<span class="hljs-number">0</span>]):<br>        a = (<span class="hljs-string">&#x27;%02d &#x27;</span> % ii)<br>        <span class="hljs-keyword">for</span> jj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(BB.dimensions()[<span class="hljs-number">1</span>]):<br>            a += <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">if</span> BB[ii, jj] == <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;X&#x27;</span><br>            <span class="hljs-keyword">if</span> BB.dimensions()[<span class="hljs-number">0</span>] &lt; <span class="hljs-number">60</span>:<br>                a += <span class="hljs-string">&#x27; &#x27;</span><br>        <span class="hljs-built_in">print</span>(a)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Small_Roots_Univariate</span>(<span class="hljs-params">f, X=<span class="hljs-literal">None</span>, beta=<span class="hljs-number">1.0</span>, epsilon=<span class="hljs-literal">None</span></span>):  <span class="hljs-comment"># 多项式f,X,beta,epsilon</span><br><br>    delta = f.degree()  <span class="hljs-comment"># 度delta</span><br>    N = f.parent().characteristic()  <span class="hljs-comment"># 模数N</span><br>    PR = PolynomialRing(ZZ, <span class="hljs-string">&#x27;x&#x27;</span>)<br>    x = PR.gen()<br><br>    Zm = f.base_ring()  <span class="hljs-comment"># Zmod(N)</span><br>    f = f.change_ring(ZZ)  <span class="hljs-comment"># ZZ下f(x)</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> f.is_monic():  <span class="hljs-comment"># 首一</span><br>        f = f.monic()  <span class="hljs-comment"># f = f * f[delta].inverse_mod(N)</span><br><br>    m = ceil(<span class="hljs-built_in">max</span>(beta * beta / (delta * epsilon), <span class="hljs-number">7</span> * beta / delta))  <span class="hljs-comment"># m</span><br>    t = floor(delta * m * (<span class="hljs-number">1</span> / beta - <span class="hljs-number">1</span>))  <span class="hljs-comment"># t</span><br>    <span class="hljs-comment">#print(&#x27;m=&#123;&#125;, t=&#123;&#125;&#x27;.format(m, t))</span><br><br>    f_ij = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(delta):<br>            f_ij.append(x ** j * N ** (m - i) * f ** i)  <span class="hljs-comment"># shift g_ij(x)</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(t):<br>        f_ij.append(x ** i * f ** m)  <span class="hljs-comment"># shift h_i(x)</span><br><br>    monomials = []<br>    <span class="hljs-keyword">for</span> g <span class="hljs-keyword">in</span> f_ij:<br>        monomials += g.monomials()  <span class="hljs-comment"># 统计所有出现的单项 x^i</span><br>    monomials = <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">set</span>(monomials))  <span class="hljs-comment"># 去重并排序</span><br><br>    M = Matrix(ZZ, <span class="hljs-built_in">len</span>(f_ij), <span class="hljs-built_in">len</span>(monomials))  <span class="hljs-comment"># 行数为多项式个数，列数为所有单项可能个数</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(M.nrows()):<br>        <span class="hljs-keyword">for</span> j, monomial <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(monomials):<br>            M[i, j] = f_ij[i].monomial_coefficient(monomial) * monomial.subs(x=X)  <span class="hljs-comment"># g_ij(xX)和h_i(xX)</span><br>    <span class="hljs-comment">#matrix_overview(M)  # see</span><br>    <span class="hljs-keyword">assert</span> M.nrows() == M.ncols()  <span class="hljs-comment"># 方阵 nrows()=ncols()</span><br>    B = flatter(M)  <span class="hljs-comment"># flater加速</span><br>    <span class="hljs-comment">#print(&#x27;end LLL&#x27;)</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(M.nrows()):  <span class="hljs-comment"># 得到f(xX)，构建f(x)，求根检验</span><br>        Cx = <span class="hljs-built_in">sum</span>(ZZ(B[j, i] // monomials[i](X)) * monomials[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(M.ncols()))  <span class="hljs-comment"># construct polynomial,</span><br>        R = Cx.roots()  <span class="hljs-comment"># get roots</span><br>        roots = [Zm(r[<span class="hljs-number">0</span>]) <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> R <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>(r[<span class="hljs-number">0</span>]) &lt;= X]  <span class="hljs-comment"># check x0&lt;=X</span><br>        roots = [r <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> roots <span class="hljs-keyword">if</span> gcd(N, ZZ(f(r))) &gt;= ZZ(floor(N ** beta))]  <span class="hljs-comment"># check gcd(f(x_0),N)&gt;N^beta</span><br>        <span class="hljs-keyword">if</span> roots:<br>            <span class="hljs-keyword">return</span> roots  <span class="hljs-comment"># 返回root</span><br></code></pre></td></tr></table></figure><h2 id="椭圆曲线"><a href="#椭圆曲线" class="headerlink" title="椭圆曲线"></a>椭圆曲线</h2><h2 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h2><p>to be continue…</p>]]></content>
    
    
    <categories>
      
      <category>crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024浙江省赛</title>
    <link href="/2025/02/01/2024%E6%B5%99%E6%B1%9F%E7%9C%81%E8%B5%9B/"/>
    <url>/2025/02/01/2024%E6%B5%99%E6%B1%9F%E7%9C%81%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="2024浙江省赛"><a href="#2024浙江省赛" class="headerlink" title="2024浙江省赛"></a>2024浙江省赛</h1><p>是 <strong>2024浙江省赛</strong> 哒！</p><h2 id="myez-encode"><a href="#myez-encode" class="headerlink" title="myez_encode"></a>myez_encode</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> bytes_to_long, getPrime<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> isprime<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_ecc_parameters</span>():<br>    x = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">512</span>)<br>    y = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">512</span>)<br>    <span class="hljs-keyword">return</span> x, y<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_prime_on_curve</span>(<span class="hljs-params">x, y, a, b, ecc_p</span>):<br>    p = x<br>    q = y<br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> (isprime(p) <span class="hljs-keyword">and</span> isprime(q)):<br>        p = random.randint(<span class="hljs-number">2</span>, ecc_p - <span class="hljs-number">1</span>)<br>        q = (p**<span class="hljs-number">3</span> + a * p + b) % ecc_p<br>    <span class="hljs-keyword">return</span> p, q<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_rsa_parameters</span>():<br>    a = getPrime(<span class="hljs-number">512</span>) <br>    b = getPrime(<span class="hljs-number">512</span>)   <br>    ecc_p = getPrime(<span class="hljs-number">512</span>)  <br>    x, y = generate_ecc_parameters()<br>    p, q = find_prime_on_curve(x, y, a, b, ecc_p)<br>    n = p * q<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;p= <span class="hljs-subst">&#123;p&#125;</span>\nq= <span class="hljs-subst">&#123;q&#125;</span>\nn= <span class="hljs-subst">&#123;n&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;a= <span class="hljs-subst">&#123;a&#125;</span>\nb= <span class="hljs-subst">&#123;b&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;P= <span class="hljs-subst">&#123;ecc_p&#125;</span>&quot;</span>)<br>    <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    generate_rsa_parameters()<br><br>n = p*q<br>e = <span class="hljs-number">9</span><br>m = bytes_to_long(flag)<br>c = <span class="hljs-built_in">pow</span>(m,e,n)<br><span class="hljs-built_in">print</span>(c)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n= 23298836191712395990541254600776262066247692725919114528027158820049802443474994576179738462067629079873633948850637889127452791527914591229415148712172587856497614285410824614070907847594399218298016379507879066220104597707859246179921731928508884947347652904142879813069359815823184922170241099916465722623</span><br><span class="hljs-string">a= 7388665644223916915334064243181348811184637180763467245762518813757790945069068654378380490110607063038613823004593920489924786053478102905200169738195523</span><br><span class="hljs-string">b= 11742940161647091720180482697980016011774828087234021441133595442949631197989696508358388255191793888646498553804646435609849154496274569000398776043150743</span><br><span class="hljs-string">P= 11300086101709077144191286182913849072593185125745291892398153828719453495325025227858328617077648296782357912556752467026523366682963139253552060862229027</span><br><span class="hljs-string">c= 9314530945343661153059846131608414257092556390479105017633636336832925597262814680689800448223193301814365726128618348603188219757245073917910487794768758461683644600756896595336654006282030911824869219015400826589122838492456940861634378619000373353637666835642505021355710338342048772713981673863167110471</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>给出了q &#x3D; (p*<em>3 + a * p + b) % ecc_p，n&#x3D;p</em>q<br>设p&#x3D;x，构建ecc_p上的方程解出p</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sage">n= 23298836191712395990541254600776262066247692725919114528027158820049802443474994576179738462067629079873633948850637889127452791527914591229415148712172587856497614285410824614070907847594399218298016379507879066220104597707859246179921731928508884947347652904142879813069359815823184922170241099916465722623<br>a= 7388665644223916915334064243181348811184637180763467245762518813757790945069068654378380490110607063038613823004593920489924786053478102905200169738195523<br>b= 11742940161647091720180482697980016011774828087234021441133595442949631197989696508358388255191793888646498553804646435609849154496274569000398776043150743<br>P= 11300086101709077144191286182913849072593185125745291892398153828719453495325025227858328617077648296782357912556752467026523366682963139253552060862229027<br><br>R=Zmod(P)[&#x27;x&#x27;]<br>x=R.gen()<br>f=(x**3 + a * x + b)*x-n<br>roots=f.roots()<br>print(roots)<br></code></pre></td></tr></table></figure><blockquote><p>[(2925490712948356009205547798331037409204468852265154197929696123102317330847028997592576845375767951888373634075473448002921250636926630905567362014595493, 1)]</p></blockquote><p>因为<code>GCD(e,(p-1))</code>是3，而<code>GCD(e,(q-1))</code>是1，所以转换到mod q上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>p=<span class="hljs-number">2925490712948356009205547798331037409204468852265154197929696123102317330847028997592576845375767951888373634075473448002921250636926630905567362014595493</span><br>q=<span class="hljs-number">7964077988212602731598828926489143570796450850963162530397620970577507270219530635660167912693046701894468774510746807002256765035407708129322533385075411</span><br>e=<span class="hljs-number">9</span><br>d=<span class="hljs-built_in">pow</span>(e,-<span class="hljs-number">1</span>,q-<span class="hljs-number">1</span>)<br>plain=<span class="hljs-built_in">pow</span>(c,d,q)<br><span class="hljs-built_in">print</span>(long_to_bytes(plain))<br></code></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">DASCTF</span><span class="hljs-template-variable">&#123;Very_easy_3NC0dE_Is_1t&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/2025/02/01/2024%E6%B5%99%E6%B1%9F%E7%9C%81%E8%B5%9B/1.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>crypto</category>
      
      <category>DASCTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
      <tag>DASCTF</tag>
      
      <tag>RSA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2025.1.18 DASCTF</title>
    <link href="/2025/01/22/2025.1.18DASCTF/"/>
    <url>/2025/01/22/2025.1.18DASCTF/</url>
    
    <content type="html"><![CDATA[<h1 id="2025-1-18西湖论剑"><a href="#2025-1-18西湖论剑" class="headerlink" title="2025.1.18西湖论剑"></a>2025.1.18西湖论剑</h1><p>是 <strong>2025.1.18西湖论剑</strong> 哒！</p><h2 id="matrixRSA"><a href="#matrixRSA" class="headerlink" title="matrixRSA"></a>matrixRSA</h2><p>先看题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br>ext_len = <span class="hljs-number">9</span>*<span class="hljs-number">23</span> - <span class="hljs-built_in">len</span>(flag)<br>flag += <span class="hljs-string">&#x27;&#x27;</span>.join(random.choice(string.printable) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ext_len))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_rsa_encrypt</span>():<br>    p = getPrime(<span class="hljs-number">512</span>)<br>    q = getPrime(<span class="hljs-number">512</span>)<br>    n = p * q<br>    data = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>        data.append(bytes_to_long(flag[<span class="hljs-number">23</span>*i:<span class="hljs-number">23</span>*(i+<span class="hljs-number">1</span>)].encode()))<br>    M = Matrix(Zmod(n), [data[i:i+<span class="hljs-number">3</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(data), <span class="hljs-number">3</span>)])<br>    e = <span class="hljs-number">65537</span><br>    C = M**e<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p =&quot;</span>, p &gt;&gt; <span class="hljs-number">100</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n =&quot;</span>, n)<br>    <span class="hljs-keyword">return</span> C<br>C = my_rsa_encrypt()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;C =&quot;</span>, C)<br></code></pre></td></tr></table></figure><p>题目将矩阵用RSA的方式进行了加密<br>然后给出了p的高412位,n,和C</p><p>直接上coppersmith即可解出p</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sage">p=9707529668721508094878754383636813058761407528950189013789315732447048631740849315894253576415843631107370002912949379757275<br>n=132298777672085547096511087266255066285502135020124093900452138262993155381766816424955849796168059204379325075568094431259877923353664926875986223020472585645919414821322880213299188157427622804140996898685564075484754918339670099806186873974594139182324884620018780943630196754736972805036038798946726414009<br>p=p&lt;&lt;100<br>bit=100<br>R.&lt;x&gt;=PolynomialRing(Zmod(n))<br>f=p+x<br>f=f.monic()<br>roots=f.small_roots(X=2^bit,beta=0.4,epsilon=0.01)<br>print(roots)<br></code></pre></td></tr></table></figure><blockquote><p>[386875690473242360543194849663]</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">p=<span class="hljs-number">12305755811288164655681709252717258015229295989302934566212712319314835335461946241491177972870130171728224502716603340551354171940107285908105124549960063</span><br>q=<span class="hljs-number">10750967246621849802090386055921679114516122704252330881722100331526757637044067492444912824266860574267360247681890637480406758188129451052986858429875143</span><br></code></pre></td></tr></table></figure><p>刚开始先试试phi&#x3D;(p-1)*(q-1)<br>按正常RSA来解发现结果不对<br>上网搜索（搜索引擎yyds）<br>发现这道题其实是论文复现<br>基本是原题了，<a href="https://latallvia-d.github.io/2024/07/02/%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0%EF%BC%9AA%20Matrix%20Extension%20of%20the%20RSA%20Cryptosystem/">这是原文</a> <del>他博客主题怎么跟我一样（小声）</del></p><p><img src="/2025/01/22/2025.1.18DASCTF/1.png"><br>那么把phi用(p**2-1)*(p**2-p)*(q**2-1)*(q**2-q)代掉即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>C = [[<span class="hljs-number">130700952989014311434434028098810412089294728270156705618326733322297465714495704072159530618655340096705383710304658044991149662060657745933090473082775425812641300964472543605460360640675949447837208449794830578184968528547366608180085787382376536622136035364815331037493098283462540849880674541138443271941</span>,<span class="hljs-number">71108771421281691064141020659106224750236412635914570166893031318860027728093402453305986361330527563506168063047627979831630830003190075818824767924892107148560048725155587353683119195901991465464478196049173060097561821877061015587704803006499153902855903286456023726638247758665778434728734461065079337757</span>,<span class="hljs-number">67999998657112350704927993584783146575182096185020115836188544590466205688442741039622382576899587857972463337900200038021257164640987281308471100297698062626107380871262596623736773815445544153508352926374272336154553916204320257697068627063236060520725376727528604938949588845448940836430120015498687885615</span>],<br>[ <span class="hljs-number">23893343854815011808020457237095285782125931083991537368666368653089096539223297567339111502968295914745423286070638369517207554770793304994639155083818859208362057394004419565231389473766857235749279110546079776040193183912062870294579472815588333047561915280189529367474392709554971446978468118280633281993</span>,<span class="hljs-number">9711323829269829751519177755915164402658693668631868499383945203627197171508441332211907278473276713066275283973856513580205808517918096017699122954464305556795300874005627001464297760413897074044080665941802588680926430030715299713241442313300920463145903399054123967914968894345491958980945927764454159601</span>,<span class="hljs-number">44904507975955275578858125671789564568591470104141872573541481508697254621798834910263012676346204850278744732796211742615531019931085695420000582627144871996018850098958417750918177991375489106531511894991744745328626887250694950153424439172667977623425955725695498585224383607063387876414273539268016177401</span>],<br>[ <span class="hljs-number">67805732998935098446255672500407441801838056284635701147853683333480924477835278030145327818330916280792499177503535618310624546400536573924729837478349680007368781306805363621196573313903080315513952415535369016620873765493531188596985587834408434835281527678166509365418905214174034794683785063802543354572</span>,<span class="hljs-number">13486048723056269216825615499052563411132892702727634833280269923882908676944418624902325737619945647093190397919828623788245644333036340084254490542292357044974139884304715033710988658109160936809398722070125690919829906642273377982021120160702344103998315875166038849942426382506293976662337161520494820727</span>,<span class="hljs-number">95932690738697024519546289135992512776877884741458439242887603021792409575448192508456813215486904392440772808083658410285088451086298418303987628634150431725794904656250453314950126433260613949819432633322599879072805834951478466009343397728711205498602927752917834774516505262381463414617797291857077444676</span>]]<br><br>n=<span class="hljs-number">132298777672085547096511087266255066285502135020124093900452138262993155381766816424955849796168059204379325075568094431259877923353664926875986223020472585645919414821322880213299188157427622804140996898685564075484754918339670099806186873974594139182324884620018780943630196754736972805036038798946726414009</span><br>p=<span class="hljs-number">12305755811288164655681709252717258015229295989302934566212712319314835335461946241491177972870130171728224502716603340551354171940107285908105124549960063</span><br>q=<span class="hljs-number">10750967246621849802090386055921679114516122704252330881722100331526757637044067492444912824266860574267360247681890637480406758188129451052986858429875143</span><br>e=<span class="hljs-number">65537</span><br>phi=(p**<span class="hljs-number">2</span>-<span class="hljs-number">1</span>)*(p**<span class="hljs-number">2</span>-p)*(q**<span class="hljs-number">2</span>-<span class="hljs-number">1</span>)*(q**<span class="hljs-number">2</span>-q)<br>d=inverse(e,phi)<br>B=Matrix(Zmod(n),C)<br>B=B**d<br>flag=<span class="hljs-string">b&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        flag+=long_to_bytes(<span class="hljs-built_in">int</span>(B[i][j]))<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>最后得出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">b&#x27;DASCTF&#123;48ccbfd88061d7ff3d5325148ec55d11&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="已悟"><a href="#已悟" class="headerlink" title="已悟"></a>已悟</h2><p>题目给了两个py文件</p><p>task:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> line_profiler <span class="hljs-keyword">import</span> LineProfiler<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> get_key<br><span class="hljs-keyword">from</span> license <span class="hljs-keyword">import</span> RicKV<br><span class="hljs-keyword">import</span> os<br><br>flag = os.getenv(<span class="hljs-string">&#x27;DASFLAG&#x27;</span>)<br>smoke_key = get_key() <span class="hljs-comment"># the key just printable, this function is to make all users key different</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">password</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(password) != <span class="hljs-built_in">len</span>(smoke_key):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(password)):<br>        <span class="hljs-keyword">if</span> password[i] != smoke_key[i]:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_password</span>(<span class="hljs-params">user_input,pro=<span class="hljs-literal">False</span></span>):<br>    profiler = LineProfiler()<br>    profiler.add_function(login)<br>    profiler.enable_by_count()<br>    is_valid = login(user_input)<br>    profiler.disable_by_count()<br>    x = profiler.get_stats().timings<br>    hacker,hacker_pro = [],[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> x:<br>         <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> x[i]:<br>              hacker.append((j[<span class="hljs-number">0</span>],j[-<span class="hljs-number">1</span>]))<br>              hacker_pro.append(j)<br>    <span class="hljs-built_in">print</span>(hacker)<br>    <span class="hljs-keyword">return</span> is_valid, hacker_pro <span class="hljs-keyword">if</span> pro <span class="hljs-keyword">else</span> hacker<br><br>banner = <span class="hljs-string">&quot;🏞️ ⚔️ 2️⃣ 0️⃣ 2️⃣ 5️⃣ 👋 😊&quot;</span><br><br>MEUN = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1️⃣ ✨ 🔑 🚩</span><br><span class="hljs-string">2️⃣ ✨ 🛍️ ⚡️💨5️⃣</span><br><span class="hljs-string">3️⃣ ✨ ➡️ 🍐🍬</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-built_in">print</span>(banner)<br>    pro = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-built_in">print</span>(MEUN)<br>            choice = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt; &quot;</span>)[<span class="hljs-number">0</span>])<br>            <span class="hljs-keyword">if</span> choice == <span class="hljs-number">3</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;🏔️🐑❄️🐆🦦🦊🐹👩🏔️&quot;</span>)<br>                exit(<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">elif</span> choice == <span class="hljs-number">1</span>:<br>                 password = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;🔑 &gt; &quot;</span>).strip()<br>                 success,X = check_password(password,pro)<br>                 <span class="hljs-keyword">if</span> success:<br>                      <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;1️⃣ ❗5️⃣ ❗👴💨⚡️💨5️⃣&quot;</span>)<br>                      <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;🚩 <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>                      exit(<span class="hljs-number">0</span>)<br>                 <span class="hljs-keyword">else</span>:<br>                      <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;🤔 💨 <span class="hljs-subst">&#123;X&#125;</span> 💨&quot;</span>)<br>            <span class="hljs-keyword">elif</span> choice == <span class="hljs-number">2</span>:<br>                 <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">                 怎么获取秘钥？</span><br><span class="hljs-string"></span><br><span class="hljs-string">                 您可以使用 CTF 的一把梭工具,或者给我一支锐克。</span><br><span class="hljs-string">                 Maybe you noob ctfer can go to xianyu or ask friend for help.</span><br><span class="hljs-string">                 ざっこの方は、xianyu に行くか、友達に助けを求めるといいかもしれません。ざっこ！ざっこ！🤭🤭🤭</span><br><span class="hljs-string">                 མདོག་འདོད་འདི་ CTF གནོད་པའི་ལག་ཆོད་ལས་ ཧིན་ཨིའུ་ཡིན་ལུང་ འོག་ལུ་ལོངས་སྐད་ཁུངས་ལུ་འཛུལ་བ་འདི་འདོད་མི་འབད་ཡོད་མི་འདུག་。</span><br><span class="hljs-string"></span><br><span class="hljs-string">                 &quot;&quot;&quot;</span><br>                 license_key = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;🔑 &gt; &quot;</span>).strip()<br>                 license = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;📜 &gt; &quot;</span>).strip()<br>                 rick = RicKV(license_key)<br>                 <span class="hljs-keyword">if</span> rick.check(license):<br>                      pro = <span class="hljs-literal">True</span><br>                 <span class="hljs-keyword">else</span>:<br>                      <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;👵🏻👵🏻🤰👶&quot;</span>)<br></code></pre></td></tr></table></figure><p>license:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> hashlib<br><br>Xor= <span class="hljs-keyword">lambda</span> v: reduce(<span class="hljs-keyword">lambda</span> res, x: res ^ x, v, <span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RicKV</span>:<br>    <span class="hljs-built_in">round</span> = <span class="hljs-number">15</span><br>    S1 = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<br>    S2 = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, key</span>):<br>        key = hashlib.sha256(<span class="hljs-built_in">str</span>(key).encode(<span class="hljs-string">&quot;utf-8&quot;</span>)).digest()<br>        random.seed(key)<br>        <span class="hljs-variable language_">self</span>.roundkey = <span class="hljs-built_in">int</span>(key.<span class="hljs-built_in">hex</span>(), <span class="hljs-number">16</span>)<br>        <span class="hljs-variable language_">self</span>.subkeys = [<br>            [<br>                ((<span class="hljs-built_in">int</span>(<span class="hljs-built_in">bin</span>(<span class="hljs-variable language_">self</span>.roundkey)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">16</span> * (<span class="hljs-variable language_">self</span>.<span class="hljs-built_in">round</span>+ <span class="hljs-number">1</span>))[<span class="hljs-number">16</span> * j + i]) &amp; <span class="hljs-number">1</span>) - <span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xf</span><br>                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)<br>            ]<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-variable language_">self</span>.<span class="hljs-built_in">round</span> + <span class="hljs-number">1</span>)<br>        ]<br>        random.shuffle(<span class="hljs-variable language_">self</span>.S1)<br>        random.shuffle(<span class="hljs-variable language_">self</span>.S2)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add_round</span>(<span class="hljs-params">self, s, k</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>                s[i*<span class="hljs-number">4</span>+j] ^= k[i]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sub</span>(<span class="hljs-params">self,s</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>            index = <span class="hljs-variable language_">self</span>.S2[i]  <br>            temp = s[index]     <br>            s[i] = <span class="hljs-variable language_">self</span>.S1[temp]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">mix_1</span>(<span class="hljs-params">self,s,r</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>            s[i] = s[i] ^ <span class="hljs-variable language_">self</span>.subkeys[i][r]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">mix_2</span>(<span class="hljs-params">self,s,x</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">16</span>,<span class="hljs-number">4</span>):<br>            x[i//<span class="hljs-number">4</span>] = Xor(s[i:i + <span class="hljs-number">4</span>])<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">flip</span>(<span class="hljs-params">self, plaintext</span>):<br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(plaintext) == <span class="hljs-number">8</span><br>        S = [<span class="hljs-built_in">int</span>(_, <span class="hljs-number">16</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>(plaintext.<span class="hljs-built_in">hex</span>())]<br>        X = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)]<br>        <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-variable language_">self</span>.<span class="hljs-built_in">round</span>):<br>            <span class="hljs-variable language_">self</span>.mix_1(S,r)<br>            <span class="hljs-variable language_">self</span>.sub(S)<br>            <span class="hljs-variable language_">self</span>.mix_2(S,X)<br>            <span class="hljs-variable language_">self</span>.add_round(S,X)<br><br>        S = [S[i] ^ <span class="hljs-variable language_">self</span>.subkeys[<span class="hljs-variable language_">self</span>.<span class="hljs-built_in">round</span>][i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-string">&quot;&#123;:x&#125;&quot;</span>.<span class="hljs-built_in">format</span>(_) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> S))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">self,liscense</span>):<br>        liscense= base64.b64decode(liscense)<br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(liscense) % <span class="hljs-number">8</span> == <span class="hljs-number">0</span><br>        l = <span class="hljs-string">b&quot;\x00&quot;</span> * <span class="hljs-number">8</span>  <br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(liscense),<span class="hljs-number">8</span>):<br>            l = <span class="hljs-built_in">bytes</span>(d^j <span class="hljs-keyword">for</span> d,j <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(l,liscense[i:i+<span class="hljs-number">8</span>]))<br>            l = <span class="hljs-variable language_">self</span>.flip(l)<br>            l = <span class="hljs-built_in">bytes</span>(d^j <span class="hljs-keyword">for</span> d,j <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(l,liscense[i:i+<span class="hljs-number">8</span>]))<br>        <span class="hljs-built_in">print</span>(l)<br>        <span class="hljs-keyword">return</span>  <span class="hljs-keyword">not</span> <span class="hljs-built_in">any</span>(l)<br></code></pre></td></tr></table></figure><p>先看task<br>login函数判断输入是否与smkoe_key相同，不同则立刻返回False<br>check_password调用login并返回login执行的细节，包括执行了哪一行，执行次数，执行时间<br>但如果pro是False，我们是拿不到执行次数的<br>license则是对输入进行一个判断</p><p>所以我们需要在2中提及一个满足条件的license，然后就可以开始针对执行次数攻击<br>在license中有一句assert len(liscense) % 8 &#x3D;&#x3D; 0，此时如果len(liscense)为0也是满足的，并且not any(l)是True<br>所以我们直接提交一个空license即可</p><p>然后稍微爆破一下smoke_key的长度，再逐个爆破即可拿到flag<br>exp(稍微有点丑陋):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> string<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send1</span>(<span class="hljs-params">s</span>):<br>    out=r.recvuntil(<span class="hljs-string">b&#x27;&gt; &#x27;</span>)<br>    r.sendline(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    out+=r.recvuntil(<span class="hljs-string">b&#x27;&gt; &#x27;</span>)<br><br>    r.sendline(s.encode())<br>    out+=r.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    out+=r.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    <span class="hljs-keyword">return</span> out.decode()<br><br>context(os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><br>HOST=<span class="hljs-string">&#x27;139.155.126.78&#x27;</span><br>PORT=<span class="hljs-number">18806</span><br><br>r=remote(HOST,PORT)<br>out=r.recv(<span class="hljs-number">400</span>)<br><br><span class="hljs-comment">#提交空license</span><br>r.sendline(<span class="hljs-string">b&#x27;2&#x27;</span>)<br>out=r.recv(<span class="hljs-number">400</span>)<br><br>r.sendline(<span class="hljs-string">b&#x27;123456&#x27;</span>)<br>out=r.recv(<span class="hljs-number">400</span>)<br><br>r.sendline(<span class="hljs-string">b&#x27;&#x27;</span>)<br>out=r.recv(<span class="hljs-number">800</span>)<br><span class="hljs-built_in">print</span>(out.decode())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;=========&#x27;</span>)<br><br><span class="hljs-comment">#这里之前有爆过长度，节省时间从22开始爆，每次连接的smoke_key长度的不固定的</span><br>length=<span class="hljs-number">22</span><br>out=send1(<span class="hljs-string">&#x27;1&#x27;</span>*length)<br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;12&#x27;</span> <span class="hljs-keyword">in</span> out:<span class="hljs-comment">#如果执行了if len(password) != len(smoke_key):后面的return False</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">30</span>):<br>        out=send1(<span class="hljs-string">&#x27;1&#x27;</span>*(length+i))<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;12&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> out:<br>            length=length+i<br>            <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(length)<br><br>key=<span class="hljs-string">&#x27;&#x27;</span><br>st=string.printable[:-<span class="hljs-number">5</span>]<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length):<br>    <span class="hljs-built_in">print</span>(j)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> st:<br>        out=send1(<span class="hljs-string">r&#x27;&#x27;</span>+key+i+<span class="hljs-string">&#x27;0&#x27;</span>*(length-<span class="hljs-number">1</span>-j))<br>        left=out.find(<span class="hljs-string">&#x27;[&#x27;</span>)<br>        right=out.find(<span class="hljs-string">&#x27;]&#x27;</span>)<br>        <span class="hljs-keyword">if</span> left!=-<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> right!=-<span class="hljs-number">1</span>:<br>            l1=<span class="hljs-built_in">eval</span>(out[left:right+<span class="hljs-number">1</span>])<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(l1)&gt;<span class="hljs-number">2</span>:<br>                <span class="hljs-keyword">if</span> l1[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]&gt;j+<span class="hljs-number">1</span>:<br>                    <span class="hljs-built_in">print</span>(l1)<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;success&#x27;</span>)<br>                    key+=i<br>                    <span class="hljs-built_in">print</span>(key)<br>                    <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;over&#x27;</span>)<br>            <span class="hljs-built_in">print</span>(out)<br></code></pre></td></tr></table></figure><p>然后成功拿到flag</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">DASCTF</span>&#123;<span class="hljs-number">82027784803625989128426726039406</span>&#125;<br></code></pre></td></tr></table></figure><p>题目没有对空license进行一个判断，这也就成了一个突破点</p><hr><p>嗯，就先这两题吧~。剩下两题，一题zuc不是很想做，另一题我题目都不想看。就先到这吧。<br><img src="/2025/01/22/2025.1.18DASCTF/2.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>crypto</category>
      
      <category>DASCTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
      <tag>DASCTF</tag>
      
      <tag>matrix</tag>
      
      <tag>RSA</tag>
      
      <tag>矩阵</tag>
      
      <tag>论文复现</tag>
      
      <tag>靶机</tag>
      
      <tag>侧信道攻击</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>换电脑啦</title>
    <link href="/2025/01/22/%E6%8D%A2%E7%94%B5%E8%84%91%E5%95%A6/"/>
    <url>/2025/01/22/%E6%8D%A2%E7%94%B5%E8%84%91%E5%95%A6/</url>
    
    <content type="html"><![CDATA[<p>换了台电脑，git提交没问题了，要开始更新博客啦<br><img src="/2025/01/22/%E6%8D%A2%E7%94%B5%E8%84%91%E5%95%A6/1.jpg" alt="当当当当"></p><p>之后大概就是会比赛的题目出一篇博客，密码出一篇博客，所以可能会有点重复。嗯。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>池塘里的小石子</title>
    <link href="/2025/01/20/pictures/"/>
    <url>/2025/01/20/pictures/</url>
    
    <content type="html"><![CDATA[<h1 id="池塘里的小石子"><a href="#池塘里的小石子" class="headerlink" title="池塘里的小石子"></a>池塘里的小石子</h1><p>会有一些小故事</p><h3 id="明日方舟"><a href="#明日方舟" class="headerlink" title="明日方舟"></a>明日方舟</h3><p><img src="/pictures/19.png" alt="1"><br><img src="/pictures/20.png" alt="2"><br><img src="/pictures/21.png" alt="3"><br><img src="/pictures/22.png" alt="4"><br><img src="/pictures/23.png" alt="5"><br><img src="/pictures/24.png" alt="6"><br><img src="/pictures/25.png" alt="7"></p>]]></content>
    
    
    
    <tags>
      
      <tag>明日方舟</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
