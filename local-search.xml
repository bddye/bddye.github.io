<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>crypto的小池塘</title>
    <link href="/2025/02/01/crypto%E7%9A%84%E5%B0%8F%E6%B1%A0%E5%A1%98/"/>
    <url>/2025/02/01/crypto%E7%9A%84%E5%B0%8F%E6%B1%A0%E5%A1%98/</url>
    
    <content type="html"><![CDATA[<h1 id="crypto的小池塘"><a href="#crypto的小池塘" class="headerlink" title="crypto的小池塘"></a>crypto的小池塘</h1><p>是 <strong>crypto的小池塘</strong> 哒！</p><p>crypto内容持续更新中！</p><h2 id="古典密码"><a href="#古典密码" class="headerlink" title="古典密码"></a>古典密码</h2><p>to be continue…</p>]]></content>
    
    
    <categories>
      
      <category>crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024浙江省赛</title>
    <link href="/2025/02/01/2024%E6%B5%99%E6%B1%9F%E7%9C%81%E8%B5%9B/"/>
    <url>/2025/02/01/2024%E6%B5%99%E6%B1%9F%E7%9C%81%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="2024浙江省赛"><a href="#2024浙江省赛" class="headerlink" title="2024浙江省赛"></a>2024浙江省赛</h1><p>是 <strong>2024浙江省赛</strong> 哒！</p><h2 id="myez-encode"><a href="#myez-encode" class="headerlink" title="myez_encode"></a>myez_encode</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> bytes_to_long, getPrime<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> isprime<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_ecc_parameters</span>():<br>    x = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">512</span>)<br>    y = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">512</span>)<br>    <span class="hljs-keyword">return</span> x, y<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_prime_on_curve</span>(<span class="hljs-params">x, y, a, b, ecc_p</span>):<br>    p = x<br>    q = y<br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> (isprime(p) <span class="hljs-keyword">and</span> isprime(q)):<br>        p = random.randint(<span class="hljs-number">2</span>, ecc_p - <span class="hljs-number">1</span>)<br>        q = (p**<span class="hljs-number">3</span> + a * p + b) % ecc_p<br>    <span class="hljs-keyword">return</span> p, q<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_rsa_parameters</span>():<br>    a = getPrime(<span class="hljs-number">512</span>) <br>    b = getPrime(<span class="hljs-number">512</span>)   <br>    ecc_p = getPrime(<span class="hljs-number">512</span>)  <br>    x, y = generate_ecc_parameters()<br>    p, q = find_prime_on_curve(x, y, a, b, ecc_p)<br>    n = p * q<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;p= <span class="hljs-subst">&#123;p&#125;</span>\nq= <span class="hljs-subst">&#123;q&#125;</span>\nn= <span class="hljs-subst">&#123;n&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;a= <span class="hljs-subst">&#123;a&#125;</span>\nb= <span class="hljs-subst">&#123;b&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;P= <span class="hljs-subst">&#123;ecc_p&#125;</span>&quot;</span>)<br>    <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    generate_rsa_parameters()<br><br>n = p*q<br>e = <span class="hljs-number">9</span><br>m = bytes_to_long(flag)<br>c = <span class="hljs-built_in">pow</span>(m,e,n)<br><span class="hljs-built_in">print</span>(c)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n= 23298836191712395990541254600776262066247692725919114528027158820049802443474994576179738462067629079873633948850637889127452791527914591229415148712172587856497614285410824614070907847594399218298016379507879066220104597707859246179921731928508884947347652904142879813069359815823184922170241099916465722623</span><br><span class="hljs-string">a= 7388665644223916915334064243181348811184637180763467245762518813757790945069068654378380490110607063038613823004593920489924786053478102905200169738195523</span><br><span class="hljs-string">b= 11742940161647091720180482697980016011774828087234021441133595442949631197989696508358388255191793888646498553804646435609849154496274569000398776043150743</span><br><span class="hljs-string">P= 11300086101709077144191286182913849072593185125745291892398153828719453495325025227858328617077648296782357912556752467026523366682963139253552060862229027</span><br><span class="hljs-string">c= 9314530945343661153059846131608414257092556390479105017633636336832925597262814680689800448223193301814365726128618348603188219757245073917910487794768758461683644600756896595336654006282030911824869219015400826589122838492456940861634378619000373353637666835642505021355710338342048772713981673863167110471</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>给出了q &#x3D; (p*<em>3 + a * p + b) % ecc_p，n&#x3D;p</em>q<br>设p&#x3D;x，构建ecc_p上的方程解出p</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sage">n= 23298836191712395990541254600776262066247692725919114528027158820049802443474994576179738462067629079873633948850637889127452791527914591229415148712172587856497614285410824614070907847594399218298016379507879066220104597707859246179921731928508884947347652904142879813069359815823184922170241099916465722623<br>a= 7388665644223916915334064243181348811184637180763467245762518813757790945069068654378380490110607063038613823004593920489924786053478102905200169738195523<br>b= 11742940161647091720180482697980016011774828087234021441133595442949631197989696508358388255191793888646498553804646435609849154496274569000398776043150743<br>P= 11300086101709077144191286182913849072593185125745291892398153828719453495325025227858328617077648296782357912556752467026523366682963139253552060862229027<br><br>R=Zmod(P)[&#x27;x&#x27;]<br>x=R.gen()<br>f=(x**3 + a * x + b)*x-n<br>roots=f.roots()<br>print(roots)<br></code></pre></td></tr></table></figure><blockquote><p>[(2925490712948356009205547798331037409204468852265154197929696123102317330847028997592576845375767951888373634075473448002921250636926630905567362014595493, 1)]</p></blockquote><p>因为<code>GCD(e,(p-1))</code>是3，而<code>GCD(e,(q-1))</code>是1，所以转换到mod q上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>p=<span class="hljs-number">2925490712948356009205547798331037409204468852265154197929696123102317330847028997592576845375767951888373634075473448002921250636926630905567362014595493</span><br>q=<span class="hljs-number">7964077988212602731598828926489143570796450850963162530397620970577507270219530635660167912693046701894468774510746807002256765035407708129322533385075411</span><br>e=<span class="hljs-number">9</span><br>d=<span class="hljs-built_in">pow</span>(e,-<span class="hljs-number">1</span>,q-<span class="hljs-number">1</span>)<br>plain=<span class="hljs-built_in">pow</span>(c,d,q)<br><span class="hljs-built_in">print</span>(long_to_bytes(plain))<br></code></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">DASCTF</span><span class="hljs-template-variable">&#123;Very_easy_3NC0dE_Is_1t&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/2025/02/01/2024%E6%B5%99%E6%B1%9F%E7%9C%81%E8%B5%9B/1.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>crypto</category>
      
      <category>DASCTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
      <tag>DASCTF</tag>
      
      <tag>RSA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2025.1.18 DASCTF</title>
    <link href="/2025/01/22/2025.1.18DASCTF/"/>
    <url>/2025/01/22/2025.1.18DASCTF/</url>
    
    <content type="html"><![CDATA[<h1 id="2025-1-18西湖论剑"><a href="#2025-1-18西湖论剑" class="headerlink" title="2025.1.18西湖论剑"></a>2025.1.18西湖论剑</h1><p>是 <strong>2025.1.18西湖论剑</strong> 哒！</p><h2 id="matrixRSA"><a href="#matrixRSA" class="headerlink" title="matrixRSA"></a>matrixRSA</h2><p>先看题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br>ext_len = <span class="hljs-number">9</span>*<span class="hljs-number">23</span> - <span class="hljs-built_in">len</span>(flag)<br>flag += <span class="hljs-string">&#x27;&#x27;</span>.join(random.choice(string.printable) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ext_len))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_rsa_encrypt</span>():<br>    p = getPrime(<span class="hljs-number">512</span>)<br>    q = getPrime(<span class="hljs-number">512</span>)<br>    n = p * q<br>    data = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>        data.append(bytes_to_long(flag[<span class="hljs-number">23</span>*i:<span class="hljs-number">23</span>*(i+<span class="hljs-number">1</span>)].encode()))<br>    M = Matrix(Zmod(n), [data[i:i+<span class="hljs-number">3</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(data), <span class="hljs-number">3</span>)])<br>    e = <span class="hljs-number">65537</span><br>    C = M**e<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p =&quot;</span>, p &gt;&gt; <span class="hljs-number">100</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n =&quot;</span>, n)<br>    <span class="hljs-keyword">return</span> C<br>C = my_rsa_encrypt()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;C =&quot;</span>, C)<br></code></pre></td></tr></table></figure><p>题目将矩阵用RSA的方式进行了加密<br>然后给出了p的高412位,n,和C</p><p>直接上coppersmith即可解出p</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sage">p=9707529668721508094878754383636813058761407528950189013789315732447048631740849315894253576415843631107370002912949379757275<br>n=132298777672085547096511087266255066285502135020124093900452138262993155381766816424955849796168059204379325075568094431259877923353664926875986223020472585645919414821322880213299188157427622804140996898685564075484754918339670099806186873974594139182324884620018780943630196754736972805036038798946726414009<br>p=p&lt;&lt;100<br>bit=100<br>R.&lt;x&gt;=PolynomialRing(Zmod(n))<br>f=p+x<br>f=f.monic()<br>roots=f.small_roots(X=2^bit,beta=0.4,epsilon=0.01)<br>print(roots)<br></code></pre></td></tr></table></figure><blockquote><p>[386875690473242360543194849663]</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">p=<span class="hljs-number">12305755811288164655681709252717258015229295989302934566212712319314835335461946241491177972870130171728224502716603340551354171940107285908105124549960063</span><br>q=<span class="hljs-number">10750967246621849802090386055921679114516122704252330881722100331526757637044067492444912824266860574267360247681890637480406758188129451052986858429875143</span><br></code></pre></td></tr></table></figure><p>刚开始先试试phi&#x3D;(p-1)*(q-1)<br>按正常RSA来解发现结果不对<br>上网搜索（搜索引擎yyds）<br>发现这道题其实是论文复现<br>基本是原题了，<a href="https://latallvia-d.github.io/2024/07/02/%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0%EF%BC%9AA%20Matrix%20Extension%20of%20the%20RSA%20Cryptosystem/">这是原文</a> <del>他博客主题怎么跟我一样（小声）</del></p><p><img src="/2025/01/22/2025.1.18DASCTF/1.png"><br>那么把phi用(p**2-1)*(p**2-p)*(q**2-1)*(q**2-q)代掉即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>C = [[<span class="hljs-number">130700952989014311434434028098810412089294728270156705618326733322297465714495704072159530618655340096705383710304658044991149662060657745933090473082775425812641300964472543605460360640675949447837208449794830578184968528547366608180085787382376536622136035364815331037493098283462540849880674541138443271941</span>,<span class="hljs-number">71108771421281691064141020659106224750236412635914570166893031318860027728093402453305986361330527563506168063047627979831630830003190075818824767924892107148560048725155587353683119195901991465464478196049173060097561821877061015587704803006499153902855903286456023726638247758665778434728734461065079337757</span>,<span class="hljs-number">67999998657112350704927993584783146575182096185020115836188544590466205688442741039622382576899587857972463337900200038021257164640987281308471100297698062626107380871262596623736773815445544153508352926374272336154553916204320257697068627063236060520725376727528604938949588845448940836430120015498687885615</span>],<br>[ <span class="hljs-number">23893343854815011808020457237095285782125931083991537368666368653089096539223297567339111502968295914745423286070638369517207554770793304994639155083818859208362057394004419565231389473766857235749279110546079776040193183912062870294579472815588333047561915280189529367474392709554971446978468118280633281993</span>,<span class="hljs-number">9711323829269829751519177755915164402658693668631868499383945203627197171508441332211907278473276713066275283973856513580205808517918096017699122954464305556795300874005627001464297760413897074044080665941802588680926430030715299713241442313300920463145903399054123967914968894345491958980945927764454159601</span>,<span class="hljs-number">44904507975955275578858125671789564568591470104141872573541481508697254621798834910263012676346204850278744732796211742615531019931085695420000582627144871996018850098958417750918177991375489106531511894991744745328626887250694950153424439172667977623425955725695498585224383607063387876414273539268016177401</span>],<br>[ <span class="hljs-number">67805732998935098446255672500407441801838056284635701147853683333480924477835278030145327818330916280792499177503535618310624546400536573924729837478349680007368781306805363621196573313903080315513952415535369016620873765493531188596985587834408434835281527678166509365418905214174034794683785063802543354572</span>,<span class="hljs-number">13486048723056269216825615499052563411132892702727634833280269923882908676944418624902325737619945647093190397919828623788245644333036340084254490542292357044974139884304715033710988658109160936809398722070125690919829906642273377982021120160702344103998315875166038849942426382506293976662337161520494820727</span>,<span class="hljs-number">95932690738697024519546289135992512776877884741458439242887603021792409575448192508456813215486904392440772808083658410285088451086298418303987628634150431725794904656250453314950126433260613949819432633322599879072805834951478466009343397728711205498602927752917834774516505262381463414617797291857077444676</span>]]<br><br>n=<span class="hljs-number">132298777672085547096511087266255066285502135020124093900452138262993155381766816424955849796168059204379325075568094431259877923353664926875986223020472585645919414821322880213299188157427622804140996898685564075484754918339670099806186873974594139182324884620018780943630196754736972805036038798946726414009</span><br>p=<span class="hljs-number">12305755811288164655681709252717258015229295989302934566212712319314835335461946241491177972870130171728224502716603340551354171940107285908105124549960063</span><br>q=<span class="hljs-number">10750967246621849802090386055921679114516122704252330881722100331526757637044067492444912824266860574267360247681890637480406758188129451052986858429875143</span><br>e=<span class="hljs-number">65537</span><br>phi=(p**<span class="hljs-number">2</span>-<span class="hljs-number">1</span>)*(p**<span class="hljs-number">2</span>-p)*(q**<span class="hljs-number">2</span>-<span class="hljs-number">1</span>)*(q**<span class="hljs-number">2</span>-q)<br>d=inverse(e,phi)<br>B=Matrix(Zmod(n),C)<br>B=B**d<br>flag=<span class="hljs-string">b&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        flag+=long_to_bytes(<span class="hljs-built_in">int</span>(B[i][j]))<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>最后得出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">b&#x27;DASCTF&#123;48ccbfd88061d7ff3d5325148ec55d11&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="已悟"><a href="#已悟" class="headerlink" title="已悟"></a>已悟</h2><p>题目给了两个py文件</p><p>task:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> line_profiler <span class="hljs-keyword">import</span> LineProfiler<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> get_key<br><span class="hljs-keyword">from</span> license <span class="hljs-keyword">import</span> RicKV<br><span class="hljs-keyword">import</span> os<br><br>flag = os.getenv(<span class="hljs-string">&#x27;DASFLAG&#x27;</span>)<br>smoke_key = get_key() <span class="hljs-comment"># the key just printable, this function is to make all users key different</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">password</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(password) != <span class="hljs-built_in">len</span>(smoke_key):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(password)):<br>        <span class="hljs-keyword">if</span> password[i] != smoke_key[i]:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_password</span>(<span class="hljs-params">user_input,pro=<span class="hljs-literal">False</span></span>):<br>    profiler = LineProfiler()<br>    profiler.add_function(login)<br>    profiler.enable_by_count()<br>    is_valid = login(user_input)<br>    profiler.disable_by_count()<br>    x = profiler.get_stats().timings<br>    hacker,hacker_pro = [],[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> x:<br>         <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> x[i]:<br>              hacker.append((j[<span class="hljs-number">0</span>],j[-<span class="hljs-number">1</span>]))<br>              hacker_pro.append(j)<br>    <span class="hljs-built_in">print</span>(hacker)<br>    <span class="hljs-keyword">return</span> is_valid, hacker_pro <span class="hljs-keyword">if</span> pro <span class="hljs-keyword">else</span> hacker<br><br>banner = <span class="hljs-string">&quot;🏞️ ⚔️ 2️⃣ 0️⃣ 2️⃣ 5️⃣ 👋 😊&quot;</span><br><br>MEUN = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1️⃣ ✨ 🔑 🚩</span><br><span class="hljs-string">2️⃣ ✨ 🛍️ ⚡️💨5️⃣</span><br><span class="hljs-string">3️⃣ ✨ ➡️ 🍐🍬</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-built_in">print</span>(banner)<br>    pro = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-built_in">print</span>(MEUN)<br>            choice = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt; &quot;</span>)[<span class="hljs-number">0</span>])<br>            <span class="hljs-keyword">if</span> choice == <span class="hljs-number">3</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;🏔️🐑❄️🐆🦦🦊🐹👩🏔️&quot;</span>)<br>                exit(<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">elif</span> choice == <span class="hljs-number">1</span>:<br>                 password = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;🔑 &gt; &quot;</span>).strip()<br>                 success,X = check_password(password,pro)<br>                 <span class="hljs-keyword">if</span> success:<br>                      <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;1️⃣ ❗5️⃣ ❗👴💨⚡️💨5️⃣&quot;</span>)<br>                      <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;🚩 <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>                      exit(<span class="hljs-number">0</span>)<br>                 <span class="hljs-keyword">else</span>:<br>                      <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;🤔 💨 <span class="hljs-subst">&#123;X&#125;</span> 💨&quot;</span>)<br>            <span class="hljs-keyword">elif</span> choice == <span class="hljs-number">2</span>:<br>                 <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">                 怎么获取秘钥？</span><br><span class="hljs-string"></span><br><span class="hljs-string">                 您可以使用 CTF 的一把梭工具,或者给我一支锐克。</span><br><span class="hljs-string">                 Maybe you noob ctfer can go to xianyu or ask friend for help.</span><br><span class="hljs-string">                 ざっこの方は、xianyu に行くか、友達に助けを求めるといいかもしれません。ざっこ！ざっこ！🤭🤭🤭</span><br><span class="hljs-string">                 མདོག་འདོད་འདི་ CTF གནོད་པའི་ལག་ཆོད་ལས་ ཧིན་ཨིའུ་ཡིན་ལུང་ འོག་ལུ་ལོངས་སྐད་ཁུངས་ལུ་འཛུལ་བ་འདི་འདོད་མི་འབད་ཡོད་མི་འདུག་。</span><br><span class="hljs-string"></span><br><span class="hljs-string">                 &quot;&quot;&quot;</span><br>                 license_key = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;🔑 &gt; &quot;</span>).strip()<br>                 license = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;📜 &gt; &quot;</span>).strip()<br>                 rick = RicKV(license_key)<br>                 <span class="hljs-keyword">if</span> rick.check(license):<br>                      pro = <span class="hljs-literal">True</span><br>                 <span class="hljs-keyword">else</span>:<br>                      <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;👵🏻👵🏻🤰👶&quot;</span>)<br></code></pre></td></tr></table></figure><p>license:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> hashlib<br><br>Xor= <span class="hljs-keyword">lambda</span> v: reduce(<span class="hljs-keyword">lambda</span> res, x: res ^ x, v, <span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RicKV</span>:<br>    <span class="hljs-built_in">round</span> = <span class="hljs-number">15</span><br>    S1 = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<br>    S2 = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, key</span>):<br>        key = hashlib.sha256(<span class="hljs-built_in">str</span>(key).encode(<span class="hljs-string">&quot;utf-8&quot;</span>)).digest()<br>        random.seed(key)<br>        <span class="hljs-variable language_">self</span>.roundkey = <span class="hljs-built_in">int</span>(key.<span class="hljs-built_in">hex</span>(), <span class="hljs-number">16</span>)<br>        <span class="hljs-variable language_">self</span>.subkeys = [<br>            [<br>                ((<span class="hljs-built_in">int</span>(<span class="hljs-built_in">bin</span>(<span class="hljs-variable language_">self</span>.roundkey)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">16</span> * (<span class="hljs-variable language_">self</span>.<span class="hljs-built_in">round</span>+ <span class="hljs-number">1</span>))[<span class="hljs-number">16</span> * j + i]) &amp; <span class="hljs-number">1</span>) - <span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xf</span><br>                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)<br>            ]<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-variable language_">self</span>.<span class="hljs-built_in">round</span> + <span class="hljs-number">1</span>)<br>        ]<br>        random.shuffle(<span class="hljs-variable language_">self</span>.S1)<br>        random.shuffle(<span class="hljs-variable language_">self</span>.S2)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add_round</span>(<span class="hljs-params">self, s, k</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>                s[i*<span class="hljs-number">4</span>+j] ^= k[i]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sub</span>(<span class="hljs-params">self,s</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>            index = <span class="hljs-variable language_">self</span>.S2[i]  <br>            temp = s[index]     <br>            s[i] = <span class="hljs-variable language_">self</span>.S1[temp]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">mix_1</span>(<span class="hljs-params">self,s,r</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>            s[i] = s[i] ^ <span class="hljs-variable language_">self</span>.subkeys[i][r]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">mix_2</span>(<span class="hljs-params">self,s,x</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">16</span>,<span class="hljs-number">4</span>):<br>            x[i//<span class="hljs-number">4</span>] = Xor(s[i:i + <span class="hljs-number">4</span>])<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">flip</span>(<span class="hljs-params">self, plaintext</span>):<br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(plaintext) == <span class="hljs-number">8</span><br>        S = [<span class="hljs-built_in">int</span>(_, <span class="hljs-number">16</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>(plaintext.<span class="hljs-built_in">hex</span>())]<br>        X = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)]<br>        <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-variable language_">self</span>.<span class="hljs-built_in">round</span>):<br>            <span class="hljs-variable language_">self</span>.mix_1(S,r)<br>            <span class="hljs-variable language_">self</span>.sub(S)<br>            <span class="hljs-variable language_">self</span>.mix_2(S,X)<br>            <span class="hljs-variable language_">self</span>.add_round(S,X)<br><br>        S = [S[i] ^ <span class="hljs-variable language_">self</span>.subkeys[<span class="hljs-variable language_">self</span>.<span class="hljs-built_in">round</span>][i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-string">&quot;&#123;:x&#125;&quot;</span>.<span class="hljs-built_in">format</span>(_) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> S))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">self,liscense</span>):<br>        liscense= base64.b64decode(liscense)<br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(liscense) % <span class="hljs-number">8</span> == <span class="hljs-number">0</span><br>        l = <span class="hljs-string">b&quot;\x00&quot;</span> * <span class="hljs-number">8</span>  <br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(liscense),<span class="hljs-number">8</span>):<br>            l = <span class="hljs-built_in">bytes</span>(d^j <span class="hljs-keyword">for</span> d,j <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(l,liscense[i:i+<span class="hljs-number">8</span>]))<br>            l = <span class="hljs-variable language_">self</span>.flip(l)<br>            l = <span class="hljs-built_in">bytes</span>(d^j <span class="hljs-keyword">for</span> d,j <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(l,liscense[i:i+<span class="hljs-number">8</span>]))<br>        <span class="hljs-built_in">print</span>(l)<br>        <span class="hljs-keyword">return</span>  <span class="hljs-keyword">not</span> <span class="hljs-built_in">any</span>(l)<br></code></pre></td></tr></table></figure><p>先看task<br>login函数判断输入是否与smkoe_key相同，不同则立刻返回False<br>check_password调用login并返回login执行的细节，包括执行了哪一行，执行次数，执行时间<br>但如果pro是False，我们是拿不到执行次数的<br>license则是对输入进行一个判断</p><p>所以我们需要在2中提及一个满足条件的license，然后就可以开始针对执行次数攻击<br>在license中有一句assert len(liscense) % 8 &#x3D;&#x3D; 0，此时如果len(liscense)为0也是满足的，并且not any(l)是True<br>所以我们直接提交一个空license即可</p><p>然后稍微爆破一下smoke_key的长度，再逐个爆破即可拿到flag<br>exp(稍微有点丑陋):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> string<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send1</span>(<span class="hljs-params">s</span>):<br>    out=r.recvuntil(<span class="hljs-string">b&#x27;&gt; &#x27;</span>)<br>    r.sendline(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    out+=r.recvuntil(<span class="hljs-string">b&#x27;&gt; &#x27;</span>)<br><br>    r.sendline(s.encode())<br>    out+=r.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    out+=r.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    <span class="hljs-keyword">return</span> out.decode()<br><br>context(os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><br>HOST=<span class="hljs-string">&#x27;139.155.126.78&#x27;</span><br>PORT=<span class="hljs-number">18806</span><br><br>r=remote(HOST,PORT)<br>out=r.recv(<span class="hljs-number">400</span>)<br><br><span class="hljs-comment">#提交空license</span><br>r.sendline(<span class="hljs-string">b&#x27;2&#x27;</span>)<br>out=r.recv(<span class="hljs-number">400</span>)<br><br>r.sendline(<span class="hljs-string">b&#x27;123456&#x27;</span>)<br>out=r.recv(<span class="hljs-number">400</span>)<br><br>r.sendline(<span class="hljs-string">b&#x27;&#x27;</span>)<br>out=r.recv(<span class="hljs-number">800</span>)<br><span class="hljs-built_in">print</span>(out.decode())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;=========&#x27;</span>)<br><br><span class="hljs-comment">#这里之前有爆过长度，节省时间从22开始爆，每次连接的smoke_key长度的不固定的</span><br>length=<span class="hljs-number">22</span><br>out=send1(<span class="hljs-string">&#x27;1&#x27;</span>*length)<br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;12&#x27;</span> <span class="hljs-keyword">in</span> out:<span class="hljs-comment">#如果执行了if len(password) != len(smoke_key):后面的return False</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">30</span>):<br>        out=send1(<span class="hljs-string">&#x27;1&#x27;</span>*(length+i))<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;12&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> out:<br>            length=length+i<br>            <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(length)<br><br>key=<span class="hljs-string">&#x27;&#x27;</span><br>st=string.printable[:-<span class="hljs-number">5</span>]<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length):<br>    <span class="hljs-built_in">print</span>(j)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> st:<br>        out=send1(<span class="hljs-string">r&#x27;&#x27;</span>+key+i+<span class="hljs-string">&#x27;0&#x27;</span>*(length-<span class="hljs-number">1</span>-j))<br>        left=out.find(<span class="hljs-string">&#x27;[&#x27;</span>)<br>        right=out.find(<span class="hljs-string">&#x27;]&#x27;</span>)<br>        <span class="hljs-keyword">if</span> left!=-<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> right!=-<span class="hljs-number">1</span>:<br>            l1=<span class="hljs-built_in">eval</span>(out[left:right+<span class="hljs-number">1</span>])<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(l1)&gt;<span class="hljs-number">2</span>:<br>                <span class="hljs-keyword">if</span> l1[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]&gt;j+<span class="hljs-number">1</span>:<br>                    <span class="hljs-built_in">print</span>(l1)<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;success&#x27;</span>)<br>                    key+=i<br>                    <span class="hljs-built_in">print</span>(key)<br>                    <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;over&#x27;</span>)<br>            <span class="hljs-built_in">print</span>(out)<br></code></pre></td></tr></table></figure><p>然后成功拿到flag</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">DASCTF</span>&#123;<span class="hljs-number">82027784803625989128426726039406</span>&#125;<br></code></pre></td></tr></table></figure><p>题目没有对空license进行一个判断，这也就成了一个突破点</p><hr><p>嗯，就先这两题吧~。剩下两题，一题zuc不是很想做，另一题我题目都不想看。就先到这吧。<br><img src="/2025/01/22/2025.1.18DASCTF/2.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>crypto</category>
      
      <category>DASCTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
      <tag>DASCTF</tag>
      
      <tag>RSA</tag>
      
      <tag>matrix</tag>
      
      <tag>矩阵</tag>
      
      <tag>论文复现</tag>
      
      <tag>靶机</tag>
      
      <tag>侧信道攻击</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>换电脑啦</title>
    <link href="/2025/01/22/%E6%8D%A2%E7%94%B5%E8%84%91%E5%95%A6/"/>
    <url>/2025/01/22/%E6%8D%A2%E7%94%B5%E8%84%91%E5%95%A6/</url>
    
    <content type="html"><![CDATA[<p>换了台电脑，git提交没问题了，要开始更新博客啦<br><img src="/2025/01/22/%E6%8D%A2%E7%94%B5%E8%84%91%E5%95%A6/1.jpg" alt="当当当当"></p><p>之后大概就是会比赛的题目出一篇博客，密码出一篇博客，所以可能会有点重复。嗯。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>池塘里的小石子</title>
    <link href="/2025/01/20/pictures/"/>
    <url>/2025/01/20/pictures/</url>
    
    <content type="html"><![CDATA[<h1 id="池塘里的小石子"><a href="#池塘里的小石子" class="headerlink" title="池塘里的小石子"></a>池塘里的小石子</h1><p>会有一些小故事</p><h3 id="明日方舟"><a href="#明日方舟" class="headerlink" title="明日方舟"></a>明日方舟</h3><p><img src="/pictures/19.png" alt="1"><br><img src="/pictures/20.png" alt="2"><br><img src="/pictures/21.png" alt="3"><br><img src="/pictures/22.png" alt="4"><br><img src="/pictures/23.png" alt="5"><br><img src="/pictures/24.png" alt="6"><br><img src="/pictures/25.png" alt="7"></p>]]></content>
    
    
    
    <tags>
      
      <tag>明日方舟</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
